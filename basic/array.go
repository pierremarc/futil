// Code generated by go generate on 2018-04-10 05:59:54.87717674 +0000 UTC
package basic


import (
 )




// ArrayBool
type ArrayBool interface {
	First() ResultBool
	Slice() []bool
	Each(func(bool))
	Concat(ArrayBool) arrayBool

	MapBool(func(bool) bool) arrayBool
	ReduceBool(func(bool, int, ArrayBool) bool, bool) bool

	MapByte(func(bool) byte) arrayByte
	ReduceByte(func(bool, int, ArrayBool) byte, byte) byte

	MapComplex128(func(bool) complex128) arrayComplex128
	ReduceComplex128(func(bool, int, ArrayBool) complex128, complex128) complex128

	MapComplex64(func(bool) complex64) arrayComplex64
	ReduceComplex64(func(bool, int, ArrayBool) complex64, complex64) complex64

	MapFloat32(func(bool) float32) arrayFloat32
	ReduceFloat32(func(bool, int, ArrayBool) float32, float32) float32

	MapFloat64(func(bool) float64) arrayFloat64
	ReduceFloat64(func(bool, int, ArrayBool) float64, float64) float64

	MapInt(func(bool) int) arrayInt
	ReduceInt(func(bool, int, ArrayBool) int, int) int

	MapInt16(func(bool) int16) arrayInt16
	ReduceInt16(func(bool, int, ArrayBool) int16, int16) int16

	MapInt32(func(bool) int32) arrayInt32
	ReduceInt32(func(bool, int, ArrayBool) int32, int32) int32

	MapInt64(func(bool) int64) arrayInt64
	ReduceInt64(func(bool, int, ArrayBool) int64, int64) int64

	MapInt8(func(bool) int8) arrayInt8
	ReduceInt8(func(bool, int, ArrayBool) int8, int8) int8

	MapRune(func(bool) rune) arrayRune
	ReduceRune(func(bool, int, ArrayBool) rune, rune) rune

	MapString(func(bool) string) arrayString
	ReduceString(func(bool, int, ArrayBool) string, string) string

	MapUInt(func(bool) uint) arrayUInt
	ReduceUInt(func(bool, int, ArrayBool) uint, uint) uint

	MapUInt16(func(bool) uint16) arrayUInt16
	ReduceUInt16(func(bool, int, ArrayBool) uint16, uint16) uint16

	MapUInt32(func(bool) uint32) arrayUInt32
	ReduceUInt32(func(bool, int, ArrayBool) uint32, uint32) uint32

	MapUInt64(func(bool) uint64) arrayUInt64
	ReduceUInt64(func(bool, int, ArrayBool) uint64, uint64) uint64

	MapUInt8(func(bool) uint8) arrayUInt8
	ReduceUInt8(func(bool, int, ArrayBool) uint8, uint8) uint8

	MapUintPtr(func(bool) uintptr) arrayUintPtr
	ReduceUintPtr(func(bool, int, ArrayBool) uintptr, uintptr) uintptr
 
}

// ArrayByte
type ArrayByte interface {
	First() ResultByte
	Slice() []byte
	Each(func(byte))
	Concat(ArrayByte) arrayByte

	MapBool(func(byte) bool) arrayBool
	ReduceBool(func(byte, int, ArrayByte) bool, bool) bool

	MapByte(func(byte) byte) arrayByte
	ReduceByte(func(byte, int, ArrayByte) byte, byte) byte

	MapComplex128(func(byte) complex128) arrayComplex128
	ReduceComplex128(func(byte, int, ArrayByte) complex128, complex128) complex128

	MapComplex64(func(byte) complex64) arrayComplex64
	ReduceComplex64(func(byte, int, ArrayByte) complex64, complex64) complex64

	MapFloat32(func(byte) float32) arrayFloat32
	ReduceFloat32(func(byte, int, ArrayByte) float32, float32) float32

	MapFloat64(func(byte) float64) arrayFloat64
	ReduceFloat64(func(byte, int, ArrayByte) float64, float64) float64

	MapInt(func(byte) int) arrayInt
	ReduceInt(func(byte, int, ArrayByte) int, int) int

	MapInt16(func(byte) int16) arrayInt16
	ReduceInt16(func(byte, int, ArrayByte) int16, int16) int16

	MapInt32(func(byte) int32) arrayInt32
	ReduceInt32(func(byte, int, ArrayByte) int32, int32) int32

	MapInt64(func(byte) int64) arrayInt64
	ReduceInt64(func(byte, int, ArrayByte) int64, int64) int64

	MapInt8(func(byte) int8) arrayInt8
	ReduceInt8(func(byte, int, ArrayByte) int8, int8) int8

	MapRune(func(byte) rune) arrayRune
	ReduceRune(func(byte, int, ArrayByte) rune, rune) rune

	MapString(func(byte) string) arrayString
	ReduceString(func(byte, int, ArrayByte) string, string) string

	MapUInt(func(byte) uint) arrayUInt
	ReduceUInt(func(byte, int, ArrayByte) uint, uint) uint

	MapUInt16(func(byte) uint16) arrayUInt16
	ReduceUInt16(func(byte, int, ArrayByte) uint16, uint16) uint16

	MapUInt32(func(byte) uint32) arrayUInt32
	ReduceUInt32(func(byte, int, ArrayByte) uint32, uint32) uint32

	MapUInt64(func(byte) uint64) arrayUInt64
	ReduceUInt64(func(byte, int, ArrayByte) uint64, uint64) uint64

	MapUInt8(func(byte) uint8) arrayUInt8
	ReduceUInt8(func(byte, int, ArrayByte) uint8, uint8) uint8

	MapUintPtr(func(byte) uintptr) arrayUintPtr
	ReduceUintPtr(func(byte, int, ArrayByte) uintptr, uintptr) uintptr
 
}

// ArrayComplex128
type ArrayComplex128 interface {
	First() ResultComplex128
	Slice() []complex128
	Each(func(complex128))
	Concat(ArrayComplex128) arrayComplex128

	MapBool(func(complex128) bool) arrayBool
	ReduceBool(func(complex128, int, ArrayComplex128) bool, bool) bool

	MapByte(func(complex128) byte) arrayByte
	ReduceByte(func(complex128, int, ArrayComplex128) byte, byte) byte

	MapComplex128(func(complex128) complex128) arrayComplex128
	ReduceComplex128(func(complex128, int, ArrayComplex128) complex128, complex128) complex128

	MapComplex64(func(complex128) complex64) arrayComplex64
	ReduceComplex64(func(complex128, int, ArrayComplex128) complex64, complex64) complex64

	MapFloat32(func(complex128) float32) arrayFloat32
	ReduceFloat32(func(complex128, int, ArrayComplex128) float32, float32) float32

	MapFloat64(func(complex128) float64) arrayFloat64
	ReduceFloat64(func(complex128, int, ArrayComplex128) float64, float64) float64

	MapInt(func(complex128) int) arrayInt
	ReduceInt(func(complex128, int, ArrayComplex128) int, int) int

	MapInt16(func(complex128) int16) arrayInt16
	ReduceInt16(func(complex128, int, ArrayComplex128) int16, int16) int16

	MapInt32(func(complex128) int32) arrayInt32
	ReduceInt32(func(complex128, int, ArrayComplex128) int32, int32) int32

	MapInt64(func(complex128) int64) arrayInt64
	ReduceInt64(func(complex128, int, ArrayComplex128) int64, int64) int64

	MapInt8(func(complex128) int8) arrayInt8
	ReduceInt8(func(complex128, int, ArrayComplex128) int8, int8) int8

	MapRune(func(complex128) rune) arrayRune
	ReduceRune(func(complex128, int, ArrayComplex128) rune, rune) rune

	MapString(func(complex128) string) arrayString
	ReduceString(func(complex128, int, ArrayComplex128) string, string) string

	MapUInt(func(complex128) uint) arrayUInt
	ReduceUInt(func(complex128, int, ArrayComplex128) uint, uint) uint

	MapUInt16(func(complex128) uint16) arrayUInt16
	ReduceUInt16(func(complex128, int, ArrayComplex128) uint16, uint16) uint16

	MapUInt32(func(complex128) uint32) arrayUInt32
	ReduceUInt32(func(complex128, int, ArrayComplex128) uint32, uint32) uint32

	MapUInt64(func(complex128) uint64) arrayUInt64
	ReduceUInt64(func(complex128, int, ArrayComplex128) uint64, uint64) uint64

	MapUInt8(func(complex128) uint8) arrayUInt8
	ReduceUInt8(func(complex128, int, ArrayComplex128) uint8, uint8) uint8

	MapUintPtr(func(complex128) uintptr) arrayUintPtr
	ReduceUintPtr(func(complex128, int, ArrayComplex128) uintptr, uintptr) uintptr
 
}

// ArrayComplex64
type ArrayComplex64 interface {
	First() ResultComplex64
	Slice() []complex64
	Each(func(complex64))
	Concat(ArrayComplex64) arrayComplex64

	MapBool(func(complex64) bool) arrayBool
	ReduceBool(func(complex64, int, ArrayComplex64) bool, bool) bool

	MapByte(func(complex64) byte) arrayByte
	ReduceByte(func(complex64, int, ArrayComplex64) byte, byte) byte

	MapComplex128(func(complex64) complex128) arrayComplex128
	ReduceComplex128(func(complex64, int, ArrayComplex64) complex128, complex128) complex128

	MapComplex64(func(complex64) complex64) arrayComplex64
	ReduceComplex64(func(complex64, int, ArrayComplex64) complex64, complex64) complex64

	MapFloat32(func(complex64) float32) arrayFloat32
	ReduceFloat32(func(complex64, int, ArrayComplex64) float32, float32) float32

	MapFloat64(func(complex64) float64) arrayFloat64
	ReduceFloat64(func(complex64, int, ArrayComplex64) float64, float64) float64

	MapInt(func(complex64) int) arrayInt
	ReduceInt(func(complex64, int, ArrayComplex64) int, int) int

	MapInt16(func(complex64) int16) arrayInt16
	ReduceInt16(func(complex64, int, ArrayComplex64) int16, int16) int16

	MapInt32(func(complex64) int32) arrayInt32
	ReduceInt32(func(complex64, int, ArrayComplex64) int32, int32) int32

	MapInt64(func(complex64) int64) arrayInt64
	ReduceInt64(func(complex64, int, ArrayComplex64) int64, int64) int64

	MapInt8(func(complex64) int8) arrayInt8
	ReduceInt8(func(complex64, int, ArrayComplex64) int8, int8) int8

	MapRune(func(complex64) rune) arrayRune
	ReduceRune(func(complex64, int, ArrayComplex64) rune, rune) rune

	MapString(func(complex64) string) arrayString
	ReduceString(func(complex64, int, ArrayComplex64) string, string) string

	MapUInt(func(complex64) uint) arrayUInt
	ReduceUInt(func(complex64, int, ArrayComplex64) uint, uint) uint

	MapUInt16(func(complex64) uint16) arrayUInt16
	ReduceUInt16(func(complex64, int, ArrayComplex64) uint16, uint16) uint16

	MapUInt32(func(complex64) uint32) arrayUInt32
	ReduceUInt32(func(complex64, int, ArrayComplex64) uint32, uint32) uint32

	MapUInt64(func(complex64) uint64) arrayUInt64
	ReduceUInt64(func(complex64, int, ArrayComplex64) uint64, uint64) uint64

	MapUInt8(func(complex64) uint8) arrayUInt8
	ReduceUInt8(func(complex64, int, ArrayComplex64) uint8, uint8) uint8

	MapUintPtr(func(complex64) uintptr) arrayUintPtr
	ReduceUintPtr(func(complex64, int, ArrayComplex64) uintptr, uintptr) uintptr
 
}

// ArrayFloat32
type ArrayFloat32 interface {
	First() ResultFloat32
	Slice() []float32
	Each(func(float32))
	Concat(ArrayFloat32) arrayFloat32

	MapBool(func(float32) bool) arrayBool
	ReduceBool(func(float32, int, ArrayFloat32) bool, bool) bool

	MapByte(func(float32) byte) arrayByte
	ReduceByte(func(float32, int, ArrayFloat32) byte, byte) byte

	MapComplex128(func(float32) complex128) arrayComplex128
	ReduceComplex128(func(float32, int, ArrayFloat32) complex128, complex128) complex128

	MapComplex64(func(float32) complex64) arrayComplex64
	ReduceComplex64(func(float32, int, ArrayFloat32) complex64, complex64) complex64

	MapFloat32(func(float32) float32) arrayFloat32
	ReduceFloat32(func(float32, int, ArrayFloat32) float32, float32) float32

	MapFloat64(func(float32) float64) arrayFloat64
	ReduceFloat64(func(float32, int, ArrayFloat32) float64, float64) float64

	MapInt(func(float32) int) arrayInt
	ReduceInt(func(float32, int, ArrayFloat32) int, int) int

	MapInt16(func(float32) int16) arrayInt16
	ReduceInt16(func(float32, int, ArrayFloat32) int16, int16) int16

	MapInt32(func(float32) int32) arrayInt32
	ReduceInt32(func(float32, int, ArrayFloat32) int32, int32) int32

	MapInt64(func(float32) int64) arrayInt64
	ReduceInt64(func(float32, int, ArrayFloat32) int64, int64) int64

	MapInt8(func(float32) int8) arrayInt8
	ReduceInt8(func(float32, int, ArrayFloat32) int8, int8) int8

	MapRune(func(float32) rune) arrayRune
	ReduceRune(func(float32, int, ArrayFloat32) rune, rune) rune

	MapString(func(float32) string) arrayString
	ReduceString(func(float32, int, ArrayFloat32) string, string) string

	MapUInt(func(float32) uint) arrayUInt
	ReduceUInt(func(float32, int, ArrayFloat32) uint, uint) uint

	MapUInt16(func(float32) uint16) arrayUInt16
	ReduceUInt16(func(float32, int, ArrayFloat32) uint16, uint16) uint16

	MapUInt32(func(float32) uint32) arrayUInt32
	ReduceUInt32(func(float32, int, ArrayFloat32) uint32, uint32) uint32

	MapUInt64(func(float32) uint64) arrayUInt64
	ReduceUInt64(func(float32, int, ArrayFloat32) uint64, uint64) uint64

	MapUInt8(func(float32) uint8) arrayUInt8
	ReduceUInt8(func(float32, int, ArrayFloat32) uint8, uint8) uint8

	MapUintPtr(func(float32) uintptr) arrayUintPtr
	ReduceUintPtr(func(float32, int, ArrayFloat32) uintptr, uintptr) uintptr
 
}

// ArrayFloat64
type ArrayFloat64 interface {
	First() ResultFloat64
	Slice() []float64
	Each(func(float64))
	Concat(ArrayFloat64) arrayFloat64

	MapBool(func(float64) bool) arrayBool
	ReduceBool(func(float64, int, ArrayFloat64) bool, bool) bool

	MapByte(func(float64) byte) arrayByte
	ReduceByte(func(float64, int, ArrayFloat64) byte, byte) byte

	MapComplex128(func(float64) complex128) arrayComplex128
	ReduceComplex128(func(float64, int, ArrayFloat64) complex128, complex128) complex128

	MapComplex64(func(float64) complex64) arrayComplex64
	ReduceComplex64(func(float64, int, ArrayFloat64) complex64, complex64) complex64

	MapFloat32(func(float64) float32) arrayFloat32
	ReduceFloat32(func(float64, int, ArrayFloat64) float32, float32) float32

	MapFloat64(func(float64) float64) arrayFloat64
	ReduceFloat64(func(float64, int, ArrayFloat64) float64, float64) float64

	MapInt(func(float64) int) arrayInt
	ReduceInt(func(float64, int, ArrayFloat64) int, int) int

	MapInt16(func(float64) int16) arrayInt16
	ReduceInt16(func(float64, int, ArrayFloat64) int16, int16) int16

	MapInt32(func(float64) int32) arrayInt32
	ReduceInt32(func(float64, int, ArrayFloat64) int32, int32) int32

	MapInt64(func(float64) int64) arrayInt64
	ReduceInt64(func(float64, int, ArrayFloat64) int64, int64) int64

	MapInt8(func(float64) int8) arrayInt8
	ReduceInt8(func(float64, int, ArrayFloat64) int8, int8) int8

	MapRune(func(float64) rune) arrayRune
	ReduceRune(func(float64, int, ArrayFloat64) rune, rune) rune

	MapString(func(float64) string) arrayString
	ReduceString(func(float64, int, ArrayFloat64) string, string) string

	MapUInt(func(float64) uint) arrayUInt
	ReduceUInt(func(float64, int, ArrayFloat64) uint, uint) uint

	MapUInt16(func(float64) uint16) arrayUInt16
	ReduceUInt16(func(float64, int, ArrayFloat64) uint16, uint16) uint16

	MapUInt32(func(float64) uint32) arrayUInt32
	ReduceUInt32(func(float64, int, ArrayFloat64) uint32, uint32) uint32

	MapUInt64(func(float64) uint64) arrayUInt64
	ReduceUInt64(func(float64, int, ArrayFloat64) uint64, uint64) uint64

	MapUInt8(func(float64) uint8) arrayUInt8
	ReduceUInt8(func(float64, int, ArrayFloat64) uint8, uint8) uint8

	MapUintPtr(func(float64) uintptr) arrayUintPtr
	ReduceUintPtr(func(float64, int, ArrayFloat64) uintptr, uintptr) uintptr
 
}

// ArrayInt
type ArrayInt interface {
	First() ResultInt
	Slice() []int
	Each(func(int))
	Concat(ArrayInt) arrayInt

	MapBool(func(int) bool) arrayBool
	ReduceBool(func(int, int, ArrayInt) bool, bool) bool

	MapByte(func(int) byte) arrayByte
	ReduceByte(func(int, int, ArrayInt) byte, byte) byte

	MapComplex128(func(int) complex128) arrayComplex128
	ReduceComplex128(func(int, int, ArrayInt) complex128, complex128) complex128

	MapComplex64(func(int) complex64) arrayComplex64
	ReduceComplex64(func(int, int, ArrayInt) complex64, complex64) complex64

	MapFloat32(func(int) float32) arrayFloat32
	ReduceFloat32(func(int, int, ArrayInt) float32, float32) float32

	MapFloat64(func(int) float64) arrayFloat64
	ReduceFloat64(func(int, int, ArrayInt) float64, float64) float64

	MapInt(func(int) int) arrayInt
	ReduceInt(func(int, int, ArrayInt) int, int) int

	MapInt16(func(int) int16) arrayInt16
	ReduceInt16(func(int, int, ArrayInt) int16, int16) int16

	MapInt32(func(int) int32) arrayInt32
	ReduceInt32(func(int, int, ArrayInt) int32, int32) int32

	MapInt64(func(int) int64) arrayInt64
	ReduceInt64(func(int, int, ArrayInt) int64, int64) int64

	MapInt8(func(int) int8) arrayInt8
	ReduceInt8(func(int, int, ArrayInt) int8, int8) int8

	MapRune(func(int) rune) arrayRune
	ReduceRune(func(int, int, ArrayInt) rune, rune) rune

	MapString(func(int) string) arrayString
	ReduceString(func(int, int, ArrayInt) string, string) string

	MapUInt(func(int) uint) arrayUInt
	ReduceUInt(func(int, int, ArrayInt) uint, uint) uint

	MapUInt16(func(int) uint16) arrayUInt16
	ReduceUInt16(func(int, int, ArrayInt) uint16, uint16) uint16

	MapUInt32(func(int) uint32) arrayUInt32
	ReduceUInt32(func(int, int, ArrayInt) uint32, uint32) uint32

	MapUInt64(func(int) uint64) arrayUInt64
	ReduceUInt64(func(int, int, ArrayInt) uint64, uint64) uint64

	MapUInt8(func(int) uint8) arrayUInt8
	ReduceUInt8(func(int, int, ArrayInt) uint8, uint8) uint8

	MapUintPtr(func(int) uintptr) arrayUintPtr
	ReduceUintPtr(func(int, int, ArrayInt) uintptr, uintptr) uintptr
 
}

// ArrayInt16
type ArrayInt16 interface {
	First() ResultInt16
	Slice() []int16
	Each(func(int16))
	Concat(ArrayInt16) arrayInt16

	MapBool(func(int16) bool) arrayBool
	ReduceBool(func(int16, int, ArrayInt16) bool, bool) bool

	MapByte(func(int16) byte) arrayByte
	ReduceByte(func(int16, int, ArrayInt16) byte, byte) byte

	MapComplex128(func(int16) complex128) arrayComplex128
	ReduceComplex128(func(int16, int, ArrayInt16) complex128, complex128) complex128

	MapComplex64(func(int16) complex64) arrayComplex64
	ReduceComplex64(func(int16, int, ArrayInt16) complex64, complex64) complex64

	MapFloat32(func(int16) float32) arrayFloat32
	ReduceFloat32(func(int16, int, ArrayInt16) float32, float32) float32

	MapFloat64(func(int16) float64) arrayFloat64
	ReduceFloat64(func(int16, int, ArrayInt16) float64, float64) float64

	MapInt(func(int16) int) arrayInt
	ReduceInt(func(int16, int, ArrayInt16) int, int) int

	MapInt16(func(int16) int16) arrayInt16
	ReduceInt16(func(int16, int, ArrayInt16) int16, int16) int16

	MapInt32(func(int16) int32) arrayInt32
	ReduceInt32(func(int16, int, ArrayInt16) int32, int32) int32

	MapInt64(func(int16) int64) arrayInt64
	ReduceInt64(func(int16, int, ArrayInt16) int64, int64) int64

	MapInt8(func(int16) int8) arrayInt8
	ReduceInt8(func(int16, int, ArrayInt16) int8, int8) int8

	MapRune(func(int16) rune) arrayRune
	ReduceRune(func(int16, int, ArrayInt16) rune, rune) rune

	MapString(func(int16) string) arrayString
	ReduceString(func(int16, int, ArrayInt16) string, string) string

	MapUInt(func(int16) uint) arrayUInt
	ReduceUInt(func(int16, int, ArrayInt16) uint, uint) uint

	MapUInt16(func(int16) uint16) arrayUInt16
	ReduceUInt16(func(int16, int, ArrayInt16) uint16, uint16) uint16

	MapUInt32(func(int16) uint32) arrayUInt32
	ReduceUInt32(func(int16, int, ArrayInt16) uint32, uint32) uint32

	MapUInt64(func(int16) uint64) arrayUInt64
	ReduceUInt64(func(int16, int, ArrayInt16) uint64, uint64) uint64

	MapUInt8(func(int16) uint8) arrayUInt8
	ReduceUInt8(func(int16, int, ArrayInt16) uint8, uint8) uint8

	MapUintPtr(func(int16) uintptr) arrayUintPtr
	ReduceUintPtr(func(int16, int, ArrayInt16) uintptr, uintptr) uintptr
 
}

// ArrayInt32
type ArrayInt32 interface {
	First() ResultInt32
	Slice() []int32
	Each(func(int32))
	Concat(ArrayInt32) arrayInt32

	MapBool(func(int32) bool) arrayBool
	ReduceBool(func(int32, int, ArrayInt32) bool, bool) bool

	MapByte(func(int32) byte) arrayByte
	ReduceByte(func(int32, int, ArrayInt32) byte, byte) byte

	MapComplex128(func(int32) complex128) arrayComplex128
	ReduceComplex128(func(int32, int, ArrayInt32) complex128, complex128) complex128

	MapComplex64(func(int32) complex64) arrayComplex64
	ReduceComplex64(func(int32, int, ArrayInt32) complex64, complex64) complex64

	MapFloat32(func(int32) float32) arrayFloat32
	ReduceFloat32(func(int32, int, ArrayInt32) float32, float32) float32

	MapFloat64(func(int32) float64) arrayFloat64
	ReduceFloat64(func(int32, int, ArrayInt32) float64, float64) float64

	MapInt(func(int32) int) arrayInt
	ReduceInt(func(int32, int, ArrayInt32) int, int) int

	MapInt16(func(int32) int16) arrayInt16
	ReduceInt16(func(int32, int, ArrayInt32) int16, int16) int16

	MapInt32(func(int32) int32) arrayInt32
	ReduceInt32(func(int32, int, ArrayInt32) int32, int32) int32

	MapInt64(func(int32) int64) arrayInt64
	ReduceInt64(func(int32, int, ArrayInt32) int64, int64) int64

	MapInt8(func(int32) int8) arrayInt8
	ReduceInt8(func(int32, int, ArrayInt32) int8, int8) int8

	MapRune(func(int32) rune) arrayRune
	ReduceRune(func(int32, int, ArrayInt32) rune, rune) rune

	MapString(func(int32) string) arrayString
	ReduceString(func(int32, int, ArrayInt32) string, string) string

	MapUInt(func(int32) uint) arrayUInt
	ReduceUInt(func(int32, int, ArrayInt32) uint, uint) uint

	MapUInt16(func(int32) uint16) arrayUInt16
	ReduceUInt16(func(int32, int, ArrayInt32) uint16, uint16) uint16

	MapUInt32(func(int32) uint32) arrayUInt32
	ReduceUInt32(func(int32, int, ArrayInt32) uint32, uint32) uint32

	MapUInt64(func(int32) uint64) arrayUInt64
	ReduceUInt64(func(int32, int, ArrayInt32) uint64, uint64) uint64

	MapUInt8(func(int32) uint8) arrayUInt8
	ReduceUInt8(func(int32, int, ArrayInt32) uint8, uint8) uint8

	MapUintPtr(func(int32) uintptr) arrayUintPtr
	ReduceUintPtr(func(int32, int, ArrayInt32) uintptr, uintptr) uintptr
 
}

// ArrayInt64
type ArrayInt64 interface {
	First() ResultInt64
	Slice() []int64
	Each(func(int64))
	Concat(ArrayInt64) arrayInt64

	MapBool(func(int64) bool) arrayBool
	ReduceBool(func(int64, int, ArrayInt64) bool, bool) bool

	MapByte(func(int64) byte) arrayByte
	ReduceByte(func(int64, int, ArrayInt64) byte, byte) byte

	MapComplex128(func(int64) complex128) arrayComplex128
	ReduceComplex128(func(int64, int, ArrayInt64) complex128, complex128) complex128

	MapComplex64(func(int64) complex64) arrayComplex64
	ReduceComplex64(func(int64, int, ArrayInt64) complex64, complex64) complex64

	MapFloat32(func(int64) float32) arrayFloat32
	ReduceFloat32(func(int64, int, ArrayInt64) float32, float32) float32

	MapFloat64(func(int64) float64) arrayFloat64
	ReduceFloat64(func(int64, int, ArrayInt64) float64, float64) float64

	MapInt(func(int64) int) arrayInt
	ReduceInt(func(int64, int, ArrayInt64) int, int) int

	MapInt16(func(int64) int16) arrayInt16
	ReduceInt16(func(int64, int, ArrayInt64) int16, int16) int16

	MapInt32(func(int64) int32) arrayInt32
	ReduceInt32(func(int64, int, ArrayInt64) int32, int32) int32

	MapInt64(func(int64) int64) arrayInt64
	ReduceInt64(func(int64, int, ArrayInt64) int64, int64) int64

	MapInt8(func(int64) int8) arrayInt8
	ReduceInt8(func(int64, int, ArrayInt64) int8, int8) int8

	MapRune(func(int64) rune) arrayRune
	ReduceRune(func(int64, int, ArrayInt64) rune, rune) rune

	MapString(func(int64) string) arrayString
	ReduceString(func(int64, int, ArrayInt64) string, string) string

	MapUInt(func(int64) uint) arrayUInt
	ReduceUInt(func(int64, int, ArrayInt64) uint, uint) uint

	MapUInt16(func(int64) uint16) arrayUInt16
	ReduceUInt16(func(int64, int, ArrayInt64) uint16, uint16) uint16

	MapUInt32(func(int64) uint32) arrayUInt32
	ReduceUInt32(func(int64, int, ArrayInt64) uint32, uint32) uint32

	MapUInt64(func(int64) uint64) arrayUInt64
	ReduceUInt64(func(int64, int, ArrayInt64) uint64, uint64) uint64

	MapUInt8(func(int64) uint8) arrayUInt8
	ReduceUInt8(func(int64, int, ArrayInt64) uint8, uint8) uint8

	MapUintPtr(func(int64) uintptr) arrayUintPtr
	ReduceUintPtr(func(int64, int, ArrayInt64) uintptr, uintptr) uintptr
 
}

// ArrayInt8
type ArrayInt8 interface {
	First() ResultInt8
	Slice() []int8
	Each(func(int8))
	Concat(ArrayInt8) arrayInt8

	MapBool(func(int8) bool) arrayBool
	ReduceBool(func(int8, int, ArrayInt8) bool, bool) bool

	MapByte(func(int8) byte) arrayByte
	ReduceByte(func(int8, int, ArrayInt8) byte, byte) byte

	MapComplex128(func(int8) complex128) arrayComplex128
	ReduceComplex128(func(int8, int, ArrayInt8) complex128, complex128) complex128

	MapComplex64(func(int8) complex64) arrayComplex64
	ReduceComplex64(func(int8, int, ArrayInt8) complex64, complex64) complex64

	MapFloat32(func(int8) float32) arrayFloat32
	ReduceFloat32(func(int8, int, ArrayInt8) float32, float32) float32

	MapFloat64(func(int8) float64) arrayFloat64
	ReduceFloat64(func(int8, int, ArrayInt8) float64, float64) float64

	MapInt(func(int8) int) arrayInt
	ReduceInt(func(int8, int, ArrayInt8) int, int) int

	MapInt16(func(int8) int16) arrayInt16
	ReduceInt16(func(int8, int, ArrayInt8) int16, int16) int16

	MapInt32(func(int8) int32) arrayInt32
	ReduceInt32(func(int8, int, ArrayInt8) int32, int32) int32

	MapInt64(func(int8) int64) arrayInt64
	ReduceInt64(func(int8, int, ArrayInt8) int64, int64) int64

	MapInt8(func(int8) int8) arrayInt8
	ReduceInt8(func(int8, int, ArrayInt8) int8, int8) int8

	MapRune(func(int8) rune) arrayRune
	ReduceRune(func(int8, int, ArrayInt8) rune, rune) rune

	MapString(func(int8) string) arrayString
	ReduceString(func(int8, int, ArrayInt8) string, string) string

	MapUInt(func(int8) uint) arrayUInt
	ReduceUInt(func(int8, int, ArrayInt8) uint, uint) uint

	MapUInt16(func(int8) uint16) arrayUInt16
	ReduceUInt16(func(int8, int, ArrayInt8) uint16, uint16) uint16

	MapUInt32(func(int8) uint32) arrayUInt32
	ReduceUInt32(func(int8, int, ArrayInt8) uint32, uint32) uint32

	MapUInt64(func(int8) uint64) arrayUInt64
	ReduceUInt64(func(int8, int, ArrayInt8) uint64, uint64) uint64

	MapUInt8(func(int8) uint8) arrayUInt8
	ReduceUInt8(func(int8, int, ArrayInt8) uint8, uint8) uint8

	MapUintPtr(func(int8) uintptr) arrayUintPtr
	ReduceUintPtr(func(int8, int, ArrayInt8) uintptr, uintptr) uintptr
 
}

// ArrayRune
type ArrayRune interface {
	First() ResultRune
	Slice() []rune
	Each(func(rune))
	Concat(ArrayRune) arrayRune

	MapBool(func(rune) bool) arrayBool
	ReduceBool(func(rune, int, ArrayRune) bool, bool) bool

	MapByte(func(rune) byte) arrayByte
	ReduceByte(func(rune, int, ArrayRune) byte, byte) byte

	MapComplex128(func(rune) complex128) arrayComplex128
	ReduceComplex128(func(rune, int, ArrayRune) complex128, complex128) complex128

	MapComplex64(func(rune) complex64) arrayComplex64
	ReduceComplex64(func(rune, int, ArrayRune) complex64, complex64) complex64

	MapFloat32(func(rune) float32) arrayFloat32
	ReduceFloat32(func(rune, int, ArrayRune) float32, float32) float32

	MapFloat64(func(rune) float64) arrayFloat64
	ReduceFloat64(func(rune, int, ArrayRune) float64, float64) float64

	MapInt(func(rune) int) arrayInt
	ReduceInt(func(rune, int, ArrayRune) int, int) int

	MapInt16(func(rune) int16) arrayInt16
	ReduceInt16(func(rune, int, ArrayRune) int16, int16) int16

	MapInt32(func(rune) int32) arrayInt32
	ReduceInt32(func(rune, int, ArrayRune) int32, int32) int32

	MapInt64(func(rune) int64) arrayInt64
	ReduceInt64(func(rune, int, ArrayRune) int64, int64) int64

	MapInt8(func(rune) int8) arrayInt8
	ReduceInt8(func(rune, int, ArrayRune) int8, int8) int8

	MapRune(func(rune) rune) arrayRune
	ReduceRune(func(rune, int, ArrayRune) rune, rune) rune

	MapString(func(rune) string) arrayString
	ReduceString(func(rune, int, ArrayRune) string, string) string

	MapUInt(func(rune) uint) arrayUInt
	ReduceUInt(func(rune, int, ArrayRune) uint, uint) uint

	MapUInt16(func(rune) uint16) arrayUInt16
	ReduceUInt16(func(rune, int, ArrayRune) uint16, uint16) uint16

	MapUInt32(func(rune) uint32) arrayUInt32
	ReduceUInt32(func(rune, int, ArrayRune) uint32, uint32) uint32

	MapUInt64(func(rune) uint64) arrayUInt64
	ReduceUInt64(func(rune, int, ArrayRune) uint64, uint64) uint64

	MapUInt8(func(rune) uint8) arrayUInt8
	ReduceUInt8(func(rune, int, ArrayRune) uint8, uint8) uint8

	MapUintPtr(func(rune) uintptr) arrayUintPtr
	ReduceUintPtr(func(rune, int, ArrayRune) uintptr, uintptr) uintptr
 
}

// ArrayString
type ArrayString interface {
	First() ResultString
	Slice() []string
	Each(func(string))
	Concat(ArrayString) arrayString

	MapBool(func(string) bool) arrayBool
	ReduceBool(func(string, int, ArrayString) bool, bool) bool

	MapByte(func(string) byte) arrayByte
	ReduceByte(func(string, int, ArrayString) byte, byte) byte

	MapComplex128(func(string) complex128) arrayComplex128
	ReduceComplex128(func(string, int, ArrayString) complex128, complex128) complex128

	MapComplex64(func(string) complex64) arrayComplex64
	ReduceComplex64(func(string, int, ArrayString) complex64, complex64) complex64

	MapFloat32(func(string) float32) arrayFloat32
	ReduceFloat32(func(string, int, ArrayString) float32, float32) float32

	MapFloat64(func(string) float64) arrayFloat64
	ReduceFloat64(func(string, int, ArrayString) float64, float64) float64

	MapInt(func(string) int) arrayInt
	ReduceInt(func(string, int, ArrayString) int, int) int

	MapInt16(func(string) int16) arrayInt16
	ReduceInt16(func(string, int, ArrayString) int16, int16) int16

	MapInt32(func(string) int32) arrayInt32
	ReduceInt32(func(string, int, ArrayString) int32, int32) int32

	MapInt64(func(string) int64) arrayInt64
	ReduceInt64(func(string, int, ArrayString) int64, int64) int64

	MapInt8(func(string) int8) arrayInt8
	ReduceInt8(func(string, int, ArrayString) int8, int8) int8

	MapRune(func(string) rune) arrayRune
	ReduceRune(func(string, int, ArrayString) rune, rune) rune

	MapString(func(string) string) arrayString
	ReduceString(func(string, int, ArrayString) string, string) string

	MapUInt(func(string) uint) arrayUInt
	ReduceUInt(func(string, int, ArrayString) uint, uint) uint

	MapUInt16(func(string) uint16) arrayUInt16
	ReduceUInt16(func(string, int, ArrayString) uint16, uint16) uint16

	MapUInt32(func(string) uint32) arrayUInt32
	ReduceUInt32(func(string, int, ArrayString) uint32, uint32) uint32

	MapUInt64(func(string) uint64) arrayUInt64
	ReduceUInt64(func(string, int, ArrayString) uint64, uint64) uint64

	MapUInt8(func(string) uint8) arrayUInt8
	ReduceUInt8(func(string, int, ArrayString) uint8, uint8) uint8

	MapUintPtr(func(string) uintptr) arrayUintPtr
	ReduceUintPtr(func(string, int, ArrayString) uintptr, uintptr) uintptr
 
}

// ArrayUInt
type ArrayUInt interface {
	First() ResultUInt
	Slice() []uint
	Each(func(uint))
	Concat(ArrayUInt) arrayUInt

	MapBool(func(uint) bool) arrayBool
	ReduceBool(func(uint, int, ArrayUInt) bool, bool) bool

	MapByte(func(uint) byte) arrayByte
	ReduceByte(func(uint, int, ArrayUInt) byte, byte) byte

	MapComplex128(func(uint) complex128) arrayComplex128
	ReduceComplex128(func(uint, int, ArrayUInt) complex128, complex128) complex128

	MapComplex64(func(uint) complex64) arrayComplex64
	ReduceComplex64(func(uint, int, ArrayUInt) complex64, complex64) complex64

	MapFloat32(func(uint) float32) arrayFloat32
	ReduceFloat32(func(uint, int, ArrayUInt) float32, float32) float32

	MapFloat64(func(uint) float64) arrayFloat64
	ReduceFloat64(func(uint, int, ArrayUInt) float64, float64) float64

	MapInt(func(uint) int) arrayInt
	ReduceInt(func(uint, int, ArrayUInt) int, int) int

	MapInt16(func(uint) int16) arrayInt16
	ReduceInt16(func(uint, int, ArrayUInt) int16, int16) int16

	MapInt32(func(uint) int32) arrayInt32
	ReduceInt32(func(uint, int, ArrayUInt) int32, int32) int32

	MapInt64(func(uint) int64) arrayInt64
	ReduceInt64(func(uint, int, ArrayUInt) int64, int64) int64

	MapInt8(func(uint) int8) arrayInt8
	ReduceInt8(func(uint, int, ArrayUInt) int8, int8) int8

	MapRune(func(uint) rune) arrayRune
	ReduceRune(func(uint, int, ArrayUInt) rune, rune) rune

	MapString(func(uint) string) arrayString
	ReduceString(func(uint, int, ArrayUInt) string, string) string

	MapUInt(func(uint) uint) arrayUInt
	ReduceUInt(func(uint, int, ArrayUInt) uint, uint) uint

	MapUInt16(func(uint) uint16) arrayUInt16
	ReduceUInt16(func(uint, int, ArrayUInt) uint16, uint16) uint16

	MapUInt32(func(uint) uint32) arrayUInt32
	ReduceUInt32(func(uint, int, ArrayUInt) uint32, uint32) uint32

	MapUInt64(func(uint) uint64) arrayUInt64
	ReduceUInt64(func(uint, int, ArrayUInt) uint64, uint64) uint64

	MapUInt8(func(uint) uint8) arrayUInt8
	ReduceUInt8(func(uint, int, ArrayUInt) uint8, uint8) uint8

	MapUintPtr(func(uint) uintptr) arrayUintPtr
	ReduceUintPtr(func(uint, int, ArrayUInt) uintptr, uintptr) uintptr
 
}

// ArrayUInt16
type ArrayUInt16 interface {
	First() ResultUInt16
	Slice() []uint16
	Each(func(uint16))
	Concat(ArrayUInt16) arrayUInt16

	MapBool(func(uint16) bool) arrayBool
	ReduceBool(func(uint16, int, ArrayUInt16) bool, bool) bool

	MapByte(func(uint16) byte) arrayByte
	ReduceByte(func(uint16, int, ArrayUInt16) byte, byte) byte

	MapComplex128(func(uint16) complex128) arrayComplex128
	ReduceComplex128(func(uint16, int, ArrayUInt16) complex128, complex128) complex128

	MapComplex64(func(uint16) complex64) arrayComplex64
	ReduceComplex64(func(uint16, int, ArrayUInt16) complex64, complex64) complex64

	MapFloat32(func(uint16) float32) arrayFloat32
	ReduceFloat32(func(uint16, int, ArrayUInt16) float32, float32) float32

	MapFloat64(func(uint16) float64) arrayFloat64
	ReduceFloat64(func(uint16, int, ArrayUInt16) float64, float64) float64

	MapInt(func(uint16) int) arrayInt
	ReduceInt(func(uint16, int, ArrayUInt16) int, int) int

	MapInt16(func(uint16) int16) arrayInt16
	ReduceInt16(func(uint16, int, ArrayUInt16) int16, int16) int16

	MapInt32(func(uint16) int32) arrayInt32
	ReduceInt32(func(uint16, int, ArrayUInt16) int32, int32) int32

	MapInt64(func(uint16) int64) arrayInt64
	ReduceInt64(func(uint16, int, ArrayUInt16) int64, int64) int64

	MapInt8(func(uint16) int8) arrayInt8
	ReduceInt8(func(uint16, int, ArrayUInt16) int8, int8) int8

	MapRune(func(uint16) rune) arrayRune
	ReduceRune(func(uint16, int, ArrayUInt16) rune, rune) rune

	MapString(func(uint16) string) arrayString
	ReduceString(func(uint16, int, ArrayUInt16) string, string) string

	MapUInt(func(uint16) uint) arrayUInt
	ReduceUInt(func(uint16, int, ArrayUInt16) uint, uint) uint

	MapUInt16(func(uint16) uint16) arrayUInt16
	ReduceUInt16(func(uint16, int, ArrayUInt16) uint16, uint16) uint16

	MapUInt32(func(uint16) uint32) arrayUInt32
	ReduceUInt32(func(uint16, int, ArrayUInt16) uint32, uint32) uint32

	MapUInt64(func(uint16) uint64) arrayUInt64
	ReduceUInt64(func(uint16, int, ArrayUInt16) uint64, uint64) uint64

	MapUInt8(func(uint16) uint8) arrayUInt8
	ReduceUInt8(func(uint16, int, ArrayUInt16) uint8, uint8) uint8

	MapUintPtr(func(uint16) uintptr) arrayUintPtr
	ReduceUintPtr(func(uint16, int, ArrayUInt16) uintptr, uintptr) uintptr
 
}

// ArrayUInt32
type ArrayUInt32 interface {
	First() ResultUInt32
	Slice() []uint32
	Each(func(uint32))
	Concat(ArrayUInt32) arrayUInt32

	MapBool(func(uint32) bool) arrayBool
	ReduceBool(func(uint32, int, ArrayUInt32) bool, bool) bool

	MapByte(func(uint32) byte) arrayByte
	ReduceByte(func(uint32, int, ArrayUInt32) byte, byte) byte

	MapComplex128(func(uint32) complex128) arrayComplex128
	ReduceComplex128(func(uint32, int, ArrayUInt32) complex128, complex128) complex128

	MapComplex64(func(uint32) complex64) arrayComplex64
	ReduceComplex64(func(uint32, int, ArrayUInt32) complex64, complex64) complex64

	MapFloat32(func(uint32) float32) arrayFloat32
	ReduceFloat32(func(uint32, int, ArrayUInt32) float32, float32) float32

	MapFloat64(func(uint32) float64) arrayFloat64
	ReduceFloat64(func(uint32, int, ArrayUInt32) float64, float64) float64

	MapInt(func(uint32) int) arrayInt
	ReduceInt(func(uint32, int, ArrayUInt32) int, int) int

	MapInt16(func(uint32) int16) arrayInt16
	ReduceInt16(func(uint32, int, ArrayUInt32) int16, int16) int16

	MapInt32(func(uint32) int32) arrayInt32
	ReduceInt32(func(uint32, int, ArrayUInt32) int32, int32) int32

	MapInt64(func(uint32) int64) arrayInt64
	ReduceInt64(func(uint32, int, ArrayUInt32) int64, int64) int64

	MapInt8(func(uint32) int8) arrayInt8
	ReduceInt8(func(uint32, int, ArrayUInt32) int8, int8) int8

	MapRune(func(uint32) rune) arrayRune
	ReduceRune(func(uint32, int, ArrayUInt32) rune, rune) rune

	MapString(func(uint32) string) arrayString
	ReduceString(func(uint32, int, ArrayUInt32) string, string) string

	MapUInt(func(uint32) uint) arrayUInt
	ReduceUInt(func(uint32, int, ArrayUInt32) uint, uint) uint

	MapUInt16(func(uint32) uint16) arrayUInt16
	ReduceUInt16(func(uint32, int, ArrayUInt32) uint16, uint16) uint16

	MapUInt32(func(uint32) uint32) arrayUInt32
	ReduceUInt32(func(uint32, int, ArrayUInt32) uint32, uint32) uint32

	MapUInt64(func(uint32) uint64) arrayUInt64
	ReduceUInt64(func(uint32, int, ArrayUInt32) uint64, uint64) uint64

	MapUInt8(func(uint32) uint8) arrayUInt8
	ReduceUInt8(func(uint32, int, ArrayUInt32) uint8, uint8) uint8

	MapUintPtr(func(uint32) uintptr) arrayUintPtr
	ReduceUintPtr(func(uint32, int, ArrayUInt32) uintptr, uintptr) uintptr
 
}

// ArrayUInt64
type ArrayUInt64 interface {
	First() ResultUInt64
	Slice() []uint64
	Each(func(uint64))
	Concat(ArrayUInt64) arrayUInt64

	MapBool(func(uint64) bool) arrayBool
	ReduceBool(func(uint64, int, ArrayUInt64) bool, bool) bool

	MapByte(func(uint64) byte) arrayByte
	ReduceByte(func(uint64, int, ArrayUInt64) byte, byte) byte

	MapComplex128(func(uint64) complex128) arrayComplex128
	ReduceComplex128(func(uint64, int, ArrayUInt64) complex128, complex128) complex128

	MapComplex64(func(uint64) complex64) arrayComplex64
	ReduceComplex64(func(uint64, int, ArrayUInt64) complex64, complex64) complex64

	MapFloat32(func(uint64) float32) arrayFloat32
	ReduceFloat32(func(uint64, int, ArrayUInt64) float32, float32) float32

	MapFloat64(func(uint64) float64) arrayFloat64
	ReduceFloat64(func(uint64, int, ArrayUInt64) float64, float64) float64

	MapInt(func(uint64) int) arrayInt
	ReduceInt(func(uint64, int, ArrayUInt64) int, int) int

	MapInt16(func(uint64) int16) arrayInt16
	ReduceInt16(func(uint64, int, ArrayUInt64) int16, int16) int16

	MapInt32(func(uint64) int32) arrayInt32
	ReduceInt32(func(uint64, int, ArrayUInt64) int32, int32) int32

	MapInt64(func(uint64) int64) arrayInt64
	ReduceInt64(func(uint64, int, ArrayUInt64) int64, int64) int64

	MapInt8(func(uint64) int8) arrayInt8
	ReduceInt8(func(uint64, int, ArrayUInt64) int8, int8) int8

	MapRune(func(uint64) rune) arrayRune
	ReduceRune(func(uint64, int, ArrayUInt64) rune, rune) rune

	MapString(func(uint64) string) arrayString
	ReduceString(func(uint64, int, ArrayUInt64) string, string) string

	MapUInt(func(uint64) uint) arrayUInt
	ReduceUInt(func(uint64, int, ArrayUInt64) uint, uint) uint

	MapUInt16(func(uint64) uint16) arrayUInt16
	ReduceUInt16(func(uint64, int, ArrayUInt64) uint16, uint16) uint16

	MapUInt32(func(uint64) uint32) arrayUInt32
	ReduceUInt32(func(uint64, int, ArrayUInt64) uint32, uint32) uint32

	MapUInt64(func(uint64) uint64) arrayUInt64
	ReduceUInt64(func(uint64, int, ArrayUInt64) uint64, uint64) uint64

	MapUInt8(func(uint64) uint8) arrayUInt8
	ReduceUInt8(func(uint64, int, ArrayUInt64) uint8, uint8) uint8

	MapUintPtr(func(uint64) uintptr) arrayUintPtr
	ReduceUintPtr(func(uint64, int, ArrayUInt64) uintptr, uintptr) uintptr
 
}

// ArrayUInt8
type ArrayUInt8 interface {
	First() ResultUInt8
	Slice() []uint8
	Each(func(uint8))
	Concat(ArrayUInt8) arrayUInt8

	MapBool(func(uint8) bool) arrayBool
	ReduceBool(func(uint8, int, ArrayUInt8) bool, bool) bool

	MapByte(func(uint8) byte) arrayByte
	ReduceByte(func(uint8, int, ArrayUInt8) byte, byte) byte

	MapComplex128(func(uint8) complex128) arrayComplex128
	ReduceComplex128(func(uint8, int, ArrayUInt8) complex128, complex128) complex128

	MapComplex64(func(uint8) complex64) arrayComplex64
	ReduceComplex64(func(uint8, int, ArrayUInt8) complex64, complex64) complex64

	MapFloat32(func(uint8) float32) arrayFloat32
	ReduceFloat32(func(uint8, int, ArrayUInt8) float32, float32) float32

	MapFloat64(func(uint8) float64) arrayFloat64
	ReduceFloat64(func(uint8, int, ArrayUInt8) float64, float64) float64

	MapInt(func(uint8) int) arrayInt
	ReduceInt(func(uint8, int, ArrayUInt8) int, int) int

	MapInt16(func(uint8) int16) arrayInt16
	ReduceInt16(func(uint8, int, ArrayUInt8) int16, int16) int16

	MapInt32(func(uint8) int32) arrayInt32
	ReduceInt32(func(uint8, int, ArrayUInt8) int32, int32) int32

	MapInt64(func(uint8) int64) arrayInt64
	ReduceInt64(func(uint8, int, ArrayUInt8) int64, int64) int64

	MapInt8(func(uint8) int8) arrayInt8
	ReduceInt8(func(uint8, int, ArrayUInt8) int8, int8) int8

	MapRune(func(uint8) rune) arrayRune
	ReduceRune(func(uint8, int, ArrayUInt8) rune, rune) rune

	MapString(func(uint8) string) arrayString
	ReduceString(func(uint8, int, ArrayUInt8) string, string) string

	MapUInt(func(uint8) uint) arrayUInt
	ReduceUInt(func(uint8, int, ArrayUInt8) uint, uint) uint

	MapUInt16(func(uint8) uint16) arrayUInt16
	ReduceUInt16(func(uint8, int, ArrayUInt8) uint16, uint16) uint16

	MapUInt32(func(uint8) uint32) arrayUInt32
	ReduceUInt32(func(uint8, int, ArrayUInt8) uint32, uint32) uint32

	MapUInt64(func(uint8) uint64) arrayUInt64
	ReduceUInt64(func(uint8, int, ArrayUInt8) uint64, uint64) uint64

	MapUInt8(func(uint8) uint8) arrayUInt8
	ReduceUInt8(func(uint8, int, ArrayUInt8) uint8, uint8) uint8

	MapUintPtr(func(uint8) uintptr) arrayUintPtr
	ReduceUintPtr(func(uint8, int, ArrayUInt8) uintptr, uintptr) uintptr
 
}

// ArrayUintPtr
type ArrayUintPtr interface {
	First() ResultUintPtr
	Slice() []uintptr
	Each(func(uintptr))
	Concat(ArrayUintPtr) arrayUintPtr

	MapBool(func(uintptr) bool) arrayBool
	ReduceBool(func(uintptr, int, ArrayUintPtr) bool, bool) bool

	MapByte(func(uintptr) byte) arrayByte
	ReduceByte(func(uintptr, int, ArrayUintPtr) byte, byte) byte

	MapComplex128(func(uintptr) complex128) arrayComplex128
	ReduceComplex128(func(uintptr, int, ArrayUintPtr) complex128, complex128) complex128

	MapComplex64(func(uintptr) complex64) arrayComplex64
	ReduceComplex64(func(uintptr, int, ArrayUintPtr) complex64, complex64) complex64

	MapFloat32(func(uintptr) float32) arrayFloat32
	ReduceFloat32(func(uintptr, int, ArrayUintPtr) float32, float32) float32

	MapFloat64(func(uintptr) float64) arrayFloat64
	ReduceFloat64(func(uintptr, int, ArrayUintPtr) float64, float64) float64

	MapInt(func(uintptr) int) arrayInt
	ReduceInt(func(uintptr, int, ArrayUintPtr) int, int) int

	MapInt16(func(uintptr) int16) arrayInt16
	ReduceInt16(func(uintptr, int, ArrayUintPtr) int16, int16) int16

	MapInt32(func(uintptr) int32) arrayInt32
	ReduceInt32(func(uintptr, int, ArrayUintPtr) int32, int32) int32

	MapInt64(func(uintptr) int64) arrayInt64
	ReduceInt64(func(uintptr, int, ArrayUintPtr) int64, int64) int64

	MapInt8(func(uintptr) int8) arrayInt8
	ReduceInt8(func(uintptr, int, ArrayUintPtr) int8, int8) int8

	MapRune(func(uintptr) rune) arrayRune
	ReduceRune(func(uintptr, int, ArrayUintPtr) rune, rune) rune

	MapString(func(uintptr) string) arrayString
	ReduceString(func(uintptr, int, ArrayUintPtr) string, string) string

	MapUInt(func(uintptr) uint) arrayUInt
	ReduceUInt(func(uintptr, int, ArrayUintPtr) uint, uint) uint

	MapUInt16(func(uintptr) uint16) arrayUInt16
	ReduceUInt16(func(uintptr, int, ArrayUintPtr) uint16, uint16) uint16

	MapUInt32(func(uintptr) uint32) arrayUInt32
	ReduceUInt32(func(uintptr, int, ArrayUintPtr) uint32, uint32) uint32

	MapUInt64(func(uintptr) uint64) arrayUInt64
	ReduceUInt64(func(uintptr, int, ArrayUintPtr) uint64, uint64) uint64

	MapUInt8(func(uintptr) uint8) arrayUInt8
	ReduceUInt8(func(uintptr, int, ArrayUintPtr) uint8, uint8) uint8

	MapUintPtr(func(uintptr) uintptr) arrayUintPtr
	ReduceUintPtr(func(uintptr, int, ArrayUintPtr) uintptr, uintptr) uintptr
 
}






// arrayBool is a type alias for []bool
type arrayBool []bool

// ArrayBool makes an arry off of its arguments of type bool 
func ArrayBoolFrom(a ...bool) arrayBool {
	return arrayBool(a)
}

// First with arrayBool receiver
// returns first element in a ResultBool container
func (a arrayBool) First() ResultBool {
	if len(a) > 0 {
		return OkBool(a[0])
	}
	return ErrBool("Out Of Bound Array Access")
}

// Slice with arrayBool receiver
// returns itself as []bool
func (a arrayBool) Slice() []bool {
	return []bool(a)
}

// Each with arrayBool receiver
// applies its function argument on each item of the array
func (a arrayBool) Each(f func(bool)) {
	for _, e := range a { f(e) }
}

// Concat with arrayBool receiver
// returns the concatenation of itself and  its argument array 
func (a arrayBool) Concat(xs ArrayBool) arrayBool {
	return arrayBool(append(a.Slice(), xs.Slice()...))
}


// Map with arrayBool receiver
// returns an arrayBool resulting from apllying its function argument
// to every items of the receiver
func (a arrayBool) MapBool(f func(bool) bool) arrayBool {
	var r = make(arrayBool, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayBool(r)
}

// Reduce with arrayBool receiver
func (a arrayBool) ReduceBool(f func(bool, int, ArrayBool) bool, initial bool) bool {
	var r bool = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayBool receiver
// returns an arrayByte resulting from apllying its function argument
// to every items of the receiver
func (a arrayBool) MapByte(f func(bool) byte) arrayByte {
	var r = make(arrayByte, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayByte(r)
}

// Reduce with arrayBool receiver
func (a arrayBool) ReduceByte(f func(bool, int, ArrayBool) byte, initial byte) byte {
	var r byte = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayBool receiver
// returns an arrayComplex128 resulting from apllying its function argument
// to every items of the receiver
func (a arrayBool) MapComplex128(f func(bool) complex128) arrayComplex128 {
	var r = make(arrayComplex128, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex128(r)
}

// Reduce with arrayBool receiver
func (a arrayBool) ReduceComplex128(f func(bool, int, ArrayBool) complex128, initial complex128) complex128 {
	var r complex128 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayBool receiver
// returns an arrayComplex64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayBool) MapComplex64(f func(bool) complex64) arrayComplex64 {
	var r = make(arrayComplex64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex64(r)
}

// Reduce with arrayBool receiver
func (a arrayBool) ReduceComplex64(f func(bool, int, ArrayBool) complex64, initial complex64) complex64 {
	var r complex64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayBool receiver
// returns an arrayFloat32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayBool) MapFloat32(f func(bool) float32) arrayFloat32 {
	var r = make(arrayFloat32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat32(r)
}

// Reduce with arrayBool receiver
func (a arrayBool) ReduceFloat32(f func(bool, int, ArrayBool) float32, initial float32) float32 {
	var r float32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayBool receiver
// returns an arrayFloat64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayBool) MapFloat64(f func(bool) float64) arrayFloat64 {
	var r = make(arrayFloat64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat64(r)
}

// Reduce with arrayBool receiver
func (a arrayBool) ReduceFloat64(f func(bool, int, ArrayBool) float64, initial float64) float64 {
	var r float64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayBool receiver
// returns an arrayInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayBool) MapInt(f func(bool) int) arrayInt {
	var r = make(arrayInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt(r)
}

// Reduce with arrayBool receiver
func (a arrayBool) ReduceInt(f func(bool, int, ArrayBool) int, initial int) int {
	var r int = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayBool receiver
// returns an arrayInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayBool) MapInt16(f func(bool) int16) arrayInt16 {
	var r = make(arrayInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt16(r)
}

// Reduce with arrayBool receiver
func (a arrayBool) ReduceInt16(f func(bool, int, ArrayBool) int16, initial int16) int16 {
	var r int16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayBool receiver
// returns an arrayInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayBool) MapInt32(f func(bool) int32) arrayInt32 {
	var r = make(arrayInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt32(r)
}

// Reduce with arrayBool receiver
func (a arrayBool) ReduceInt32(f func(bool, int, ArrayBool) int32, initial int32) int32 {
	var r int32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayBool receiver
// returns an arrayInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayBool) MapInt64(f func(bool) int64) arrayInt64 {
	var r = make(arrayInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt64(r)
}

// Reduce with arrayBool receiver
func (a arrayBool) ReduceInt64(f func(bool, int, ArrayBool) int64, initial int64) int64 {
	var r int64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayBool receiver
// returns an arrayInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayBool) MapInt8(f func(bool) int8) arrayInt8 {
	var r = make(arrayInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt8(r)
}

// Reduce with arrayBool receiver
func (a arrayBool) ReduceInt8(f func(bool, int, ArrayBool) int8, initial int8) int8 {
	var r int8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayBool receiver
// returns an arrayRune resulting from apllying its function argument
// to every items of the receiver
func (a arrayBool) MapRune(f func(bool) rune) arrayRune {
	var r = make(arrayRune, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayRune(r)
}

// Reduce with arrayBool receiver
func (a arrayBool) ReduceRune(f func(bool, int, ArrayBool) rune, initial rune) rune {
	var r rune = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayBool receiver
// returns an arrayString resulting from apllying its function argument
// to every items of the receiver
func (a arrayBool) MapString(f func(bool) string) arrayString {
	var r = make(arrayString, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayString(r)
}

// Reduce with arrayBool receiver
func (a arrayBool) ReduceString(f func(bool, int, ArrayBool) string, initial string) string {
	var r string = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayBool receiver
// returns an arrayUInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayBool) MapUInt(f func(bool) uint) arrayUInt {
	var r = make(arrayUInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt(r)
}

// Reduce with arrayBool receiver
func (a arrayBool) ReduceUInt(f func(bool, int, ArrayBool) uint, initial uint) uint {
	var r uint = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayBool receiver
// returns an arrayUInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayBool) MapUInt16(f func(bool) uint16) arrayUInt16 {
	var r = make(arrayUInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt16(r)
}

// Reduce with arrayBool receiver
func (a arrayBool) ReduceUInt16(f func(bool, int, ArrayBool) uint16, initial uint16) uint16 {
	var r uint16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayBool receiver
// returns an arrayUInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayBool) MapUInt32(f func(bool) uint32) arrayUInt32 {
	var r = make(arrayUInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt32(r)
}

// Reduce with arrayBool receiver
func (a arrayBool) ReduceUInt32(f func(bool, int, ArrayBool) uint32, initial uint32) uint32 {
	var r uint32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayBool receiver
// returns an arrayUInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayBool) MapUInt64(f func(bool) uint64) arrayUInt64 {
	var r = make(arrayUInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt64(r)
}

// Reduce with arrayBool receiver
func (a arrayBool) ReduceUInt64(f func(bool, int, ArrayBool) uint64, initial uint64) uint64 {
	var r uint64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayBool receiver
// returns an arrayUInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayBool) MapUInt8(f func(bool) uint8) arrayUInt8 {
	var r = make(arrayUInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt8(r)
}

// Reduce with arrayBool receiver
func (a arrayBool) ReduceUInt8(f func(bool, int, ArrayBool) uint8, initial uint8) uint8 {
	var r uint8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayBool receiver
// returns an arrayUintPtr resulting from apllying its function argument
// to every items of the receiver
func (a arrayBool) MapUintPtr(f func(bool) uintptr) arrayUintPtr {
	var r = make(arrayUintPtr, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUintPtr(r)
}

// Reduce with arrayBool receiver
func (a arrayBool) ReduceUintPtr(f func(bool, int, ArrayBool) uintptr, initial uintptr) uintptr {
	var r uintptr = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}

 // end of Bool



// arrayByte is a type alias for []byte
type arrayByte []byte

// ArrayByte makes an arry off of its arguments of type byte 
func ArrayByteFrom(a ...byte) arrayByte {
	return arrayByte(a)
}

// First with arrayByte receiver
// returns first element in a ResultByte container
func (a arrayByte) First() ResultByte {
	if len(a) > 0 {
		return OkByte(a[0])
	}
	return ErrByte("Out Of Bound Array Access")
}

// Slice with arrayByte receiver
// returns itself as []byte
func (a arrayByte) Slice() []byte {
	return []byte(a)
}

// Each with arrayByte receiver
// applies its function argument on each item of the array
func (a arrayByte) Each(f func(byte)) {
	for _, e := range a { f(e) }
}

// Concat with arrayByte receiver
// returns the concatenation of itself and  its argument array 
func (a arrayByte) Concat(xs ArrayByte) arrayByte {
	return arrayByte(append(a.Slice(), xs.Slice()...))
}


// Map with arrayByte receiver
// returns an arrayBool resulting from apllying its function argument
// to every items of the receiver
func (a arrayByte) MapBool(f func(byte) bool) arrayBool {
	var r = make(arrayBool, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayBool(r)
}

// Reduce with arrayByte receiver
func (a arrayByte) ReduceBool(f func(byte, int, ArrayByte) bool, initial bool) bool {
	var r bool = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayByte receiver
// returns an arrayByte resulting from apllying its function argument
// to every items of the receiver
func (a arrayByte) MapByte(f func(byte) byte) arrayByte {
	var r = make(arrayByte, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayByte(r)
}

// Reduce with arrayByte receiver
func (a arrayByte) ReduceByte(f func(byte, int, ArrayByte) byte, initial byte) byte {
	var r byte = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayByte receiver
// returns an arrayComplex128 resulting from apllying its function argument
// to every items of the receiver
func (a arrayByte) MapComplex128(f func(byte) complex128) arrayComplex128 {
	var r = make(arrayComplex128, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex128(r)
}

// Reduce with arrayByte receiver
func (a arrayByte) ReduceComplex128(f func(byte, int, ArrayByte) complex128, initial complex128) complex128 {
	var r complex128 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayByte receiver
// returns an arrayComplex64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayByte) MapComplex64(f func(byte) complex64) arrayComplex64 {
	var r = make(arrayComplex64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex64(r)
}

// Reduce with arrayByte receiver
func (a arrayByte) ReduceComplex64(f func(byte, int, ArrayByte) complex64, initial complex64) complex64 {
	var r complex64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayByte receiver
// returns an arrayFloat32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayByte) MapFloat32(f func(byte) float32) arrayFloat32 {
	var r = make(arrayFloat32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat32(r)
}

// Reduce with arrayByte receiver
func (a arrayByte) ReduceFloat32(f func(byte, int, ArrayByte) float32, initial float32) float32 {
	var r float32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayByte receiver
// returns an arrayFloat64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayByte) MapFloat64(f func(byte) float64) arrayFloat64 {
	var r = make(arrayFloat64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat64(r)
}

// Reduce with arrayByte receiver
func (a arrayByte) ReduceFloat64(f func(byte, int, ArrayByte) float64, initial float64) float64 {
	var r float64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayByte receiver
// returns an arrayInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayByte) MapInt(f func(byte) int) arrayInt {
	var r = make(arrayInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt(r)
}

// Reduce with arrayByte receiver
func (a arrayByte) ReduceInt(f func(byte, int, ArrayByte) int, initial int) int {
	var r int = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayByte receiver
// returns an arrayInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayByte) MapInt16(f func(byte) int16) arrayInt16 {
	var r = make(arrayInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt16(r)
}

// Reduce with arrayByte receiver
func (a arrayByte) ReduceInt16(f func(byte, int, ArrayByte) int16, initial int16) int16 {
	var r int16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayByte receiver
// returns an arrayInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayByte) MapInt32(f func(byte) int32) arrayInt32 {
	var r = make(arrayInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt32(r)
}

// Reduce with arrayByte receiver
func (a arrayByte) ReduceInt32(f func(byte, int, ArrayByte) int32, initial int32) int32 {
	var r int32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayByte receiver
// returns an arrayInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayByte) MapInt64(f func(byte) int64) arrayInt64 {
	var r = make(arrayInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt64(r)
}

// Reduce with arrayByte receiver
func (a arrayByte) ReduceInt64(f func(byte, int, ArrayByte) int64, initial int64) int64 {
	var r int64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayByte receiver
// returns an arrayInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayByte) MapInt8(f func(byte) int8) arrayInt8 {
	var r = make(arrayInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt8(r)
}

// Reduce with arrayByte receiver
func (a arrayByte) ReduceInt8(f func(byte, int, ArrayByte) int8, initial int8) int8 {
	var r int8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayByte receiver
// returns an arrayRune resulting from apllying its function argument
// to every items of the receiver
func (a arrayByte) MapRune(f func(byte) rune) arrayRune {
	var r = make(arrayRune, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayRune(r)
}

// Reduce with arrayByte receiver
func (a arrayByte) ReduceRune(f func(byte, int, ArrayByte) rune, initial rune) rune {
	var r rune = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayByte receiver
// returns an arrayString resulting from apllying its function argument
// to every items of the receiver
func (a arrayByte) MapString(f func(byte) string) arrayString {
	var r = make(arrayString, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayString(r)
}

// Reduce with arrayByte receiver
func (a arrayByte) ReduceString(f func(byte, int, ArrayByte) string, initial string) string {
	var r string = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayByte receiver
// returns an arrayUInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayByte) MapUInt(f func(byte) uint) arrayUInt {
	var r = make(arrayUInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt(r)
}

// Reduce with arrayByte receiver
func (a arrayByte) ReduceUInt(f func(byte, int, ArrayByte) uint, initial uint) uint {
	var r uint = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayByte receiver
// returns an arrayUInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayByte) MapUInt16(f func(byte) uint16) arrayUInt16 {
	var r = make(arrayUInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt16(r)
}

// Reduce with arrayByte receiver
func (a arrayByte) ReduceUInt16(f func(byte, int, ArrayByte) uint16, initial uint16) uint16 {
	var r uint16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayByte receiver
// returns an arrayUInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayByte) MapUInt32(f func(byte) uint32) arrayUInt32 {
	var r = make(arrayUInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt32(r)
}

// Reduce with arrayByte receiver
func (a arrayByte) ReduceUInt32(f func(byte, int, ArrayByte) uint32, initial uint32) uint32 {
	var r uint32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayByte receiver
// returns an arrayUInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayByte) MapUInt64(f func(byte) uint64) arrayUInt64 {
	var r = make(arrayUInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt64(r)
}

// Reduce with arrayByte receiver
func (a arrayByte) ReduceUInt64(f func(byte, int, ArrayByte) uint64, initial uint64) uint64 {
	var r uint64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayByte receiver
// returns an arrayUInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayByte) MapUInt8(f func(byte) uint8) arrayUInt8 {
	var r = make(arrayUInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt8(r)
}

// Reduce with arrayByte receiver
func (a arrayByte) ReduceUInt8(f func(byte, int, ArrayByte) uint8, initial uint8) uint8 {
	var r uint8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayByte receiver
// returns an arrayUintPtr resulting from apllying its function argument
// to every items of the receiver
func (a arrayByte) MapUintPtr(f func(byte) uintptr) arrayUintPtr {
	var r = make(arrayUintPtr, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUintPtr(r)
}

// Reduce with arrayByte receiver
func (a arrayByte) ReduceUintPtr(f func(byte, int, ArrayByte) uintptr, initial uintptr) uintptr {
	var r uintptr = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}

 // end of Byte



// arrayComplex128 is a type alias for []complex128
type arrayComplex128 []complex128

// ArrayComplex128 makes an arry off of its arguments of type complex128 
func ArrayComplex128From(a ...complex128) arrayComplex128 {
	return arrayComplex128(a)
}

// First with arrayComplex128 receiver
// returns first element in a ResultComplex128 container
func (a arrayComplex128) First() ResultComplex128 {
	if len(a) > 0 {
		return OkComplex128(a[0])
	}
	return ErrComplex128("Out Of Bound Array Access")
}

// Slice with arrayComplex128 receiver
// returns itself as []complex128
func (a arrayComplex128) Slice() []complex128 {
	return []complex128(a)
}

// Each with arrayComplex128 receiver
// applies its function argument on each item of the array
func (a arrayComplex128) Each(f func(complex128)) {
	for _, e := range a { f(e) }
}

// Concat with arrayComplex128 receiver
// returns the concatenation of itself and  its argument array 
func (a arrayComplex128) Concat(xs ArrayComplex128) arrayComplex128 {
	return arrayComplex128(append(a.Slice(), xs.Slice()...))
}


// Map with arrayComplex128 receiver
// returns an arrayBool resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex128) MapBool(f func(complex128) bool) arrayBool {
	var r = make(arrayBool, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayBool(r)
}

// Reduce with arrayComplex128 receiver
func (a arrayComplex128) ReduceBool(f func(complex128, int, ArrayComplex128) bool, initial bool) bool {
	var r bool = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex128 receiver
// returns an arrayByte resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex128) MapByte(f func(complex128) byte) arrayByte {
	var r = make(arrayByte, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayByte(r)
}

// Reduce with arrayComplex128 receiver
func (a arrayComplex128) ReduceByte(f func(complex128, int, ArrayComplex128) byte, initial byte) byte {
	var r byte = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex128 receiver
// returns an arrayComplex128 resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex128) MapComplex128(f func(complex128) complex128) arrayComplex128 {
	var r = make(arrayComplex128, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex128(r)
}

// Reduce with arrayComplex128 receiver
func (a arrayComplex128) ReduceComplex128(f func(complex128, int, ArrayComplex128) complex128, initial complex128) complex128 {
	var r complex128 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex128 receiver
// returns an arrayComplex64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex128) MapComplex64(f func(complex128) complex64) arrayComplex64 {
	var r = make(arrayComplex64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex64(r)
}

// Reduce with arrayComplex128 receiver
func (a arrayComplex128) ReduceComplex64(f func(complex128, int, ArrayComplex128) complex64, initial complex64) complex64 {
	var r complex64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex128 receiver
// returns an arrayFloat32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex128) MapFloat32(f func(complex128) float32) arrayFloat32 {
	var r = make(arrayFloat32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat32(r)
}

// Reduce with arrayComplex128 receiver
func (a arrayComplex128) ReduceFloat32(f func(complex128, int, ArrayComplex128) float32, initial float32) float32 {
	var r float32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex128 receiver
// returns an arrayFloat64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex128) MapFloat64(f func(complex128) float64) arrayFloat64 {
	var r = make(arrayFloat64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat64(r)
}

// Reduce with arrayComplex128 receiver
func (a arrayComplex128) ReduceFloat64(f func(complex128, int, ArrayComplex128) float64, initial float64) float64 {
	var r float64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex128 receiver
// returns an arrayInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex128) MapInt(f func(complex128) int) arrayInt {
	var r = make(arrayInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt(r)
}

// Reduce with arrayComplex128 receiver
func (a arrayComplex128) ReduceInt(f func(complex128, int, ArrayComplex128) int, initial int) int {
	var r int = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex128 receiver
// returns an arrayInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex128) MapInt16(f func(complex128) int16) arrayInt16 {
	var r = make(arrayInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt16(r)
}

// Reduce with arrayComplex128 receiver
func (a arrayComplex128) ReduceInt16(f func(complex128, int, ArrayComplex128) int16, initial int16) int16 {
	var r int16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex128 receiver
// returns an arrayInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex128) MapInt32(f func(complex128) int32) arrayInt32 {
	var r = make(arrayInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt32(r)
}

// Reduce with arrayComplex128 receiver
func (a arrayComplex128) ReduceInt32(f func(complex128, int, ArrayComplex128) int32, initial int32) int32 {
	var r int32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex128 receiver
// returns an arrayInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex128) MapInt64(f func(complex128) int64) arrayInt64 {
	var r = make(arrayInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt64(r)
}

// Reduce with arrayComplex128 receiver
func (a arrayComplex128) ReduceInt64(f func(complex128, int, ArrayComplex128) int64, initial int64) int64 {
	var r int64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex128 receiver
// returns an arrayInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex128) MapInt8(f func(complex128) int8) arrayInt8 {
	var r = make(arrayInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt8(r)
}

// Reduce with arrayComplex128 receiver
func (a arrayComplex128) ReduceInt8(f func(complex128, int, ArrayComplex128) int8, initial int8) int8 {
	var r int8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex128 receiver
// returns an arrayRune resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex128) MapRune(f func(complex128) rune) arrayRune {
	var r = make(arrayRune, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayRune(r)
}

// Reduce with arrayComplex128 receiver
func (a arrayComplex128) ReduceRune(f func(complex128, int, ArrayComplex128) rune, initial rune) rune {
	var r rune = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex128 receiver
// returns an arrayString resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex128) MapString(f func(complex128) string) arrayString {
	var r = make(arrayString, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayString(r)
}

// Reduce with arrayComplex128 receiver
func (a arrayComplex128) ReduceString(f func(complex128, int, ArrayComplex128) string, initial string) string {
	var r string = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex128 receiver
// returns an arrayUInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex128) MapUInt(f func(complex128) uint) arrayUInt {
	var r = make(arrayUInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt(r)
}

// Reduce with arrayComplex128 receiver
func (a arrayComplex128) ReduceUInt(f func(complex128, int, ArrayComplex128) uint, initial uint) uint {
	var r uint = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex128 receiver
// returns an arrayUInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex128) MapUInt16(f func(complex128) uint16) arrayUInt16 {
	var r = make(arrayUInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt16(r)
}

// Reduce with arrayComplex128 receiver
func (a arrayComplex128) ReduceUInt16(f func(complex128, int, ArrayComplex128) uint16, initial uint16) uint16 {
	var r uint16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex128 receiver
// returns an arrayUInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex128) MapUInt32(f func(complex128) uint32) arrayUInt32 {
	var r = make(arrayUInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt32(r)
}

// Reduce with arrayComplex128 receiver
func (a arrayComplex128) ReduceUInt32(f func(complex128, int, ArrayComplex128) uint32, initial uint32) uint32 {
	var r uint32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex128 receiver
// returns an arrayUInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex128) MapUInt64(f func(complex128) uint64) arrayUInt64 {
	var r = make(arrayUInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt64(r)
}

// Reduce with arrayComplex128 receiver
func (a arrayComplex128) ReduceUInt64(f func(complex128, int, ArrayComplex128) uint64, initial uint64) uint64 {
	var r uint64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex128 receiver
// returns an arrayUInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex128) MapUInt8(f func(complex128) uint8) arrayUInt8 {
	var r = make(arrayUInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt8(r)
}

// Reduce with arrayComplex128 receiver
func (a arrayComplex128) ReduceUInt8(f func(complex128, int, ArrayComplex128) uint8, initial uint8) uint8 {
	var r uint8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex128 receiver
// returns an arrayUintPtr resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex128) MapUintPtr(f func(complex128) uintptr) arrayUintPtr {
	var r = make(arrayUintPtr, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUintPtr(r)
}

// Reduce with arrayComplex128 receiver
func (a arrayComplex128) ReduceUintPtr(f func(complex128, int, ArrayComplex128) uintptr, initial uintptr) uintptr {
	var r uintptr = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}

 // end of Complex128



// arrayComplex64 is a type alias for []complex64
type arrayComplex64 []complex64

// ArrayComplex64 makes an arry off of its arguments of type complex64 
func ArrayComplex64From(a ...complex64) arrayComplex64 {
	return arrayComplex64(a)
}

// First with arrayComplex64 receiver
// returns first element in a ResultComplex64 container
func (a arrayComplex64) First() ResultComplex64 {
	if len(a) > 0 {
		return OkComplex64(a[0])
	}
	return ErrComplex64("Out Of Bound Array Access")
}

// Slice with arrayComplex64 receiver
// returns itself as []complex64
func (a arrayComplex64) Slice() []complex64 {
	return []complex64(a)
}

// Each with arrayComplex64 receiver
// applies its function argument on each item of the array
func (a arrayComplex64) Each(f func(complex64)) {
	for _, e := range a { f(e) }
}

// Concat with arrayComplex64 receiver
// returns the concatenation of itself and  its argument array 
func (a arrayComplex64) Concat(xs ArrayComplex64) arrayComplex64 {
	return arrayComplex64(append(a.Slice(), xs.Slice()...))
}


// Map with arrayComplex64 receiver
// returns an arrayBool resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex64) MapBool(f func(complex64) bool) arrayBool {
	var r = make(arrayBool, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayBool(r)
}

// Reduce with arrayComplex64 receiver
func (a arrayComplex64) ReduceBool(f func(complex64, int, ArrayComplex64) bool, initial bool) bool {
	var r bool = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex64 receiver
// returns an arrayByte resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex64) MapByte(f func(complex64) byte) arrayByte {
	var r = make(arrayByte, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayByte(r)
}

// Reduce with arrayComplex64 receiver
func (a arrayComplex64) ReduceByte(f func(complex64, int, ArrayComplex64) byte, initial byte) byte {
	var r byte = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex64 receiver
// returns an arrayComplex128 resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex64) MapComplex128(f func(complex64) complex128) arrayComplex128 {
	var r = make(arrayComplex128, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex128(r)
}

// Reduce with arrayComplex64 receiver
func (a arrayComplex64) ReduceComplex128(f func(complex64, int, ArrayComplex64) complex128, initial complex128) complex128 {
	var r complex128 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex64 receiver
// returns an arrayComplex64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex64) MapComplex64(f func(complex64) complex64) arrayComplex64 {
	var r = make(arrayComplex64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex64(r)
}

// Reduce with arrayComplex64 receiver
func (a arrayComplex64) ReduceComplex64(f func(complex64, int, ArrayComplex64) complex64, initial complex64) complex64 {
	var r complex64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex64 receiver
// returns an arrayFloat32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex64) MapFloat32(f func(complex64) float32) arrayFloat32 {
	var r = make(arrayFloat32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat32(r)
}

// Reduce with arrayComplex64 receiver
func (a arrayComplex64) ReduceFloat32(f func(complex64, int, ArrayComplex64) float32, initial float32) float32 {
	var r float32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex64 receiver
// returns an arrayFloat64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex64) MapFloat64(f func(complex64) float64) arrayFloat64 {
	var r = make(arrayFloat64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat64(r)
}

// Reduce with arrayComplex64 receiver
func (a arrayComplex64) ReduceFloat64(f func(complex64, int, ArrayComplex64) float64, initial float64) float64 {
	var r float64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex64 receiver
// returns an arrayInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex64) MapInt(f func(complex64) int) arrayInt {
	var r = make(arrayInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt(r)
}

// Reduce with arrayComplex64 receiver
func (a arrayComplex64) ReduceInt(f func(complex64, int, ArrayComplex64) int, initial int) int {
	var r int = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex64 receiver
// returns an arrayInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex64) MapInt16(f func(complex64) int16) arrayInt16 {
	var r = make(arrayInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt16(r)
}

// Reduce with arrayComplex64 receiver
func (a arrayComplex64) ReduceInt16(f func(complex64, int, ArrayComplex64) int16, initial int16) int16 {
	var r int16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex64 receiver
// returns an arrayInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex64) MapInt32(f func(complex64) int32) arrayInt32 {
	var r = make(arrayInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt32(r)
}

// Reduce with arrayComplex64 receiver
func (a arrayComplex64) ReduceInt32(f func(complex64, int, ArrayComplex64) int32, initial int32) int32 {
	var r int32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex64 receiver
// returns an arrayInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex64) MapInt64(f func(complex64) int64) arrayInt64 {
	var r = make(arrayInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt64(r)
}

// Reduce with arrayComplex64 receiver
func (a arrayComplex64) ReduceInt64(f func(complex64, int, ArrayComplex64) int64, initial int64) int64 {
	var r int64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex64 receiver
// returns an arrayInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex64) MapInt8(f func(complex64) int8) arrayInt8 {
	var r = make(arrayInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt8(r)
}

// Reduce with arrayComplex64 receiver
func (a arrayComplex64) ReduceInt8(f func(complex64, int, ArrayComplex64) int8, initial int8) int8 {
	var r int8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex64 receiver
// returns an arrayRune resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex64) MapRune(f func(complex64) rune) arrayRune {
	var r = make(arrayRune, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayRune(r)
}

// Reduce with arrayComplex64 receiver
func (a arrayComplex64) ReduceRune(f func(complex64, int, ArrayComplex64) rune, initial rune) rune {
	var r rune = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex64 receiver
// returns an arrayString resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex64) MapString(f func(complex64) string) arrayString {
	var r = make(arrayString, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayString(r)
}

// Reduce with arrayComplex64 receiver
func (a arrayComplex64) ReduceString(f func(complex64, int, ArrayComplex64) string, initial string) string {
	var r string = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex64 receiver
// returns an arrayUInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex64) MapUInt(f func(complex64) uint) arrayUInt {
	var r = make(arrayUInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt(r)
}

// Reduce with arrayComplex64 receiver
func (a arrayComplex64) ReduceUInt(f func(complex64, int, ArrayComplex64) uint, initial uint) uint {
	var r uint = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex64 receiver
// returns an arrayUInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex64) MapUInt16(f func(complex64) uint16) arrayUInt16 {
	var r = make(arrayUInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt16(r)
}

// Reduce with arrayComplex64 receiver
func (a arrayComplex64) ReduceUInt16(f func(complex64, int, ArrayComplex64) uint16, initial uint16) uint16 {
	var r uint16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex64 receiver
// returns an arrayUInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex64) MapUInt32(f func(complex64) uint32) arrayUInt32 {
	var r = make(arrayUInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt32(r)
}

// Reduce with arrayComplex64 receiver
func (a arrayComplex64) ReduceUInt32(f func(complex64, int, ArrayComplex64) uint32, initial uint32) uint32 {
	var r uint32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex64 receiver
// returns an arrayUInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex64) MapUInt64(f func(complex64) uint64) arrayUInt64 {
	var r = make(arrayUInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt64(r)
}

// Reduce with arrayComplex64 receiver
func (a arrayComplex64) ReduceUInt64(f func(complex64, int, ArrayComplex64) uint64, initial uint64) uint64 {
	var r uint64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex64 receiver
// returns an arrayUInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex64) MapUInt8(f func(complex64) uint8) arrayUInt8 {
	var r = make(arrayUInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt8(r)
}

// Reduce with arrayComplex64 receiver
func (a arrayComplex64) ReduceUInt8(f func(complex64, int, ArrayComplex64) uint8, initial uint8) uint8 {
	var r uint8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayComplex64 receiver
// returns an arrayUintPtr resulting from apllying its function argument
// to every items of the receiver
func (a arrayComplex64) MapUintPtr(f func(complex64) uintptr) arrayUintPtr {
	var r = make(arrayUintPtr, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUintPtr(r)
}

// Reduce with arrayComplex64 receiver
func (a arrayComplex64) ReduceUintPtr(f func(complex64, int, ArrayComplex64) uintptr, initial uintptr) uintptr {
	var r uintptr = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}

 // end of Complex64



// arrayFloat32 is a type alias for []float32
type arrayFloat32 []float32

// ArrayFloat32 makes an arry off of its arguments of type float32 
func ArrayFloat32From(a ...float32) arrayFloat32 {
	return arrayFloat32(a)
}

// First with arrayFloat32 receiver
// returns first element in a ResultFloat32 container
func (a arrayFloat32) First() ResultFloat32 {
	if len(a) > 0 {
		return OkFloat32(a[0])
	}
	return ErrFloat32("Out Of Bound Array Access")
}

// Slice with arrayFloat32 receiver
// returns itself as []float32
func (a arrayFloat32) Slice() []float32 {
	return []float32(a)
}

// Each with arrayFloat32 receiver
// applies its function argument on each item of the array
func (a arrayFloat32) Each(f func(float32)) {
	for _, e := range a { f(e) }
}

// Concat with arrayFloat32 receiver
// returns the concatenation of itself and  its argument array 
func (a arrayFloat32) Concat(xs ArrayFloat32) arrayFloat32 {
	return arrayFloat32(append(a.Slice(), xs.Slice()...))
}


// Map with arrayFloat32 receiver
// returns an arrayBool resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat32) MapBool(f func(float32) bool) arrayBool {
	var r = make(arrayBool, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayBool(r)
}

// Reduce with arrayFloat32 receiver
func (a arrayFloat32) ReduceBool(f func(float32, int, ArrayFloat32) bool, initial bool) bool {
	var r bool = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat32 receiver
// returns an arrayByte resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat32) MapByte(f func(float32) byte) arrayByte {
	var r = make(arrayByte, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayByte(r)
}

// Reduce with arrayFloat32 receiver
func (a arrayFloat32) ReduceByte(f func(float32, int, ArrayFloat32) byte, initial byte) byte {
	var r byte = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat32 receiver
// returns an arrayComplex128 resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat32) MapComplex128(f func(float32) complex128) arrayComplex128 {
	var r = make(arrayComplex128, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex128(r)
}

// Reduce with arrayFloat32 receiver
func (a arrayFloat32) ReduceComplex128(f func(float32, int, ArrayFloat32) complex128, initial complex128) complex128 {
	var r complex128 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat32 receiver
// returns an arrayComplex64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat32) MapComplex64(f func(float32) complex64) arrayComplex64 {
	var r = make(arrayComplex64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex64(r)
}

// Reduce with arrayFloat32 receiver
func (a arrayFloat32) ReduceComplex64(f func(float32, int, ArrayFloat32) complex64, initial complex64) complex64 {
	var r complex64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat32 receiver
// returns an arrayFloat32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat32) MapFloat32(f func(float32) float32) arrayFloat32 {
	var r = make(arrayFloat32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat32(r)
}

// Reduce with arrayFloat32 receiver
func (a arrayFloat32) ReduceFloat32(f func(float32, int, ArrayFloat32) float32, initial float32) float32 {
	var r float32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat32 receiver
// returns an arrayFloat64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat32) MapFloat64(f func(float32) float64) arrayFloat64 {
	var r = make(arrayFloat64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat64(r)
}

// Reduce with arrayFloat32 receiver
func (a arrayFloat32) ReduceFloat64(f func(float32, int, ArrayFloat32) float64, initial float64) float64 {
	var r float64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat32 receiver
// returns an arrayInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat32) MapInt(f func(float32) int) arrayInt {
	var r = make(arrayInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt(r)
}

// Reduce with arrayFloat32 receiver
func (a arrayFloat32) ReduceInt(f func(float32, int, ArrayFloat32) int, initial int) int {
	var r int = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat32 receiver
// returns an arrayInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat32) MapInt16(f func(float32) int16) arrayInt16 {
	var r = make(arrayInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt16(r)
}

// Reduce with arrayFloat32 receiver
func (a arrayFloat32) ReduceInt16(f func(float32, int, ArrayFloat32) int16, initial int16) int16 {
	var r int16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat32 receiver
// returns an arrayInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat32) MapInt32(f func(float32) int32) arrayInt32 {
	var r = make(arrayInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt32(r)
}

// Reduce with arrayFloat32 receiver
func (a arrayFloat32) ReduceInt32(f func(float32, int, ArrayFloat32) int32, initial int32) int32 {
	var r int32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat32 receiver
// returns an arrayInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat32) MapInt64(f func(float32) int64) arrayInt64 {
	var r = make(arrayInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt64(r)
}

// Reduce with arrayFloat32 receiver
func (a arrayFloat32) ReduceInt64(f func(float32, int, ArrayFloat32) int64, initial int64) int64 {
	var r int64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat32 receiver
// returns an arrayInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat32) MapInt8(f func(float32) int8) arrayInt8 {
	var r = make(arrayInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt8(r)
}

// Reduce with arrayFloat32 receiver
func (a arrayFloat32) ReduceInt8(f func(float32, int, ArrayFloat32) int8, initial int8) int8 {
	var r int8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat32 receiver
// returns an arrayRune resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat32) MapRune(f func(float32) rune) arrayRune {
	var r = make(arrayRune, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayRune(r)
}

// Reduce with arrayFloat32 receiver
func (a arrayFloat32) ReduceRune(f func(float32, int, ArrayFloat32) rune, initial rune) rune {
	var r rune = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat32 receiver
// returns an arrayString resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat32) MapString(f func(float32) string) arrayString {
	var r = make(arrayString, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayString(r)
}

// Reduce with arrayFloat32 receiver
func (a arrayFloat32) ReduceString(f func(float32, int, ArrayFloat32) string, initial string) string {
	var r string = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat32 receiver
// returns an arrayUInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat32) MapUInt(f func(float32) uint) arrayUInt {
	var r = make(arrayUInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt(r)
}

// Reduce with arrayFloat32 receiver
func (a arrayFloat32) ReduceUInt(f func(float32, int, ArrayFloat32) uint, initial uint) uint {
	var r uint = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat32 receiver
// returns an arrayUInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat32) MapUInt16(f func(float32) uint16) arrayUInt16 {
	var r = make(arrayUInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt16(r)
}

// Reduce with arrayFloat32 receiver
func (a arrayFloat32) ReduceUInt16(f func(float32, int, ArrayFloat32) uint16, initial uint16) uint16 {
	var r uint16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat32 receiver
// returns an arrayUInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat32) MapUInt32(f func(float32) uint32) arrayUInt32 {
	var r = make(arrayUInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt32(r)
}

// Reduce with arrayFloat32 receiver
func (a arrayFloat32) ReduceUInt32(f func(float32, int, ArrayFloat32) uint32, initial uint32) uint32 {
	var r uint32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat32 receiver
// returns an arrayUInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat32) MapUInt64(f func(float32) uint64) arrayUInt64 {
	var r = make(arrayUInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt64(r)
}

// Reduce with arrayFloat32 receiver
func (a arrayFloat32) ReduceUInt64(f func(float32, int, ArrayFloat32) uint64, initial uint64) uint64 {
	var r uint64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat32 receiver
// returns an arrayUInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat32) MapUInt8(f func(float32) uint8) arrayUInt8 {
	var r = make(arrayUInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt8(r)
}

// Reduce with arrayFloat32 receiver
func (a arrayFloat32) ReduceUInt8(f func(float32, int, ArrayFloat32) uint8, initial uint8) uint8 {
	var r uint8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat32 receiver
// returns an arrayUintPtr resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat32) MapUintPtr(f func(float32) uintptr) arrayUintPtr {
	var r = make(arrayUintPtr, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUintPtr(r)
}

// Reduce with arrayFloat32 receiver
func (a arrayFloat32) ReduceUintPtr(f func(float32, int, ArrayFloat32) uintptr, initial uintptr) uintptr {
	var r uintptr = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}

 // end of Float32



// arrayFloat64 is a type alias for []float64
type arrayFloat64 []float64

// ArrayFloat64 makes an arry off of its arguments of type float64 
func ArrayFloat64From(a ...float64) arrayFloat64 {
	return arrayFloat64(a)
}

// First with arrayFloat64 receiver
// returns first element in a ResultFloat64 container
func (a arrayFloat64) First() ResultFloat64 {
	if len(a) > 0 {
		return OkFloat64(a[0])
	}
	return ErrFloat64("Out Of Bound Array Access")
}

// Slice with arrayFloat64 receiver
// returns itself as []float64
func (a arrayFloat64) Slice() []float64 {
	return []float64(a)
}

// Each with arrayFloat64 receiver
// applies its function argument on each item of the array
func (a arrayFloat64) Each(f func(float64)) {
	for _, e := range a { f(e) }
}

// Concat with arrayFloat64 receiver
// returns the concatenation of itself and  its argument array 
func (a arrayFloat64) Concat(xs ArrayFloat64) arrayFloat64 {
	return arrayFloat64(append(a.Slice(), xs.Slice()...))
}


// Map with arrayFloat64 receiver
// returns an arrayBool resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat64) MapBool(f func(float64) bool) arrayBool {
	var r = make(arrayBool, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayBool(r)
}

// Reduce with arrayFloat64 receiver
func (a arrayFloat64) ReduceBool(f func(float64, int, ArrayFloat64) bool, initial bool) bool {
	var r bool = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat64 receiver
// returns an arrayByte resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat64) MapByte(f func(float64) byte) arrayByte {
	var r = make(arrayByte, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayByte(r)
}

// Reduce with arrayFloat64 receiver
func (a arrayFloat64) ReduceByte(f func(float64, int, ArrayFloat64) byte, initial byte) byte {
	var r byte = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat64 receiver
// returns an arrayComplex128 resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat64) MapComplex128(f func(float64) complex128) arrayComplex128 {
	var r = make(arrayComplex128, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex128(r)
}

// Reduce with arrayFloat64 receiver
func (a arrayFloat64) ReduceComplex128(f func(float64, int, ArrayFloat64) complex128, initial complex128) complex128 {
	var r complex128 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat64 receiver
// returns an arrayComplex64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat64) MapComplex64(f func(float64) complex64) arrayComplex64 {
	var r = make(arrayComplex64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex64(r)
}

// Reduce with arrayFloat64 receiver
func (a arrayFloat64) ReduceComplex64(f func(float64, int, ArrayFloat64) complex64, initial complex64) complex64 {
	var r complex64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat64 receiver
// returns an arrayFloat32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat64) MapFloat32(f func(float64) float32) arrayFloat32 {
	var r = make(arrayFloat32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat32(r)
}

// Reduce with arrayFloat64 receiver
func (a arrayFloat64) ReduceFloat32(f func(float64, int, ArrayFloat64) float32, initial float32) float32 {
	var r float32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat64 receiver
// returns an arrayFloat64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat64) MapFloat64(f func(float64) float64) arrayFloat64 {
	var r = make(arrayFloat64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat64(r)
}

// Reduce with arrayFloat64 receiver
func (a arrayFloat64) ReduceFloat64(f func(float64, int, ArrayFloat64) float64, initial float64) float64 {
	var r float64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat64 receiver
// returns an arrayInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat64) MapInt(f func(float64) int) arrayInt {
	var r = make(arrayInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt(r)
}

// Reduce with arrayFloat64 receiver
func (a arrayFloat64) ReduceInt(f func(float64, int, ArrayFloat64) int, initial int) int {
	var r int = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat64 receiver
// returns an arrayInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat64) MapInt16(f func(float64) int16) arrayInt16 {
	var r = make(arrayInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt16(r)
}

// Reduce with arrayFloat64 receiver
func (a arrayFloat64) ReduceInt16(f func(float64, int, ArrayFloat64) int16, initial int16) int16 {
	var r int16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat64 receiver
// returns an arrayInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat64) MapInt32(f func(float64) int32) arrayInt32 {
	var r = make(arrayInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt32(r)
}

// Reduce with arrayFloat64 receiver
func (a arrayFloat64) ReduceInt32(f func(float64, int, ArrayFloat64) int32, initial int32) int32 {
	var r int32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat64 receiver
// returns an arrayInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat64) MapInt64(f func(float64) int64) arrayInt64 {
	var r = make(arrayInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt64(r)
}

// Reduce with arrayFloat64 receiver
func (a arrayFloat64) ReduceInt64(f func(float64, int, ArrayFloat64) int64, initial int64) int64 {
	var r int64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat64 receiver
// returns an arrayInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat64) MapInt8(f func(float64) int8) arrayInt8 {
	var r = make(arrayInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt8(r)
}

// Reduce with arrayFloat64 receiver
func (a arrayFloat64) ReduceInt8(f func(float64, int, ArrayFloat64) int8, initial int8) int8 {
	var r int8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat64 receiver
// returns an arrayRune resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat64) MapRune(f func(float64) rune) arrayRune {
	var r = make(arrayRune, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayRune(r)
}

// Reduce with arrayFloat64 receiver
func (a arrayFloat64) ReduceRune(f func(float64, int, ArrayFloat64) rune, initial rune) rune {
	var r rune = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat64 receiver
// returns an arrayString resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat64) MapString(f func(float64) string) arrayString {
	var r = make(arrayString, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayString(r)
}

// Reduce with arrayFloat64 receiver
func (a arrayFloat64) ReduceString(f func(float64, int, ArrayFloat64) string, initial string) string {
	var r string = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat64 receiver
// returns an arrayUInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat64) MapUInt(f func(float64) uint) arrayUInt {
	var r = make(arrayUInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt(r)
}

// Reduce with arrayFloat64 receiver
func (a arrayFloat64) ReduceUInt(f func(float64, int, ArrayFloat64) uint, initial uint) uint {
	var r uint = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat64 receiver
// returns an arrayUInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat64) MapUInt16(f func(float64) uint16) arrayUInt16 {
	var r = make(arrayUInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt16(r)
}

// Reduce with arrayFloat64 receiver
func (a arrayFloat64) ReduceUInt16(f func(float64, int, ArrayFloat64) uint16, initial uint16) uint16 {
	var r uint16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat64 receiver
// returns an arrayUInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat64) MapUInt32(f func(float64) uint32) arrayUInt32 {
	var r = make(arrayUInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt32(r)
}

// Reduce with arrayFloat64 receiver
func (a arrayFloat64) ReduceUInt32(f func(float64, int, ArrayFloat64) uint32, initial uint32) uint32 {
	var r uint32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat64 receiver
// returns an arrayUInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat64) MapUInt64(f func(float64) uint64) arrayUInt64 {
	var r = make(arrayUInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt64(r)
}

// Reduce with arrayFloat64 receiver
func (a arrayFloat64) ReduceUInt64(f func(float64, int, ArrayFloat64) uint64, initial uint64) uint64 {
	var r uint64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat64 receiver
// returns an arrayUInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat64) MapUInt8(f func(float64) uint8) arrayUInt8 {
	var r = make(arrayUInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt8(r)
}

// Reduce with arrayFloat64 receiver
func (a arrayFloat64) ReduceUInt8(f func(float64, int, ArrayFloat64) uint8, initial uint8) uint8 {
	var r uint8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayFloat64 receiver
// returns an arrayUintPtr resulting from apllying its function argument
// to every items of the receiver
func (a arrayFloat64) MapUintPtr(f func(float64) uintptr) arrayUintPtr {
	var r = make(arrayUintPtr, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUintPtr(r)
}

// Reduce with arrayFloat64 receiver
func (a arrayFloat64) ReduceUintPtr(f func(float64, int, ArrayFloat64) uintptr, initial uintptr) uintptr {
	var r uintptr = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}

 // end of Float64



// arrayInt is a type alias for []int
type arrayInt []int

// ArrayInt makes an arry off of its arguments of type int 
func ArrayIntFrom(a ...int) arrayInt {
	return arrayInt(a)
}

// First with arrayInt receiver
// returns first element in a ResultInt container
func (a arrayInt) First() ResultInt {
	if len(a) > 0 {
		return OkInt(a[0])
	}
	return ErrInt("Out Of Bound Array Access")
}

// Slice with arrayInt receiver
// returns itself as []int
func (a arrayInt) Slice() []int {
	return []int(a)
}

// Each with arrayInt receiver
// applies its function argument on each item of the array
func (a arrayInt) Each(f func(int)) {
	for _, e := range a { f(e) }
}

// Concat with arrayInt receiver
// returns the concatenation of itself and  its argument array 
func (a arrayInt) Concat(xs ArrayInt) arrayInt {
	return arrayInt(append(a.Slice(), xs.Slice()...))
}


// Map with arrayInt receiver
// returns an arrayBool resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt) MapBool(f func(int) bool) arrayBool {
	var r = make(arrayBool, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayBool(r)
}

// Reduce with arrayInt receiver
func (a arrayInt) ReduceBool(f func(int, int, ArrayInt) bool, initial bool) bool {
	var r bool = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt receiver
// returns an arrayByte resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt) MapByte(f func(int) byte) arrayByte {
	var r = make(arrayByte, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayByte(r)
}

// Reduce with arrayInt receiver
func (a arrayInt) ReduceByte(f func(int, int, ArrayInt) byte, initial byte) byte {
	var r byte = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt receiver
// returns an arrayComplex128 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt) MapComplex128(f func(int) complex128) arrayComplex128 {
	var r = make(arrayComplex128, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex128(r)
}

// Reduce with arrayInt receiver
func (a arrayInt) ReduceComplex128(f func(int, int, ArrayInt) complex128, initial complex128) complex128 {
	var r complex128 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt receiver
// returns an arrayComplex64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt) MapComplex64(f func(int) complex64) arrayComplex64 {
	var r = make(arrayComplex64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex64(r)
}

// Reduce with arrayInt receiver
func (a arrayInt) ReduceComplex64(f func(int, int, ArrayInt) complex64, initial complex64) complex64 {
	var r complex64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt receiver
// returns an arrayFloat32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt) MapFloat32(f func(int) float32) arrayFloat32 {
	var r = make(arrayFloat32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat32(r)
}

// Reduce with arrayInt receiver
func (a arrayInt) ReduceFloat32(f func(int, int, ArrayInt) float32, initial float32) float32 {
	var r float32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt receiver
// returns an arrayFloat64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt) MapFloat64(f func(int) float64) arrayFloat64 {
	var r = make(arrayFloat64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat64(r)
}

// Reduce with arrayInt receiver
func (a arrayInt) ReduceFloat64(f func(int, int, ArrayInt) float64, initial float64) float64 {
	var r float64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt receiver
// returns an arrayInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt) MapInt(f func(int) int) arrayInt {
	var r = make(arrayInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt(r)
}

// Reduce with arrayInt receiver
func (a arrayInt) ReduceInt(f func(int, int, ArrayInt) int, initial int) int {
	var r int = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt receiver
// returns an arrayInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt) MapInt16(f func(int) int16) arrayInt16 {
	var r = make(arrayInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt16(r)
}

// Reduce with arrayInt receiver
func (a arrayInt) ReduceInt16(f func(int, int, ArrayInt) int16, initial int16) int16 {
	var r int16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt receiver
// returns an arrayInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt) MapInt32(f func(int) int32) arrayInt32 {
	var r = make(arrayInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt32(r)
}

// Reduce with arrayInt receiver
func (a arrayInt) ReduceInt32(f func(int, int, ArrayInt) int32, initial int32) int32 {
	var r int32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt receiver
// returns an arrayInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt) MapInt64(f func(int) int64) arrayInt64 {
	var r = make(arrayInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt64(r)
}

// Reduce with arrayInt receiver
func (a arrayInt) ReduceInt64(f func(int, int, ArrayInt) int64, initial int64) int64 {
	var r int64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt receiver
// returns an arrayInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt) MapInt8(f func(int) int8) arrayInt8 {
	var r = make(arrayInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt8(r)
}

// Reduce with arrayInt receiver
func (a arrayInt) ReduceInt8(f func(int, int, ArrayInt) int8, initial int8) int8 {
	var r int8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt receiver
// returns an arrayRune resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt) MapRune(f func(int) rune) arrayRune {
	var r = make(arrayRune, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayRune(r)
}

// Reduce with arrayInt receiver
func (a arrayInt) ReduceRune(f func(int, int, ArrayInt) rune, initial rune) rune {
	var r rune = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt receiver
// returns an arrayString resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt) MapString(f func(int) string) arrayString {
	var r = make(arrayString, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayString(r)
}

// Reduce with arrayInt receiver
func (a arrayInt) ReduceString(f func(int, int, ArrayInt) string, initial string) string {
	var r string = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt receiver
// returns an arrayUInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt) MapUInt(f func(int) uint) arrayUInt {
	var r = make(arrayUInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt(r)
}

// Reduce with arrayInt receiver
func (a arrayInt) ReduceUInt(f func(int, int, ArrayInt) uint, initial uint) uint {
	var r uint = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt receiver
// returns an arrayUInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt) MapUInt16(f func(int) uint16) arrayUInt16 {
	var r = make(arrayUInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt16(r)
}

// Reduce with arrayInt receiver
func (a arrayInt) ReduceUInt16(f func(int, int, ArrayInt) uint16, initial uint16) uint16 {
	var r uint16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt receiver
// returns an arrayUInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt) MapUInt32(f func(int) uint32) arrayUInt32 {
	var r = make(arrayUInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt32(r)
}

// Reduce with arrayInt receiver
func (a arrayInt) ReduceUInt32(f func(int, int, ArrayInt) uint32, initial uint32) uint32 {
	var r uint32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt receiver
// returns an arrayUInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt) MapUInt64(f func(int) uint64) arrayUInt64 {
	var r = make(arrayUInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt64(r)
}

// Reduce with arrayInt receiver
func (a arrayInt) ReduceUInt64(f func(int, int, ArrayInt) uint64, initial uint64) uint64 {
	var r uint64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt receiver
// returns an arrayUInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt) MapUInt8(f func(int) uint8) arrayUInt8 {
	var r = make(arrayUInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt8(r)
}

// Reduce with arrayInt receiver
func (a arrayInt) ReduceUInt8(f func(int, int, ArrayInt) uint8, initial uint8) uint8 {
	var r uint8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt receiver
// returns an arrayUintPtr resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt) MapUintPtr(f func(int) uintptr) arrayUintPtr {
	var r = make(arrayUintPtr, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUintPtr(r)
}

// Reduce with arrayInt receiver
func (a arrayInt) ReduceUintPtr(f func(int, int, ArrayInt) uintptr, initial uintptr) uintptr {
	var r uintptr = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}

 // end of Int



// arrayInt16 is a type alias for []int16
type arrayInt16 []int16

// ArrayInt16 makes an arry off of its arguments of type int16 
func ArrayInt16From(a ...int16) arrayInt16 {
	return arrayInt16(a)
}

// First with arrayInt16 receiver
// returns first element in a ResultInt16 container
func (a arrayInt16) First() ResultInt16 {
	if len(a) > 0 {
		return OkInt16(a[0])
	}
	return ErrInt16("Out Of Bound Array Access")
}

// Slice with arrayInt16 receiver
// returns itself as []int16
func (a arrayInt16) Slice() []int16 {
	return []int16(a)
}

// Each with arrayInt16 receiver
// applies its function argument on each item of the array
func (a arrayInt16) Each(f func(int16)) {
	for _, e := range a { f(e) }
}

// Concat with arrayInt16 receiver
// returns the concatenation of itself and  its argument array 
func (a arrayInt16) Concat(xs ArrayInt16) arrayInt16 {
	return arrayInt16(append(a.Slice(), xs.Slice()...))
}


// Map with arrayInt16 receiver
// returns an arrayBool resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt16) MapBool(f func(int16) bool) arrayBool {
	var r = make(arrayBool, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayBool(r)
}

// Reduce with arrayInt16 receiver
func (a arrayInt16) ReduceBool(f func(int16, int, ArrayInt16) bool, initial bool) bool {
	var r bool = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt16 receiver
// returns an arrayByte resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt16) MapByte(f func(int16) byte) arrayByte {
	var r = make(arrayByte, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayByte(r)
}

// Reduce with arrayInt16 receiver
func (a arrayInt16) ReduceByte(f func(int16, int, ArrayInt16) byte, initial byte) byte {
	var r byte = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt16 receiver
// returns an arrayComplex128 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt16) MapComplex128(f func(int16) complex128) arrayComplex128 {
	var r = make(arrayComplex128, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex128(r)
}

// Reduce with arrayInt16 receiver
func (a arrayInt16) ReduceComplex128(f func(int16, int, ArrayInt16) complex128, initial complex128) complex128 {
	var r complex128 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt16 receiver
// returns an arrayComplex64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt16) MapComplex64(f func(int16) complex64) arrayComplex64 {
	var r = make(arrayComplex64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex64(r)
}

// Reduce with arrayInt16 receiver
func (a arrayInt16) ReduceComplex64(f func(int16, int, ArrayInt16) complex64, initial complex64) complex64 {
	var r complex64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt16 receiver
// returns an arrayFloat32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt16) MapFloat32(f func(int16) float32) arrayFloat32 {
	var r = make(arrayFloat32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat32(r)
}

// Reduce with arrayInt16 receiver
func (a arrayInt16) ReduceFloat32(f func(int16, int, ArrayInt16) float32, initial float32) float32 {
	var r float32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt16 receiver
// returns an arrayFloat64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt16) MapFloat64(f func(int16) float64) arrayFloat64 {
	var r = make(arrayFloat64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat64(r)
}

// Reduce with arrayInt16 receiver
func (a arrayInt16) ReduceFloat64(f func(int16, int, ArrayInt16) float64, initial float64) float64 {
	var r float64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt16 receiver
// returns an arrayInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt16) MapInt(f func(int16) int) arrayInt {
	var r = make(arrayInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt(r)
}

// Reduce with arrayInt16 receiver
func (a arrayInt16) ReduceInt(f func(int16, int, ArrayInt16) int, initial int) int {
	var r int = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt16 receiver
// returns an arrayInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt16) MapInt16(f func(int16) int16) arrayInt16 {
	var r = make(arrayInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt16(r)
}

// Reduce with arrayInt16 receiver
func (a arrayInt16) ReduceInt16(f func(int16, int, ArrayInt16) int16, initial int16) int16 {
	var r int16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt16 receiver
// returns an arrayInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt16) MapInt32(f func(int16) int32) arrayInt32 {
	var r = make(arrayInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt32(r)
}

// Reduce with arrayInt16 receiver
func (a arrayInt16) ReduceInt32(f func(int16, int, ArrayInt16) int32, initial int32) int32 {
	var r int32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt16 receiver
// returns an arrayInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt16) MapInt64(f func(int16) int64) arrayInt64 {
	var r = make(arrayInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt64(r)
}

// Reduce with arrayInt16 receiver
func (a arrayInt16) ReduceInt64(f func(int16, int, ArrayInt16) int64, initial int64) int64 {
	var r int64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt16 receiver
// returns an arrayInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt16) MapInt8(f func(int16) int8) arrayInt8 {
	var r = make(arrayInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt8(r)
}

// Reduce with arrayInt16 receiver
func (a arrayInt16) ReduceInt8(f func(int16, int, ArrayInt16) int8, initial int8) int8 {
	var r int8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt16 receiver
// returns an arrayRune resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt16) MapRune(f func(int16) rune) arrayRune {
	var r = make(arrayRune, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayRune(r)
}

// Reduce with arrayInt16 receiver
func (a arrayInt16) ReduceRune(f func(int16, int, ArrayInt16) rune, initial rune) rune {
	var r rune = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt16 receiver
// returns an arrayString resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt16) MapString(f func(int16) string) arrayString {
	var r = make(arrayString, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayString(r)
}

// Reduce with arrayInt16 receiver
func (a arrayInt16) ReduceString(f func(int16, int, ArrayInt16) string, initial string) string {
	var r string = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt16 receiver
// returns an arrayUInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt16) MapUInt(f func(int16) uint) arrayUInt {
	var r = make(arrayUInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt(r)
}

// Reduce with arrayInt16 receiver
func (a arrayInt16) ReduceUInt(f func(int16, int, ArrayInt16) uint, initial uint) uint {
	var r uint = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt16 receiver
// returns an arrayUInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt16) MapUInt16(f func(int16) uint16) arrayUInt16 {
	var r = make(arrayUInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt16(r)
}

// Reduce with arrayInt16 receiver
func (a arrayInt16) ReduceUInt16(f func(int16, int, ArrayInt16) uint16, initial uint16) uint16 {
	var r uint16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt16 receiver
// returns an arrayUInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt16) MapUInt32(f func(int16) uint32) arrayUInt32 {
	var r = make(arrayUInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt32(r)
}

// Reduce with arrayInt16 receiver
func (a arrayInt16) ReduceUInt32(f func(int16, int, ArrayInt16) uint32, initial uint32) uint32 {
	var r uint32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt16 receiver
// returns an arrayUInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt16) MapUInt64(f func(int16) uint64) arrayUInt64 {
	var r = make(arrayUInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt64(r)
}

// Reduce with arrayInt16 receiver
func (a arrayInt16) ReduceUInt64(f func(int16, int, ArrayInt16) uint64, initial uint64) uint64 {
	var r uint64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt16 receiver
// returns an arrayUInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt16) MapUInt8(f func(int16) uint8) arrayUInt8 {
	var r = make(arrayUInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt8(r)
}

// Reduce with arrayInt16 receiver
func (a arrayInt16) ReduceUInt8(f func(int16, int, ArrayInt16) uint8, initial uint8) uint8 {
	var r uint8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt16 receiver
// returns an arrayUintPtr resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt16) MapUintPtr(f func(int16) uintptr) arrayUintPtr {
	var r = make(arrayUintPtr, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUintPtr(r)
}

// Reduce with arrayInt16 receiver
func (a arrayInt16) ReduceUintPtr(f func(int16, int, ArrayInt16) uintptr, initial uintptr) uintptr {
	var r uintptr = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}

 // end of Int16



// arrayInt32 is a type alias for []int32
type arrayInt32 []int32

// ArrayInt32 makes an arry off of its arguments of type int32 
func ArrayInt32From(a ...int32) arrayInt32 {
	return arrayInt32(a)
}

// First with arrayInt32 receiver
// returns first element in a ResultInt32 container
func (a arrayInt32) First() ResultInt32 {
	if len(a) > 0 {
		return OkInt32(a[0])
	}
	return ErrInt32("Out Of Bound Array Access")
}

// Slice with arrayInt32 receiver
// returns itself as []int32
func (a arrayInt32) Slice() []int32 {
	return []int32(a)
}

// Each with arrayInt32 receiver
// applies its function argument on each item of the array
func (a arrayInt32) Each(f func(int32)) {
	for _, e := range a { f(e) }
}

// Concat with arrayInt32 receiver
// returns the concatenation of itself and  its argument array 
func (a arrayInt32) Concat(xs ArrayInt32) arrayInt32 {
	return arrayInt32(append(a.Slice(), xs.Slice()...))
}


// Map with arrayInt32 receiver
// returns an arrayBool resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt32) MapBool(f func(int32) bool) arrayBool {
	var r = make(arrayBool, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayBool(r)
}

// Reduce with arrayInt32 receiver
func (a arrayInt32) ReduceBool(f func(int32, int, ArrayInt32) bool, initial bool) bool {
	var r bool = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt32 receiver
// returns an arrayByte resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt32) MapByte(f func(int32) byte) arrayByte {
	var r = make(arrayByte, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayByte(r)
}

// Reduce with arrayInt32 receiver
func (a arrayInt32) ReduceByte(f func(int32, int, ArrayInt32) byte, initial byte) byte {
	var r byte = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt32 receiver
// returns an arrayComplex128 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt32) MapComplex128(f func(int32) complex128) arrayComplex128 {
	var r = make(arrayComplex128, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex128(r)
}

// Reduce with arrayInt32 receiver
func (a arrayInt32) ReduceComplex128(f func(int32, int, ArrayInt32) complex128, initial complex128) complex128 {
	var r complex128 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt32 receiver
// returns an arrayComplex64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt32) MapComplex64(f func(int32) complex64) arrayComplex64 {
	var r = make(arrayComplex64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex64(r)
}

// Reduce with arrayInt32 receiver
func (a arrayInt32) ReduceComplex64(f func(int32, int, ArrayInt32) complex64, initial complex64) complex64 {
	var r complex64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt32 receiver
// returns an arrayFloat32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt32) MapFloat32(f func(int32) float32) arrayFloat32 {
	var r = make(arrayFloat32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat32(r)
}

// Reduce with arrayInt32 receiver
func (a arrayInt32) ReduceFloat32(f func(int32, int, ArrayInt32) float32, initial float32) float32 {
	var r float32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt32 receiver
// returns an arrayFloat64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt32) MapFloat64(f func(int32) float64) arrayFloat64 {
	var r = make(arrayFloat64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat64(r)
}

// Reduce with arrayInt32 receiver
func (a arrayInt32) ReduceFloat64(f func(int32, int, ArrayInt32) float64, initial float64) float64 {
	var r float64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt32 receiver
// returns an arrayInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt32) MapInt(f func(int32) int) arrayInt {
	var r = make(arrayInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt(r)
}

// Reduce with arrayInt32 receiver
func (a arrayInt32) ReduceInt(f func(int32, int, ArrayInt32) int, initial int) int {
	var r int = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt32 receiver
// returns an arrayInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt32) MapInt16(f func(int32) int16) arrayInt16 {
	var r = make(arrayInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt16(r)
}

// Reduce with arrayInt32 receiver
func (a arrayInt32) ReduceInt16(f func(int32, int, ArrayInt32) int16, initial int16) int16 {
	var r int16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt32 receiver
// returns an arrayInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt32) MapInt32(f func(int32) int32) arrayInt32 {
	var r = make(arrayInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt32(r)
}

// Reduce with arrayInt32 receiver
func (a arrayInt32) ReduceInt32(f func(int32, int, ArrayInt32) int32, initial int32) int32 {
	var r int32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt32 receiver
// returns an arrayInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt32) MapInt64(f func(int32) int64) arrayInt64 {
	var r = make(arrayInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt64(r)
}

// Reduce with arrayInt32 receiver
func (a arrayInt32) ReduceInt64(f func(int32, int, ArrayInt32) int64, initial int64) int64 {
	var r int64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt32 receiver
// returns an arrayInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt32) MapInt8(f func(int32) int8) arrayInt8 {
	var r = make(arrayInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt8(r)
}

// Reduce with arrayInt32 receiver
func (a arrayInt32) ReduceInt8(f func(int32, int, ArrayInt32) int8, initial int8) int8 {
	var r int8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt32 receiver
// returns an arrayRune resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt32) MapRune(f func(int32) rune) arrayRune {
	var r = make(arrayRune, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayRune(r)
}

// Reduce with arrayInt32 receiver
func (a arrayInt32) ReduceRune(f func(int32, int, ArrayInt32) rune, initial rune) rune {
	var r rune = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt32 receiver
// returns an arrayString resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt32) MapString(f func(int32) string) arrayString {
	var r = make(arrayString, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayString(r)
}

// Reduce with arrayInt32 receiver
func (a arrayInt32) ReduceString(f func(int32, int, ArrayInt32) string, initial string) string {
	var r string = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt32 receiver
// returns an arrayUInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt32) MapUInt(f func(int32) uint) arrayUInt {
	var r = make(arrayUInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt(r)
}

// Reduce with arrayInt32 receiver
func (a arrayInt32) ReduceUInt(f func(int32, int, ArrayInt32) uint, initial uint) uint {
	var r uint = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt32 receiver
// returns an arrayUInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt32) MapUInt16(f func(int32) uint16) arrayUInt16 {
	var r = make(arrayUInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt16(r)
}

// Reduce with arrayInt32 receiver
func (a arrayInt32) ReduceUInt16(f func(int32, int, ArrayInt32) uint16, initial uint16) uint16 {
	var r uint16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt32 receiver
// returns an arrayUInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt32) MapUInt32(f func(int32) uint32) arrayUInt32 {
	var r = make(arrayUInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt32(r)
}

// Reduce with arrayInt32 receiver
func (a arrayInt32) ReduceUInt32(f func(int32, int, ArrayInt32) uint32, initial uint32) uint32 {
	var r uint32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt32 receiver
// returns an arrayUInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt32) MapUInt64(f func(int32) uint64) arrayUInt64 {
	var r = make(arrayUInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt64(r)
}

// Reduce with arrayInt32 receiver
func (a arrayInt32) ReduceUInt64(f func(int32, int, ArrayInt32) uint64, initial uint64) uint64 {
	var r uint64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt32 receiver
// returns an arrayUInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt32) MapUInt8(f func(int32) uint8) arrayUInt8 {
	var r = make(arrayUInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt8(r)
}

// Reduce with arrayInt32 receiver
func (a arrayInt32) ReduceUInt8(f func(int32, int, ArrayInt32) uint8, initial uint8) uint8 {
	var r uint8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt32 receiver
// returns an arrayUintPtr resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt32) MapUintPtr(f func(int32) uintptr) arrayUintPtr {
	var r = make(arrayUintPtr, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUintPtr(r)
}

// Reduce with arrayInt32 receiver
func (a arrayInt32) ReduceUintPtr(f func(int32, int, ArrayInt32) uintptr, initial uintptr) uintptr {
	var r uintptr = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}

 // end of Int32



// arrayInt64 is a type alias for []int64
type arrayInt64 []int64

// ArrayInt64 makes an arry off of its arguments of type int64 
func ArrayInt64From(a ...int64) arrayInt64 {
	return arrayInt64(a)
}

// First with arrayInt64 receiver
// returns first element in a ResultInt64 container
func (a arrayInt64) First() ResultInt64 {
	if len(a) > 0 {
		return OkInt64(a[0])
	}
	return ErrInt64("Out Of Bound Array Access")
}

// Slice with arrayInt64 receiver
// returns itself as []int64
func (a arrayInt64) Slice() []int64 {
	return []int64(a)
}

// Each with arrayInt64 receiver
// applies its function argument on each item of the array
func (a arrayInt64) Each(f func(int64)) {
	for _, e := range a { f(e) }
}

// Concat with arrayInt64 receiver
// returns the concatenation of itself and  its argument array 
func (a arrayInt64) Concat(xs ArrayInt64) arrayInt64 {
	return arrayInt64(append(a.Slice(), xs.Slice()...))
}


// Map with arrayInt64 receiver
// returns an arrayBool resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt64) MapBool(f func(int64) bool) arrayBool {
	var r = make(arrayBool, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayBool(r)
}

// Reduce with arrayInt64 receiver
func (a arrayInt64) ReduceBool(f func(int64, int, ArrayInt64) bool, initial bool) bool {
	var r bool = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt64 receiver
// returns an arrayByte resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt64) MapByte(f func(int64) byte) arrayByte {
	var r = make(arrayByte, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayByte(r)
}

// Reduce with arrayInt64 receiver
func (a arrayInt64) ReduceByte(f func(int64, int, ArrayInt64) byte, initial byte) byte {
	var r byte = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt64 receiver
// returns an arrayComplex128 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt64) MapComplex128(f func(int64) complex128) arrayComplex128 {
	var r = make(arrayComplex128, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex128(r)
}

// Reduce with arrayInt64 receiver
func (a arrayInt64) ReduceComplex128(f func(int64, int, ArrayInt64) complex128, initial complex128) complex128 {
	var r complex128 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt64 receiver
// returns an arrayComplex64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt64) MapComplex64(f func(int64) complex64) arrayComplex64 {
	var r = make(arrayComplex64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex64(r)
}

// Reduce with arrayInt64 receiver
func (a arrayInt64) ReduceComplex64(f func(int64, int, ArrayInt64) complex64, initial complex64) complex64 {
	var r complex64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt64 receiver
// returns an arrayFloat32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt64) MapFloat32(f func(int64) float32) arrayFloat32 {
	var r = make(arrayFloat32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat32(r)
}

// Reduce with arrayInt64 receiver
func (a arrayInt64) ReduceFloat32(f func(int64, int, ArrayInt64) float32, initial float32) float32 {
	var r float32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt64 receiver
// returns an arrayFloat64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt64) MapFloat64(f func(int64) float64) arrayFloat64 {
	var r = make(arrayFloat64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat64(r)
}

// Reduce with arrayInt64 receiver
func (a arrayInt64) ReduceFloat64(f func(int64, int, ArrayInt64) float64, initial float64) float64 {
	var r float64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt64 receiver
// returns an arrayInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt64) MapInt(f func(int64) int) arrayInt {
	var r = make(arrayInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt(r)
}

// Reduce with arrayInt64 receiver
func (a arrayInt64) ReduceInt(f func(int64, int, ArrayInt64) int, initial int) int {
	var r int = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt64 receiver
// returns an arrayInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt64) MapInt16(f func(int64) int16) arrayInt16 {
	var r = make(arrayInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt16(r)
}

// Reduce with arrayInt64 receiver
func (a arrayInt64) ReduceInt16(f func(int64, int, ArrayInt64) int16, initial int16) int16 {
	var r int16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt64 receiver
// returns an arrayInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt64) MapInt32(f func(int64) int32) arrayInt32 {
	var r = make(arrayInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt32(r)
}

// Reduce with arrayInt64 receiver
func (a arrayInt64) ReduceInt32(f func(int64, int, ArrayInt64) int32, initial int32) int32 {
	var r int32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt64 receiver
// returns an arrayInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt64) MapInt64(f func(int64) int64) arrayInt64 {
	var r = make(arrayInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt64(r)
}

// Reduce with arrayInt64 receiver
func (a arrayInt64) ReduceInt64(f func(int64, int, ArrayInt64) int64, initial int64) int64 {
	var r int64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt64 receiver
// returns an arrayInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt64) MapInt8(f func(int64) int8) arrayInt8 {
	var r = make(arrayInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt8(r)
}

// Reduce with arrayInt64 receiver
func (a arrayInt64) ReduceInt8(f func(int64, int, ArrayInt64) int8, initial int8) int8 {
	var r int8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt64 receiver
// returns an arrayRune resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt64) MapRune(f func(int64) rune) arrayRune {
	var r = make(arrayRune, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayRune(r)
}

// Reduce with arrayInt64 receiver
func (a arrayInt64) ReduceRune(f func(int64, int, ArrayInt64) rune, initial rune) rune {
	var r rune = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt64 receiver
// returns an arrayString resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt64) MapString(f func(int64) string) arrayString {
	var r = make(arrayString, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayString(r)
}

// Reduce with arrayInt64 receiver
func (a arrayInt64) ReduceString(f func(int64, int, ArrayInt64) string, initial string) string {
	var r string = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt64 receiver
// returns an arrayUInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt64) MapUInt(f func(int64) uint) arrayUInt {
	var r = make(arrayUInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt(r)
}

// Reduce with arrayInt64 receiver
func (a arrayInt64) ReduceUInt(f func(int64, int, ArrayInt64) uint, initial uint) uint {
	var r uint = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt64 receiver
// returns an arrayUInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt64) MapUInt16(f func(int64) uint16) arrayUInt16 {
	var r = make(arrayUInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt16(r)
}

// Reduce with arrayInt64 receiver
func (a arrayInt64) ReduceUInt16(f func(int64, int, ArrayInt64) uint16, initial uint16) uint16 {
	var r uint16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt64 receiver
// returns an arrayUInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt64) MapUInt32(f func(int64) uint32) arrayUInt32 {
	var r = make(arrayUInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt32(r)
}

// Reduce with arrayInt64 receiver
func (a arrayInt64) ReduceUInt32(f func(int64, int, ArrayInt64) uint32, initial uint32) uint32 {
	var r uint32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt64 receiver
// returns an arrayUInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt64) MapUInt64(f func(int64) uint64) arrayUInt64 {
	var r = make(arrayUInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt64(r)
}

// Reduce with arrayInt64 receiver
func (a arrayInt64) ReduceUInt64(f func(int64, int, ArrayInt64) uint64, initial uint64) uint64 {
	var r uint64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt64 receiver
// returns an arrayUInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt64) MapUInt8(f func(int64) uint8) arrayUInt8 {
	var r = make(arrayUInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt8(r)
}

// Reduce with arrayInt64 receiver
func (a arrayInt64) ReduceUInt8(f func(int64, int, ArrayInt64) uint8, initial uint8) uint8 {
	var r uint8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt64 receiver
// returns an arrayUintPtr resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt64) MapUintPtr(f func(int64) uintptr) arrayUintPtr {
	var r = make(arrayUintPtr, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUintPtr(r)
}

// Reduce with arrayInt64 receiver
func (a arrayInt64) ReduceUintPtr(f func(int64, int, ArrayInt64) uintptr, initial uintptr) uintptr {
	var r uintptr = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}

 // end of Int64



// arrayInt8 is a type alias for []int8
type arrayInt8 []int8

// ArrayInt8 makes an arry off of its arguments of type int8 
func ArrayInt8From(a ...int8) arrayInt8 {
	return arrayInt8(a)
}

// First with arrayInt8 receiver
// returns first element in a ResultInt8 container
func (a arrayInt8) First() ResultInt8 {
	if len(a) > 0 {
		return OkInt8(a[0])
	}
	return ErrInt8("Out Of Bound Array Access")
}

// Slice with arrayInt8 receiver
// returns itself as []int8
func (a arrayInt8) Slice() []int8 {
	return []int8(a)
}

// Each with arrayInt8 receiver
// applies its function argument on each item of the array
func (a arrayInt8) Each(f func(int8)) {
	for _, e := range a { f(e) }
}

// Concat with arrayInt8 receiver
// returns the concatenation of itself and  its argument array 
func (a arrayInt8) Concat(xs ArrayInt8) arrayInt8 {
	return arrayInt8(append(a.Slice(), xs.Slice()...))
}


// Map with arrayInt8 receiver
// returns an arrayBool resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt8) MapBool(f func(int8) bool) arrayBool {
	var r = make(arrayBool, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayBool(r)
}

// Reduce with arrayInt8 receiver
func (a arrayInt8) ReduceBool(f func(int8, int, ArrayInt8) bool, initial bool) bool {
	var r bool = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt8 receiver
// returns an arrayByte resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt8) MapByte(f func(int8) byte) arrayByte {
	var r = make(arrayByte, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayByte(r)
}

// Reduce with arrayInt8 receiver
func (a arrayInt8) ReduceByte(f func(int8, int, ArrayInt8) byte, initial byte) byte {
	var r byte = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt8 receiver
// returns an arrayComplex128 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt8) MapComplex128(f func(int8) complex128) arrayComplex128 {
	var r = make(arrayComplex128, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex128(r)
}

// Reduce with arrayInt8 receiver
func (a arrayInt8) ReduceComplex128(f func(int8, int, ArrayInt8) complex128, initial complex128) complex128 {
	var r complex128 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt8 receiver
// returns an arrayComplex64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt8) MapComplex64(f func(int8) complex64) arrayComplex64 {
	var r = make(arrayComplex64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex64(r)
}

// Reduce with arrayInt8 receiver
func (a arrayInt8) ReduceComplex64(f func(int8, int, ArrayInt8) complex64, initial complex64) complex64 {
	var r complex64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt8 receiver
// returns an arrayFloat32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt8) MapFloat32(f func(int8) float32) arrayFloat32 {
	var r = make(arrayFloat32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat32(r)
}

// Reduce with arrayInt8 receiver
func (a arrayInt8) ReduceFloat32(f func(int8, int, ArrayInt8) float32, initial float32) float32 {
	var r float32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt8 receiver
// returns an arrayFloat64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt8) MapFloat64(f func(int8) float64) arrayFloat64 {
	var r = make(arrayFloat64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat64(r)
}

// Reduce with arrayInt8 receiver
func (a arrayInt8) ReduceFloat64(f func(int8, int, ArrayInt8) float64, initial float64) float64 {
	var r float64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt8 receiver
// returns an arrayInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt8) MapInt(f func(int8) int) arrayInt {
	var r = make(arrayInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt(r)
}

// Reduce with arrayInt8 receiver
func (a arrayInt8) ReduceInt(f func(int8, int, ArrayInt8) int, initial int) int {
	var r int = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt8 receiver
// returns an arrayInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt8) MapInt16(f func(int8) int16) arrayInt16 {
	var r = make(arrayInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt16(r)
}

// Reduce with arrayInt8 receiver
func (a arrayInt8) ReduceInt16(f func(int8, int, ArrayInt8) int16, initial int16) int16 {
	var r int16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt8 receiver
// returns an arrayInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt8) MapInt32(f func(int8) int32) arrayInt32 {
	var r = make(arrayInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt32(r)
}

// Reduce with arrayInt8 receiver
func (a arrayInt8) ReduceInt32(f func(int8, int, ArrayInt8) int32, initial int32) int32 {
	var r int32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt8 receiver
// returns an arrayInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt8) MapInt64(f func(int8) int64) arrayInt64 {
	var r = make(arrayInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt64(r)
}

// Reduce with arrayInt8 receiver
func (a arrayInt8) ReduceInt64(f func(int8, int, ArrayInt8) int64, initial int64) int64 {
	var r int64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt8 receiver
// returns an arrayInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt8) MapInt8(f func(int8) int8) arrayInt8 {
	var r = make(arrayInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt8(r)
}

// Reduce with arrayInt8 receiver
func (a arrayInt8) ReduceInt8(f func(int8, int, ArrayInt8) int8, initial int8) int8 {
	var r int8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt8 receiver
// returns an arrayRune resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt8) MapRune(f func(int8) rune) arrayRune {
	var r = make(arrayRune, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayRune(r)
}

// Reduce with arrayInt8 receiver
func (a arrayInt8) ReduceRune(f func(int8, int, ArrayInt8) rune, initial rune) rune {
	var r rune = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt8 receiver
// returns an arrayString resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt8) MapString(f func(int8) string) arrayString {
	var r = make(arrayString, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayString(r)
}

// Reduce with arrayInt8 receiver
func (a arrayInt8) ReduceString(f func(int8, int, ArrayInt8) string, initial string) string {
	var r string = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt8 receiver
// returns an arrayUInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt8) MapUInt(f func(int8) uint) arrayUInt {
	var r = make(arrayUInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt(r)
}

// Reduce with arrayInt8 receiver
func (a arrayInt8) ReduceUInt(f func(int8, int, ArrayInt8) uint, initial uint) uint {
	var r uint = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt8 receiver
// returns an arrayUInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt8) MapUInt16(f func(int8) uint16) arrayUInt16 {
	var r = make(arrayUInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt16(r)
}

// Reduce with arrayInt8 receiver
func (a arrayInt8) ReduceUInt16(f func(int8, int, ArrayInt8) uint16, initial uint16) uint16 {
	var r uint16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt8 receiver
// returns an arrayUInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt8) MapUInt32(f func(int8) uint32) arrayUInt32 {
	var r = make(arrayUInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt32(r)
}

// Reduce with arrayInt8 receiver
func (a arrayInt8) ReduceUInt32(f func(int8, int, ArrayInt8) uint32, initial uint32) uint32 {
	var r uint32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt8 receiver
// returns an arrayUInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt8) MapUInt64(f func(int8) uint64) arrayUInt64 {
	var r = make(arrayUInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt64(r)
}

// Reduce with arrayInt8 receiver
func (a arrayInt8) ReduceUInt64(f func(int8, int, ArrayInt8) uint64, initial uint64) uint64 {
	var r uint64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt8 receiver
// returns an arrayUInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt8) MapUInt8(f func(int8) uint8) arrayUInt8 {
	var r = make(arrayUInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt8(r)
}

// Reduce with arrayInt8 receiver
func (a arrayInt8) ReduceUInt8(f func(int8, int, ArrayInt8) uint8, initial uint8) uint8 {
	var r uint8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayInt8 receiver
// returns an arrayUintPtr resulting from apllying its function argument
// to every items of the receiver
func (a arrayInt8) MapUintPtr(f func(int8) uintptr) arrayUintPtr {
	var r = make(arrayUintPtr, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUintPtr(r)
}

// Reduce with arrayInt8 receiver
func (a arrayInt8) ReduceUintPtr(f func(int8, int, ArrayInt8) uintptr, initial uintptr) uintptr {
	var r uintptr = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}

 // end of Int8



// arrayRune is a type alias for []rune
type arrayRune []rune

// ArrayRune makes an arry off of its arguments of type rune 
func ArrayRuneFrom(a ...rune) arrayRune {
	return arrayRune(a)
}

// First with arrayRune receiver
// returns first element in a ResultRune container
func (a arrayRune) First() ResultRune {
	if len(a) > 0 {
		return OkRune(a[0])
	}
	return ErrRune("Out Of Bound Array Access")
}

// Slice with arrayRune receiver
// returns itself as []rune
func (a arrayRune) Slice() []rune {
	return []rune(a)
}

// Each with arrayRune receiver
// applies its function argument on each item of the array
func (a arrayRune) Each(f func(rune)) {
	for _, e := range a { f(e) }
}

// Concat with arrayRune receiver
// returns the concatenation of itself and  its argument array 
func (a arrayRune) Concat(xs ArrayRune) arrayRune {
	return arrayRune(append(a.Slice(), xs.Slice()...))
}


// Map with arrayRune receiver
// returns an arrayBool resulting from apllying its function argument
// to every items of the receiver
func (a arrayRune) MapBool(f func(rune) bool) arrayBool {
	var r = make(arrayBool, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayBool(r)
}

// Reduce with arrayRune receiver
func (a arrayRune) ReduceBool(f func(rune, int, ArrayRune) bool, initial bool) bool {
	var r bool = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayRune receiver
// returns an arrayByte resulting from apllying its function argument
// to every items of the receiver
func (a arrayRune) MapByte(f func(rune) byte) arrayByte {
	var r = make(arrayByte, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayByte(r)
}

// Reduce with arrayRune receiver
func (a arrayRune) ReduceByte(f func(rune, int, ArrayRune) byte, initial byte) byte {
	var r byte = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayRune receiver
// returns an arrayComplex128 resulting from apllying its function argument
// to every items of the receiver
func (a arrayRune) MapComplex128(f func(rune) complex128) arrayComplex128 {
	var r = make(arrayComplex128, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex128(r)
}

// Reduce with arrayRune receiver
func (a arrayRune) ReduceComplex128(f func(rune, int, ArrayRune) complex128, initial complex128) complex128 {
	var r complex128 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayRune receiver
// returns an arrayComplex64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayRune) MapComplex64(f func(rune) complex64) arrayComplex64 {
	var r = make(arrayComplex64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex64(r)
}

// Reduce with arrayRune receiver
func (a arrayRune) ReduceComplex64(f func(rune, int, ArrayRune) complex64, initial complex64) complex64 {
	var r complex64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayRune receiver
// returns an arrayFloat32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayRune) MapFloat32(f func(rune) float32) arrayFloat32 {
	var r = make(arrayFloat32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat32(r)
}

// Reduce with arrayRune receiver
func (a arrayRune) ReduceFloat32(f func(rune, int, ArrayRune) float32, initial float32) float32 {
	var r float32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayRune receiver
// returns an arrayFloat64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayRune) MapFloat64(f func(rune) float64) arrayFloat64 {
	var r = make(arrayFloat64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat64(r)
}

// Reduce with arrayRune receiver
func (a arrayRune) ReduceFloat64(f func(rune, int, ArrayRune) float64, initial float64) float64 {
	var r float64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayRune receiver
// returns an arrayInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayRune) MapInt(f func(rune) int) arrayInt {
	var r = make(arrayInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt(r)
}

// Reduce with arrayRune receiver
func (a arrayRune) ReduceInt(f func(rune, int, ArrayRune) int, initial int) int {
	var r int = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayRune receiver
// returns an arrayInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayRune) MapInt16(f func(rune) int16) arrayInt16 {
	var r = make(arrayInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt16(r)
}

// Reduce with arrayRune receiver
func (a arrayRune) ReduceInt16(f func(rune, int, ArrayRune) int16, initial int16) int16 {
	var r int16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayRune receiver
// returns an arrayInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayRune) MapInt32(f func(rune) int32) arrayInt32 {
	var r = make(arrayInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt32(r)
}

// Reduce with arrayRune receiver
func (a arrayRune) ReduceInt32(f func(rune, int, ArrayRune) int32, initial int32) int32 {
	var r int32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayRune receiver
// returns an arrayInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayRune) MapInt64(f func(rune) int64) arrayInt64 {
	var r = make(arrayInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt64(r)
}

// Reduce with arrayRune receiver
func (a arrayRune) ReduceInt64(f func(rune, int, ArrayRune) int64, initial int64) int64 {
	var r int64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayRune receiver
// returns an arrayInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayRune) MapInt8(f func(rune) int8) arrayInt8 {
	var r = make(arrayInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt8(r)
}

// Reduce with arrayRune receiver
func (a arrayRune) ReduceInt8(f func(rune, int, ArrayRune) int8, initial int8) int8 {
	var r int8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayRune receiver
// returns an arrayRune resulting from apllying its function argument
// to every items of the receiver
func (a arrayRune) MapRune(f func(rune) rune) arrayRune {
	var r = make(arrayRune, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayRune(r)
}

// Reduce with arrayRune receiver
func (a arrayRune) ReduceRune(f func(rune, int, ArrayRune) rune, initial rune) rune {
	var r rune = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayRune receiver
// returns an arrayString resulting from apllying its function argument
// to every items of the receiver
func (a arrayRune) MapString(f func(rune) string) arrayString {
	var r = make(arrayString, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayString(r)
}

// Reduce with arrayRune receiver
func (a arrayRune) ReduceString(f func(rune, int, ArrayRune) string, initial string) string {
	var r string = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayRune receiver
// returns an arrayUInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayRune) MapUInt(f func(rune) uint) arrayUInt {
	var r = make(arrayUInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt(r)
}

// Reduce with arrayRune receiver
func (a arrayRune) ReduceUInt(f func(rune, int, ArrayRune) uint, initial uint) uint {
	var r uint = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayRune receiver
// returns an arrayUInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayRune) MapUInt16(f func(rune) uint16) arrayUInt16 {
	var r = make(arrayUInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt16(r)
}

// Reduce with arrayRune receiver
func (a arrayRune) ReduceUInt16(f func(rune, int, ArrayRune) uint16, initial uint16) uint16 {
	var r uint16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayRune receiver
// returns an arrayUInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayRune) MapUInt32(f func(rune) uint32) arrayUInt32 {
	var r = make(arrayUInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt32(r)
}

// Reduce with arrayRune receiver
func (a arrayRune) ReduceUInt32(f func(rune, int, ArrayRune) uint32, initial uint32) uint32 {
	var r uint32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayRune receiver
// returns an arrayUInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayRune) MapUInt64(f func(rune) uint64) arrayUInt64 {
	var r = make(arrayUInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt64(r)
}

// Reduce with arrayRune receiver
func (a arrayRune) ReduceUInt64(f func(rune, int, ArrayRune) uint64, initial uint64) uint64 {
	var r uint64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayRune receiver
// returns an arrayUInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayRune) MapUInt8(f func(rune) uint8) arrayUInt8 {
	var r = make(arrayUInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt8(r)
}

// Reduce with arrayRune receiver
func (a arrayRune) ReduceUInt8(f func(rune, int, ArrayRune) uint8, initial uint8) uint8 {
	var r uint8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayRune receiver
// returns an arrayUintPtr resulting from apllying its function argument
// to every items of the receiver
func (a arrayRune) MapUintPtr(f func(rune) uintptr) arrayUintPtr {
	var r = make(arrayUintPtr, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUintPtr(r)
}

// Reduce with arrayRune receiver
func (a arrayRune) ReduceUintPtr(f func(rune, int, ArrayRune) uintptr, initial uintptr) uintptr {
	var r uintptr = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}

 // end of Rune



// arrayString is a type alias for []string
type arrayString []string

// ArrayString makes an arry off of its arguments of type string 
func ArrayStringFrom(a ...string) arrayString {
	return arrayString(a)
}

// First with arrayString receiver
// returns first element in a ResultString container
func (a arrayString) First() ResultString {
	if len(a) > 0 {
		return OkString(a[0])
	}
	return ErrString("Out Of Bound Array Access")
}

// Slice with arrayString receiver
// returns itself as []string
func (a arrayString) Slice() []string {
	return []string(a)
}

// Each with arrayString receiver
// applies its function argument on each item of the array
func (a arrayString) Each(f func(string)) {
	for _, e := range a { f(e) }
}

// Concat with arrayString receiver
// returns the concatenation of itself and  its argument array 
func (a arrayString) Concat(xs ArrayString) arrayString {
	return arrayString(append(a.Slice(), xs.Slice()...))
}


// Map with arrayString receiver
// returns an arrayBool resulting from apllying its function argument
// to every items of the receiver
func (a arrayString) MapBool(f func(string) bool) arrayBool {
	var r = make(arrayBool, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayBool(r)
}

// Reduce with arrayString receiver
func (a arrayString) ReduceBool(f func(string, int, ArrayString) bool, initial bool) bool {
	var r bool = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayString receiver
// returns an arrayByte resulting from apllying its function argument
// to every items of the receiver
func (a arrayString) MapByte(f func(string) byte) arrayByte {
	var r = make(arrayByte, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayByte(r)
}

// Reduce with arrayString receiver
func (a arrayString) ReduceByte(f func(string, int, ArrayString) byte, initial byte) byte {
	var r byte = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayString receiver
// returns an arrayComplex128 resulting from apllying its function argument
// to every items of the receiver
func (a arrayString) MapComplex128(f func(string) complex128) arrayComplex128 {
	var r = make(arrayComplex128, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex128(r)
}

// Reduce with arrayString receiver
func (a arrayString) ReduceComplex128(f func(string, int, ArrayString) complex128, initial complex128) complex128 {
	var r complex128 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayString receiver
// returns an arrayComplex64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayString) MapComplex64(f func(string) complex64) arrayComplex64 {
	var r = make(arrayComplex64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex64(r)
}

// Reduce with arrayString receiver
func (a arrayString) ReduceComplex64(f func(string, int, ArrayString) complex64, initial complex64) complex64 {
	var r complex64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayString receiver
// returns an arrayFloat32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayString) MapFloat32(f func(string) float32) arrayFloat32 {
	var r = make(arrayFloat32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat32(r)
}

// Reduce with arrayString receiver
func (a arrayString) ReduceFloat32(f func(string, int, ArrayString) float32, initial float32) float32 {
	var r float32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayString receiver
// returns an arrayFloat64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayString) MapFloat64(f func(string) float64) arrayFloat64 {
	var r = make(arrayFloat64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat64(r)
}

// Reduce with arrayString receiver
func (a arrayString) ReduceFloat64(f func(string, int, ArrayString) float64, initial float64) float64 {
	var r float64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayString receiver
// returns an arrayInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayString) MapInt(f func(string) int) arrayInt {
	var r = make(arrayInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt(r)
}

// Reduce with arrayString receiver
func (a arrayString) ReduceInt(f func(string, int, ArrayString) int, initial int) int {
	var r int = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayString receiver
// returns an arrayInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayString) MapInt16(f func(string) int16) arrayInt16 {
	var r = make(arrayInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt16(r)
}

// Reduce with arrayString receiver
func (a arrayString) ReduceInt16(f func(string, int, ArrayString) int16, initial int16) int16 {
	var r int16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayString receiver
// returns an arrayInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayString) MapInt32(f func(string) int32) arrayInt32 {
	var r = make(arrayInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt32(r)
}

// Reduce with arrayString receiver
func (a arrayString) ReduceInt32(f func(string, int, ArrayString) int32, initial int32) int32 {
	var r int32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayString receiver
// returns an arrayInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayString) MapInt64(f func(string) int64) arrayInt64 {
	var r = make(arrayInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt64(r)
}

// Reduce with arrayString receiver
func (a arrayString) ReduceInt64(f func(string, int, ArrayString) int64, initial int64) int64 {
	var r int64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayString receiver
// returns an arrayInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayString) MapInt8(f func(string) int8) arrayInt8 {
	var r = make(arrayInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt8(r)
}

// Reduce with arrayString receiver
func (a arrayString) ReduceInt8(f func(string, int, ArrayString) int8, initial int8) int8 {
	var r int8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayString receiver
// returns an arrayRune resulting from apllying its function argument
// to every items of the receiver
func (a arrayString) MapRune(f func(string) rune) arrayRune {
	var r = make(arrayRune, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayRune(r)
}

// Reduce with arrayString receiver
func (a arrayString) ReduceRune(f func(string, int, ArrayString) rune, initial rune) rune {
	var r rune = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayString receiver
// returns an arrayString resulting from apllying its function argument
// to every items of the receiver
func (a arrayString) MapString(f func(string) string) arrayString {
	var r = make(arrayString, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayString(r)
}

// Reduce with arrayString receiver
func (a arrayString) ReduceString(f func(string, int, ArrayString) string, initial string) string {
	var r string = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayString receiver
// returns an arrayUInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayString) MapUInt(f func(string) uint) arrayUInt {
	var r = make(arrayUInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt(r)
}

// Reduce with arrayString receiver
func (a arrayString) ReduceUInt(f func(string, int, ArrayString) uint, initial uint) uint {
	var r uint = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayString receiver
// returns an arrayUInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayString) MapUInt16(f func(string) uint16) arrayUInt16 {
	var r = make(arrayUInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt16(r)
}

// Reduce with arrayString receiver
func (a arrayString) ReduceUInt16(f func(string, int, ArrayString) uint16, initial uint16) uint16 {
	var r uint16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayString receiver
// returns an arrayUInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayString) MapUInt32(f func(string) uint32) arrayUInt32 {
	var r = make(arrayUInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt32(r)
}

// Reduce with arrayString receiver
func (a arrayString) ReduceUInt32(f func(string, int, ArrayString) uint32, initial uint32) uint32 {
	var r uint32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayString receiver
// returns an arrayUInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayString) MapUInt64(f func(string) uint64) arrayUInt64 {
	var r = make(arrayUInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt64(r)
}

// Reduce with arrayString receiver
func (a arrayString) ReduceUInt64(f func(string, int, ArrayString) uint64, initial uint64) uint64 {
	var r uint64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayString receiver
// returns an arrayUInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayString) MapUInt8(f func(string) uint8) arrayUInt8 {
	var r = make(arrayUInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt8(r)
}

// Reduce with arrayString receiver
func (a arrayString) ReduceUInt8(f func(string, int, ArrayString) uint8, initial uint8) uint8 {
	var r uint8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayString receiver
// returns an arrayUintPtr resulting from apllying its function argument
// to every items of the receiver
func (a arrayString) MapUintPtr(f func(string) uintptr) arrayUintPtr {
	var r = make(arrayUintPtr, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUintPtr(r)
}

// Reduce with arrayString receiver
func (a arrayString) ReduceUintPtr(f func(string, int, ArrayString) uintptr, initial uintptr) uintptr {
	var r uintptr = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}

 // end of String



// arrayUInt is a type alias for []uint
type arrayUInt []uint

// ArrayUInt makes an arry off of its arguments of type uint 
func ArrayUIntFrom(a ...uint) arrayUInt {
	return arrayUInt(a)
}

// First with arrayUInt receiver
// returns first element in a ResultUInt container
func (a arrayUInt) First() ResultUInt {
	if len(a) > 0 {
		return OkUInt(a[0])
	}
	return ErrUInt("Out Of Bound Array Access")
}

// Slice with arrayUInt receiver
// returns itself as []uint
func (a arrayUInt) Slice() []uint {
	return []uint(a)
}

// Each with arrayUInt receiver
// applies its function argument on each item of the array
func (a arrayUInt) Each(f func(uint)) {
	for _, e := range a { f(e) }
}

// Concat with arrayUInt receiver
// returns the concatenation of itself and  its argument array 
func (a arrayUInt) Concat(xs ArrayUInt) arrayUInt {
	return arrayUInt(append(a.Slice(), xs.Slice()...))
}


// Map with arrayUInt receiver
// returns an arrayBool resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt) MapBool(f func(uint) bool) arrayBool {
	var r = make(arrayBool, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayBool(r)
}

// Reduce with arrayUInt receiver
func (a arrayUInt) ReduceBool(f func(uint, int, ArrayUInt) bool, initial bool) bool {
	var r bool = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt receiver
// returns an arrayByte resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt) MapByte(f func(uint) byte) arrayByte {
	var r = make(arrayByte, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayByte(r)
}

// Reduce with arrayUInt receiver
func (a arrayUInt) ReduceByte(f func(uint, int, ArrayUInt) byte, initial byte) byte {
	var r byte = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt receiver
// returns an arrayComplex128 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt) MapComplex128(f func(uint) complex128) arrayComplex128 {
	var r = make(arrayComplex128, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex128(r)
}

// Reduce with arrayUInt receiver
func (a arrayUInt) ReduceComplex128(f func(uint, int, ArrayUInt) complex128, initial complex128) complex128 {
	var r complex128 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt receiver
// returns an arrayComplex64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt) MapComplex64(f func(uint) complex64) arrayComplex64 {
	var r = make(arrayComplex64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex64(r)
}

// Reduce with arrayUInt receiver
func (a arrayUInt) ReduceComplex64(f func(uint, int, ArrayUInt) complex64, initial complex64) complex64 {
	var r complex64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt receiver
// returns an arrayFloat32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt) MapFloat32(f func(uint) float32) arrayFloat32 {
	var r = make(arrayFloat32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat32(r)
}

// Reduce with arrayUInt receiver
func (a arrayUInt) ReduceFloat32(f func(uint, int, ArrayUInt) float32, initial float32) float32 {
	var r float32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt receiver
// returns an arrayFloat64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt) MapFloat64(f func(uint) float64) arrayFloat64 {
	var r = make(arrayFloat64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat64(r)
}

// Reduce with arrayUInt receiver
func (a arrayUInt) ReduceFloat64(f func(uint, int, ArrayUInt) float64, initial float64) float64 {
	var r float64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt receiver
// returns an arrayInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt) MapInt(f func(uint) int) arrayInt {
	var r = make(arrayInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt(r)
}

// Reduce with arrayUInt receiver
func (a arrayUInt) ReduceInt(f func(uint, int, ArrayUInt) int, initial int) int {
	var r int = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt receiver
// returns an arrayInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt) MapInt16(f func(uint) int16) arrayInt16 {
	var r = make(arrayInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt16(r)
}

// Reduce with arrayUInt receiver
func (a arrayUInt) ReduceInt16(f func(uint, int, ArrayUInt) int16, initial int16) int16 {
	var r int16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt receiver
// returns an arrayInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt) MapInt32(f func(uint) int32) arrayInt32 {
	var r = make(arrayInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt32(r)
}

// Reduce with arrayUInt receiver
func (a arrayUInt) ReduceInt32(f func(uint, int, ArrayUInt) int32, initial int32) int32 {
	var r int32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt receiver
// returns an arrayInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt) MapInt64(f func(uint) int64) arrayInt64 {
	var r = make(arrayInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt64(r)
}

// Reduce with arrayUInt receiver
func (a arrayUInt) ReduceInt64(f func(uint, int, ArrayUInt) int64, initial int64) int64 {
	var r int64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt receiver
// returns an arrayInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt) MapInt8(f func(uint) int8) arrayInt8 {
	var r = make(arrayInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt8(r)
}

// Reduce with arrayUInt receiver
func (a arrayUInt) ReduceInt8(f func(uint, int, ArrayUInt) int8, initial int8) int8 {
	var r int8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt receiver
// returns an arrayRune resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt) MapRune(f func(uint) rune) arrayRune {
	var r = make(arrayRune, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayRune(r)
}

// Reduce with arrayUInt receiver
func (a arrayUInt) ReduceRune(f func(uint, int, ArrayUInt) rune, initial rune) rune {
	var r rune = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt receiver
// returns an arrayString resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt) MapString(f func(uint) string) arrayString {
	var r = make(arrayString, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayString(r)
}

// Reduce with arrayUInt receiver
func (a arrayUInt) ReduceString(f func(uint, int, ArrayUInt) string, initial string) string {
	var r string = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt receiver
// returns an arrayUInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt) MapUInt(f func(uint) uint) arrayUInt {
	var r = make(arrayUInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt(r)
}

// Reduce with arrayUInt receiver
func (a arrayUInt) ReduceUInt(f func(uint, int, ArrayUInt) uint, initial uint) uint {
	var r uint = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt receiver
// returns an arrayUInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt) MapUInt16(f func(uint) uint16) arrayUInt16 {
	var r = make(arrayUInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt16(r)
}

// Reduce with arrayUInt receiver
func (a arrayUInt) ReduceUInt16(f func(uint, int, ArrayUInt) uint16, initial uint16) uint16 {
	var r uint16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt receiver
// returns an arrayUInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt) MapUInt32(f func(uint) uint32) arrayUInt32 {
	var r = make(arrayUInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt32(r)
}

// Reduce with arrayUInt receiver
func (a arrayUInt) ReduceUInt32(f func(uint, int, ArrayUInt) uint32, initial uint32) uint32 {
	var r uint32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt receiver
// returns an arrayUInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt) MapUInt64(f func(uint) uint64) arrayUInt64 {
	var r = make(arrayUInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt64(r)
}

// Reduce with arrayUInt receiver
func (a arrayUInt) ReduceUInt64(f func(uint, int, ArrayUInt) uint64, initial uint64) uint64 {
	var r uint64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt receiver
// returns an arrayUInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt) MapUInt8(f func(uint) uint8) arrayUInt8 {
	var r = make(arrayUInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt8(r)
}

// Reduce with arrayUInt receiver
func (a arrayUInt) ReduceUInt8(f func(uint, int, ArrayUInt) uint8, initial uint8) uint8 {
	var r uint8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt receiver
// returns an arrayUintPtr resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt) MapUintPtr(f func(uint) uintptr) arrayUintPtr {
	var r = make(arrayUintPtr, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUintPtr(r)
}

// Reduce with arrayUInt receiver
func (a arrayUInt) ReduceUintPtr(f func(uint, int, ArrayUInt) uintptr, initial uintptr) uintptr {
	var r uintptr = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}

 // end of UInt



// arrayUInt16 is a type alias for []uint16
type arrayUInt16 []uint16

// ArrayUInt16 makes an arry off of its arguments of type uint16 
func ArrayUInt16From(a ...uint16) arrayUInt16 {
	return arrayUInt16(a)
}

// First with arrayUInt16 receiver
// returns first element in a ResultUInt16 container
func (a arrayUInt16) First() ResultUInt16 {
	if len(a) > 0 {
		return OkUInt16(a[0])
	}
	return ErrUInt16("Out Of Bound Array Access")
}

// Slice with arrayUInt16 receiver
// returns itself as []uint16
func (a arrayUInt16) Slice() []uint16 {
	return []uint16(a)
}

// Each with arrayUInt16 receiver
// applies its function argument on each item of the array
func (a arrayUInt16) Each(f func(uint16)) {
	for _, e := range a { f(e) }
}

// Concat with arrayUInt16 receiver
// returns the concatenation of itself and  its argument array 
func (a arrayUInt16) Concat(xs ArrayUInt16) arrayUInt16 {
	return arrayUInt16(append(a.Slice(), xs.Slice()...))
}


// Map with arrayUInt16 receiver
// returns an arrayBool resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt16) MapBool(f func(uint16) bool) arrayBool {
	var r = make(arrayBool, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayBool(r)
}

// Reduce with arrayUInt16 receiver
func (a arrayUInt16) ReduceBool(f func(uint16, int, ArrayUInt16) bool, initial bool) bool {
	var r bool = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt16 receiver
// returns an arrayByte resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt16) MapByte(f func(uint16) byte) arrayByte {
	var r = make(arrayByte, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayByte(r)
}

// Reduce with arrayUInt16 receiver
func (a arrayUInt16) ReduceByte(f func(uint16, int, ArrayUInt16) byte, initial byte) byte {
	var r byte = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt16 receiver
// returns an arrayComplex128 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt16) MapComplex128(f func(uint16) complex128) arrayComplex128 {
	var r = make(arrayComplex128, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex128(r)
}

// Reduce with arrayUInt16 receiver
func (a arrayUInt16) ReduceComplex128(f func(uint16, int, ArrayUInt16) complex128, initial complex128) complex128 {
	var r complex128 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt16 receiver
// returns an arrayComplex64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt16) MapComplex64(f func(uint16) complex64) arrayComplex64 {
	var r = make(arrayComplex64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex64(r)
}

// Reduce with arrayUInt16 receiver
func (a arrayUInt16) ReduceComplex64(f func(uint16, int, ArrayUInt16) complex64, initial complex64) complex64 {
	var r complex64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt16 receiver
// returns an arrayFloat32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt16) MapFloat32(f func(uint16) float32) arrayFloat32 {
	var r = make(arrayFloat32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat32(r)
}

// Reduce with arrayUInt16 receiver
func (a arrayUInt16) ReduceFloat32(f func(uint16, int, ArrayUInt16) float32, initial float32) float32 {
	var r float32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt16 receiver
// returns an arrayFloat64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt16) MapFloat64(f func(uint16) float64) arrayFloat64 {
	var r = make(arrayFloat64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat64(r)
}

// Reduce with arrayUInt16 receiver
func (a arrayUInt16) ReduceFloat64(f func(uint16, int, ArrayUInt16) float64, initial float64) float64 {
	var r float64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt16 receiver
// returns an arrayInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt16) MapInt(f func(uint16) int) arrayInt {
	var r = make(arrayInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt(r)
}

// Reduce with arrayUInt16 receiver
func (a arrayUInt16) ReduceInt(f func(uint16, int, ArrayUInt16) int, initial int) int {
	var r int = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt16 receiver
// returns an arrayInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt16) MapInt16(f func(uint16) int16) arrayInt16 {
	var r = make(arrayInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt16(r)
}

// Reduce with arrayUInt16 receiver
func (a arrayUInt16) ReduceInt16(f func(uint16, int, ArrayUInt16) int16, initial int16) int16 {
	var r int16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt16 receiver
// returns an arrayInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt16) MapInt32(f func(uint16) int32) arrayInt32 {
	var r = make(arrayInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt32(r)
}

// Reduce with arrayUInt16 receiver
func (a arrayUInt16) ReduceInt32(f func(uint16, int, ArrayUInt16) int32, initial int32) int32 {
	var r int32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt16 receiver
// returns an arrayInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt16) MapInt64(f func(uint16) int64) arrayInt64 {
	var r = make(arrayInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt64(r)
}

// Reduce with arrayUInt16 receiver
func (a arrayUInt16) ReduceInt64(f func(uint16, int, ArrayUInt16) int64, initial int64) int64 {
	var r int64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt16 receiver
// returns an arrayInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt16) MapInt8(f func(uint16) int8) arrayInt8 {
	var r = make(arrayInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt8(r)
}

// Reduce with arrayUInt16 receiver
func (a arrayUInt16) ReduceInt8(f func(uint16, int, ArrayUInt16) int8, initial int8) int8 {
	var r int8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt16 receiver
// returns an arrayRune resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt16) MapRune(f func(uint16) rune) arrayRune {
	var r = make(arrayRune, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayRune(r)
}

// Reduce with arrayUInt16 receiver
func (a arrayUInt16) ReduceRune(f func(uint16, int, ArrayUInt16) rune, initial rune) rune {
	var r rune = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt16 receiver
// returns an arrayString resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt16) MapString(f func(uint16) string) arrayString {
	var r = make(arrayString, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayString(r)
}

// Reduce with arrayUInt16 receiver
func (a arrayUInt16) ReduceString(f func(uint16, int, ArrayUInt16) string, initial string) string {
	var r string = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt16 receiver
// returns an arrayUInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt16) MapUInt(f func(uint16) uint) arrayUInt {
	var r = make(arrayUInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt(r)
}

// Reduce with arrayUInt16 receiver
func (a arrayUInt16) ReduceUInt(f func(uint16, int, ArrayUInt16) uint, initial uint) uint {
	var r uint = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt16 receiver
// returns an arrayUInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt16) MapUInt16(f func(uint16) uint16) arrayUInt16 {
	var r = make(arrayUInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt16(r)
}

// Reduce with arrayUInt16 receiver
func (a arrayUInt16) ReduceUInt16(f func(uint16, int, ArrayUInt16) uint16, initial uint16) uint16 {
	var r uint16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt16 receiver
// returns an arrayUInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt16) MapUInt32(f func(uint16) uint32) arrayUInt32 {
	var r = make(arrayUInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt32(r)
}

// Reduce with arrayUInt16 receiver
func (a arrayUInt16) ReduceUInt32(f func(uint16, int, ArrayUInt16) uint32, initial uint32) uint32 {
	var r uint32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt16 receiver
// returns an arrayUInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt16) MapUInt64(f func(uint16) uint64) arrayUInt64 {
	var r = make(arrayUInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt64(r)
}

// Reduce with arrayUInt16 receiver
func (a arrayUInt16) ReduceUInt64(f func(uint16, int, ArrayUInt16) uint64, initial uint64) uint64 {
	var r uint64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt16 receiver
// returns an arrayUInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt16) MapUInt8(f func(uint16) uint8) arrayUInt8 {
	var r = make(arrayUInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt8(r)
}

// Reduce with arrayUInt16 receiver
func (a arrayUInt16) ReduceUInt8(f func(uint16, int, ArrayUInt16) uint8, initial uint8) uint8 {
	var r uint8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt16 receiver
// returns an arrayUintPtr resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt16) MapUintPtr(f func(uint16) uintptr) arrayUintPtr {
	var r = make(arrayUintPtr, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUintPtr(r)
}

// Reduce with arrayUInt16 receiver
func (a arrayUInt16) ReduceUintPtr(f func(uint16, int, ArrayUInt16) uintptr, initial uintptr) uintptr {
	var r uintptr = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}

 // end of UInt16



// arrayUInt32 is a type alias for []uint32
type arrayUInt32 []uint32

// ArrayUInt32 makes an arry off of its arguments of type uint32 
func ArrayUInt32From(a ...uint32) arrayUInt32 {
	return arrayUInt32(a)
}

// First with arrayUInt32 receiver
// returns first element in a ResultUInt32 container
func (a arrayUInt32) First() ResultUInt32 {
	if len(a) > 0 {
		return OkUInt32(a[0])
	}
	return ErrUInt32("Out Of Bound Array Access")
}

// Slice with arrayUInt32 receiver
// returns itself as []uint32
func (a arrayUInt32) Slice() []uint32 {
	return []uint32(a)
}

// Each with arrayUInt32 receiver
// applies its function argument on each item of the array
func (a arrayUInt32) Each(f func(uint32)) {
	for _, e := range a { f(e) }
}

// Concat with arrayUInt32 receiver
// returns the concatenation of itself and  its argument array 
func (a arrayUInt32) Concat(xs ArrayUInt32) arrayUInt32 {
	return arrayUInt32(append(a.Slice(), xs.Slice()...))
}


// Map with arrayUInt32 receiver
// returns an arrayBool resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt32) MapBool(f func(uint32) bool) arrayBool {
	var r = make(arrayBool, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayBool(r)
}

// Reduce with arrayUInt32 receiver
func (a arrayUInt32) ReduceBool(f func(uint32, int, ArrayUInt32) bool, initial bool) bool {
	var r bool = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt32 receiver
// returns an arrayByte resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt32) MapByte(f func(uint32) byte) arrayByte {
	var r = make(arrayByte, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayByte(r)
}

// Reduce with arrayUInt32 receiver
func (a arrayUInt32) ReduceByte(f func(uint32, int, ArrayUInt32) byte, initial byte) byte {
	var r byte = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt32 receiver
// returns an arrayComplex128 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt32) MapComplex128(f func(uint32) complex128) arrayComplex128 {
	var r = make(arrayComplex128, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex128(r)
}

// Reduce with arrayUInt32 receiver
func (a arrayUInt32) ReduceComplex128(f func(uint32, int, ArrayUInt32) complex128, initial complex128) complex128 {
	var r complex128 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt32 receiver
// returns an arrayComplex64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt32) MapComplex64(f func(uint32) complex64) arrayComplex64 {
	var r = make(arrayComplex64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex64(r)
}

// Reduce with arrayUInt32 receiver
func (a arrayUInt32) ReduceComplex64(f func(uint32, int, ArrayUInt32) complex64, initial complex64) complex64 {
	var r complex64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt32 receiver
// returns an arrayFloat32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt32) MapFloat32(f func(uint32) float32) arrayFloat32 {
	var r = make(arrayFloat32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat32(r)
}

// Reduce with arrayUInt32 receiver
func (a arrayUInt32) ReduceFloat32(f func(uint32, int, ArrayUInt32) float32, initial float32) float32 {
	var r float32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt32 receiver
// returns an arrayFloat64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt32) MapFloat64(f func(uint32) float64) arrayFloat64 {
	var r = make(arrayFloat64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat64(r)
}

// Reduce with arrayUInt32 receiver
func (a arrayUInt32) ReduceFloat64(f func(uint32, int, ArrayUInt32) float64, initial float64) float64 {
	var r float64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt32 receiver
// returns an arrayInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt32) MapInt(f func(uint32) int) arrayInt {
	var r = make(arrayInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt(r)
}

// Reduce with arrayUInt32 receiver
func (a arrayUInt32) ReduceInt(f func(uint32, int, ArrayUInt32) int, initial int) int {
	var r int = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt32 receiver
// returns an arrayInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt32) MapInt16(f func(uint32) int16) arrayInt16 {
	var r = make(arrayInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt16(r)
}

// Reduce with arrayUInt32 receiver
func (a arrayUInt32) ReduceInt16(f func(uint32, int, ArrayUInt32) int16, initial int16) int16 {
	var r int16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt32 receiver
// returns an arrayInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt32) MapInt32(f func(uint32) int32) arrayInt32 {
	var r = make(arrayInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt32(r)
}

// Reduce with arrayUInt32 receiver
func (a arrayUInt32) ReduceInt32(f func(uint32, int, ArrayUInt32) int32, initial int32) int32 {
	var r int32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt32 receiver
// returns an arrayInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt32) MapInt64(f func(uint32) int64) arrayInt64 {
	var r = make(arrayInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt64(r)
}

// Reduce with arrayUInt32 receiver
func (a arrayUInt32) ReduceInt64(f func(uint32, int, ArrayUInt32) int64, initial int64) int64 {
	var r int64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt32 receiver
// returns an arrayInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt32) MapInt8(f func(uint32) int8) arrayInt8 {
	var r = make(arrayInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt8(r)
}

// Reduce with arrayUInt32 receiver
func (a arrayUInt32) ReduceInt8(f func(uint32, int, ArrayUInt32) int8, initial int8) int8 {
	var r int8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt32 receiver
// returns an arrayRune resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt32) MapRune(f func(uint32) rune) arrayRune {
	var r = make(arrayRune, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayRune(r)
}

// Reduce with arrayUInt32 receiver
func (a arrayUInt32) ReduceRune(f func(uint32, int, ArrayUInt32) rune, initial rune) rune {
	var r rune = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt32 receiver
// returns an arrayString resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt32) MapString(f func(uint32) string) arrayString {
	var r = make(arrayString, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayString(r)
}

// Reduce with arrayUInt32 receiver
func (a arrayUInt32) ReduceString(f func(uint32, int, ArrayUInt32) string, initial string) string {
	var r string = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt32 receiver
// returns an arrayUInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt32) MapUInt(f func(uint32) uint) arrayUInt {
	var r = make(arrayUInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt(r)
}

// Reduce with arrayUInt32 receiver
func (a arrayUInt32) ReduceUInt(f func(uint32, int, ArrayUInt32) uint, initial uint) uint {
	var r uint = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt32 receiver
// returns an arrayUInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt32) MapUInt16(f func(uint32) uint16) arrayUInt16 {
	var r = make(arrayUInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt16(r)
}

// Reduce with arrayUInt32 receiver
func (a arrayUInt32) ReduceUInt16(f func(uint32, int, ArrayUInt32) uint16, initial uint16) uint16 {
	var r uint16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt32 receiver
// returns an arrayUInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt32) MapUInt32(f func(uint32) uint32) arrayUInt32 {
	var r = make(arrayUInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt32(r)
}

// Reduce with arrayUInt32 receiver
func (a arrayUInt32) ReduceUInt32(f func(uint32, int, ArrayUInt32) uint32, initial uint32) uint32 {
	var r uint32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt32 receiver
// returns an arrayUInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt32) MapUInt64(f func(uint32) uint64) arrayUInt64 {
	var r = make(arrayUInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt64(r)
}

// Reduce with arrayUInt32 receiver
func (a arrayUInt32) ReduceUInt64(f func(uint32, int, ArrayUInt32) uint64, initial uint64) uint64 {
	var r uint64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt32 receiver
// returns an arrayUInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt32) MapUInt8(f func(uint32) uint8) arrayUInt8 {
	var r = make(arrayUInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt8(r)
}

// Reduce with arrayUInt32 receiver
func (a arrayUInt32) ReduceUInt8(f func(uint32, int, ArrayUInt32) uint8, initial uint8) uint8 {
	var r uint8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt32 receiver
// returns an arrayUintPtr resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt32) MapUintPtr(f func(uint32) uintptr) arrayUintPtr {
	var r = make(arrayUintPtr, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUintPtr(r)
}

// Reduce with arrayUInt32 receiver
func (a arrayUInt32) ReduceUintPtr(f func(uint32, int, ArrayUInt32) uintptr, initial uintptr) uintptr {
	var r uintptr = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}

 // end of UInt32



// arrayUInt64 is a type alias for []uint64
type arrayUInt64 []uint64

// ArrayUInt64 makes an arry off of its arguments of type uint64 
func ArrayUInt64From(a ...uint64) arrayUInt64 {
	return arrayUInt64(a)
}

// First with arrayUInt64 receiver
// returns first element in a ResultUInt64 container
func (a arrayUInt64) First() ResultUInt64 {
	if len(a) > 0 {
		return OkUInt64(a[0])
	}
	return ErrUInt64("Out Of Bound Array Access")
}

// Slice with arrayUInt64 receiver
// returns itself as []uint64
func (a arrayUInt64) Slice() []uint64 {
	return []uint64(a)
}

// Each with arrayUInt64 receiver
// applies its function argument on each item of the array
func (a arrayUInt64) Each(f func(uint64)) {
	for _, e := range a { f(e) }
}

// Concat with arrayUInt64 receiver
// returns the concatenation of itself and  its argument array 
func (a arrayUInt64) Concat(xs ArrayUInt64) arrayUInt64 {
	return arrayUInt64(append(a.Slice(), xs.Slice()...))
}


// Map with arrayUInt64 receiver
// returns an arrayBool resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt64) MapBool(f func(uint64) bool) arrayBool {
	var r = make(arrayBool, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayBool(r)
}

// Reduce with arrayUInt64 receiver
func (a arrayUInt64) ReduceBool(f func(uint64, int, ArrayUInt64) bool, initial bool) bool {
	var r bool = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt64 receiver
// returns an arrayByte resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt64) MapByte(f func(uint64) byte) arrayByte {
	var r = make(arrayByte, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayByte(r)
}

// Reduce with arrayUInt64 receiver
func (a arrayUInt64) ReduceByte(f func(uint64, int, ArrayUInt64) byte, initial byte) byte {
	var r byte = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt64 receiver
// returns an arrayComplex128 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt64) MapComplex128(f func(uint64) complex128) arrayComplex128 {
	var r = make(arrayComplex128, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex128(r)
}

// Reduce with arrayUInt64 receiver
func (a arrayUInt64) ReduceComplex128(f func(uint64, int, ArrayUInt64) complex128, initial complex128) complex128 {
	var r complex128 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt64 receiver
// returns an arrayComplex64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt64) MapComplex64(f func(uint64) complex64) arrayComplex64 {
	var r = make(arrayComplex64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex64(r)
}

// Reduce with arrayUInt64 receiver
func (a arrayUInt64) ReduceComplex64(f func(uint64, int, ArrayUInt64) complex64, initial complex64) complex64 {
	var r complex64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt64 receiver
// returns an arrayFloat32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt64) MapFloat32(f func(uint64) float32) arrayFloat32 {
	var r = make(arrayFloat32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat32(r)
}

// Reduce with arrayUInt64 receiver
func (a arrayUInt64) ReduceFloat32(f func(uint64, int, ArrayUInt64) float32, initial float32) float32 {
	var r float32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt64 receiver
// returns an arrayFloat64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt64) MapFloat64(f func(uint64) float64) arrayFloat64 {
	var r = make(arrayFloat64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat64(r)
}

// Reduce with arrayUInt64 receiver
func (a arrayUInt64) ReduceFloat64(f func(uint64, int, ArrayUInt64) float64, initial float64) float64 {
	var r float64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt64 receiver
// returns an arrayInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt64) MapInt(f func(uint64) int) arrayInt {
	var r = make(arrayInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt(r)
}

// Reduce with arrayUInt64 receiver
func (a arrayUInt64) ReduceInt(f func(uint64, int, ArrayUInt64) int, initial int) int {
	var r int = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt64 receiver
// returns an arrayInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt64) MapInt16(f func(uint64) int16) arrayInt16 {
	var r = make(arrayInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt16(r)
}

// Reduce with arrayUInt64 receiver
func (a arrayUInt64) ReduceInt16(f func(uint64, int, ArrayUInt64) int16, initial int16) int16 {
	var r int16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt64 receiver
// returns an arrayInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt64) MapInt32(f func(uint64) int32) arrayInt32 {
	var r = make(arrayInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt32(r)
}

// Reduce with arrayUInt64 receiver
func (a arrayUInt64) ReduceInt32(f func(uint64, int, ArrayUInt64) int32, initial int32) int32 {
	var r int32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt64 receiver
// returns an arrayInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt64) MapInt64(f func(uint64) int64) arrayInt64 {
	var r = make(arrayInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt64(r)
}

// Reduce with arrayUInt64 receiver
func (a arrayUInt64) ReduceInt64(f func(uint64, int, ArrayUInt64) int64, initial int64) int64 {
	var r int64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt64 receiver
// returns an arrayInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt64) MapInt8(f func(uint64) int8) arrayInt8 {
	var r = make(arrayInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt8(r)
}

// Reduce with arrayUInt64 receiver
func (a arrayUInt64) ReduceInt8(f func(uint64, int, ArrayUInt64) int8, initial int8) int8 {
	var r int8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt64 receiver
// returns an arrayRune resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt64) MapRune(f func(uint64) rune) arrayRune {
	var r = make(arrayRune, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayRune(r)
}

// Reduce with arrayUInt64 receiver
func (a arrayUInt64) ReduceRune(f func(uint64, int, ArrayUInt64) rune, initial rune) rune {
	var r rune = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt64 receiver
// returns an arrayString resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt64) MapString(f func(uint64) string) arrayString {
	var r = make(arrayString, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayString(r)
}

// Reduce with arrayUInt64 receiver
func (a arrayUInt64) ReduceString(f func(uint64, int, ArrayUInt64) string, initial string) string {
	var r string = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt64 receiver
// returns an arrayUInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt64) MapUInt(f func(uint64) uint) arrayUInt {
	var r = make(arrayUInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt(r)
}

// Reduce with arrayUInt64 receiver
func (a arrayUInt64) ReduceUInt(f func(uint64, int, ArrayUInt64) uint, initial uint) uint {
	var r uint = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt64 receiver
// returns an arrayUInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt64) MapUInt16(f func(uint64) uint16) arrayUInt16 {
	var r = make(arrayUInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt16(r)
}

// Reduce with arrayUInt64 receiver
func (a arrayUInt64) ReduceUInt16(f func(uint64, int, ArrayUInt64) uint16, initial uint16) uint16 {
	var r uint16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt64 receiver
// returns an arrayUInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt64) MapUInt32(f func(uint64) uint32) arrayUInt32 {
	var r = make(arrayUInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt32(r)
}

// Reduce with arrayUInt64 receiver
func (a arrayUInt64) ReduceUInt32(f func(uint64, int, ArrayUInt64) uint32, initial uint32) uint32 {
	var r uint32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt64 receiver
// returns an arrayUInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt64) MapUInt64(f func(uint64) uint64) arrayUInt64 {
	var r = make(arrayUInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt64(r)
}

// Reduce with arrayUInt64 receiver
func (a arrayUInt64) ReduceUInt64(f func(uint64, int, ArrayUInt64) uint64, initial uint64) uint64 {
	var r uint64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt64 receiver
// returns an arrayUInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt64) MapUInt8(f func(uint64) uint8) arrayUInt8 {
	var r = make(arrayUInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt8(r)
}

// Reduce with arrayUInt64 receiver
func (a arrayUInt64) ReduceUInt8(f func(uint64, int, ArrayUInt64) uint8, initial uint8) uint8 {
	var r uint8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt64 receiver
// returns an arrayUintPtr resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt64) MapUintPtr(f func(uint64) uintptr) arrayUintPtr {
	var r = make(arrayUintPtr, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUintPtr(r)
}

// Reduce with arrayUInt64 receiver
func (a arrayUInt64) ReduceUintPtr(f func(uint64, int, ArrayUInt64) uintptr, initial uintptr) uintptr {
	var r uintptr = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}

 // end of UInt64



// arrayUInt8 is a type alias for []uint8
type arrayUInt8 []uint8

// ArrayUInt8 makes an arry off of its arguments of type uint8 
func ArrayUInt8From(a ...uint8) arrayUInt8 {
	return arrayUInt8(a)
}

// First with arrayUInt8 receiver
// returns first element in a ResultUInt8 container
func (a arrayUInt8) First() ResultUInt8 {
	if len(a) > 0 {
		return OkUInt8(a[0])
	}
	return ErrUInt8("Out Of Bound Array Access")
}

// Slice with arrayUInt8 receiver
// returns itself as []uint8
func (a arrayUInt8) Slice() []uint8 {
	return []uint8(a)
}

// Each with arrayUInt8 receiver
// applies its function argument on each item of the array
func (a arrayUInt8) Each(f func(uint8)) {
	for _, e := range a { f(e) }
}

// Concat with arrayUInt8 receiver
// returns the concatenation of itself and  its argument array 
func (a arrayUInt8) Concat(xs ArrayUInt8) arrayUInt8 {
	return arrayUInt8(append(a.Slice(), xs.Slice()...))
}


// Map with arrayUInt8 receiver
// returns an arrayBool resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt8) MapBool(f func(uint8) bool) arrayBool {
	var r = make(arrayBool, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayBool(r)
}

// Reduce with arrayUInt8 receiver
func (a arrayUInt8) ReduceBool(f func(uint8, int, ArrayUInt8) bool, initial bool) bool {
	var r bool = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt8 receiver
// returns an arrayByte resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt8) MapByte(f func(uint8) byte) arrayByte {
	var r = make(arrayByte, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayByte(r)
}

// Reduce with arrayUInt8 receiver
func (a arrayUInt8) ReduceByte(f func(uint8, int, ArrayUInt8) byte, initial byte) byte {
	var r byte = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt8 receiver
// returns an arrayComplex128 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt8) MapComplex128(f func(uint8) complex128) arrayComplex128 {
	var r = make(arrayComplex128, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex128(r)
}

// Reduce with arrayUInt8 receiver
func (a arrayUInt8) ReduceComplex128(f func(uint8, int, ArrayUInt8) complex128, initial complex128) complex128 {
	var r complex128 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt8 receiver
// returns an arrayComplex64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt8) MapComplex64(f func(uint8) complex64) arrayComplex64 {
	var r = make(arrayComplex64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex64(r)
}

// Reduce with arrayUInt8 receiver
func (a arrayUInt8) ReduceComplex64(f func(uint8, int, ArrayUInt8) complex64, initial complex64) complex64 {
	var r complex64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt8 receiver
// returns an arrayFloat32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt8) MapFloat32(f func(uint8) float32) arrayFloat32 {
	var r = make(arrayFloat32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat32(r)
}

// Reduce with arrayUInt8 receiver
func (a arrayUInt8) ReduceFloat32(f func(uint8, int, ArrayUInt8) float32, initial float32) float32 {
	var r float32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt8 receiver
// returns an arrayFloat64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt8) MapFloat64(f func(uint8) float64) arrayFloat64 {
	var r = make(arrayFloat64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat64(r)
}

// Reduce with arrayUInt8 receiver
func (a arrayUInt8) ReduceFloat64(f func(uint8, int, ArrayUInt8) float64, initial float64) float64 {
	var r float64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt8 receiver
// returns an arrayInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt8) MapInt(f func(uint8) int) arrayInt {
	var r = make(arrayInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt(r)
}

// Reduce with arrayUInt8 receiver
func (a arrayUInt8) ReduceInt(f func(uint8, int, ArrayUInt8) int, initial int) int {
	var r int = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt8 receiver
// returns an arrayInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt8) MapInt16(f func(uint8) int16) arrayInt16 {
	var r = make(arrayInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt16(r)
}

// Reduce with arrayUInt8 receiver
func (a arrayUInt8) ReduceInt16(f func(uint8, int, ArrayUInt8) int16, initial int16) int16 {
	var r int16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt8 receiver
// returns an arrayInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt8) MapInt32(f func(uint8) int32) arrayInt32 {
	var r = make(arrayInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt32(r)
}

// Reduce with arrayUInt8 receiver
func (a arrayUInt8) ReduceInt32(f func(uint8, int, ArrayUInt8) int32, initial int32) int32 {
	var r int32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt8 receiver
// returns an arrayInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt8) MapInt64(f func(uint8) int64) arrayInt64 {
	var r = make(arrayInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt64(r)
}

// Reduce with arrayUInt8 receiver
func (a arrayUInt8) ReduceInt64(f func(uint8, int, ArrayUInt8) int64, initial int64) int64 {
	var r int64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt8 receiver
// returns an arrayInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt8) MapInt8(f func(uint8) int8) arrayInt8 {
	var r = make(arrayInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt8(r)
}

// Reduce with arrayUInt8 receiver
func (a arrayUInt8) ReduceInt8(f func(uint8, int, ArrayUInt8) int8, initial int8) int8 {
	var r int8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt8 receiver
// returns an arrayRune resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt8) MapRune(f func(uint8) rune) arrayRune {
	var r = make(arrayRune, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayRune(r)
}

// Reduce with arrayUInt8 receiver
func (a arrayUInt8) ReduceRune(f func(uint8, int, ArrayUInt8) rune, initial rune) rune {
	var r rune = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt8 receiver
// returns an arrayString resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt8) MapString(f func(uint8) string) arrayString {
	var r = make(arrayString, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayString(r)
}

// Reduce with arrayUInt8 receiver
func (a arrayUInt8) ReduceString(f func(uint8, int, ArrayUInt8) string, initial string) string {
	var r string = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt8 receiver
// returns an arrayUInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt8) MapUInt(f func(uint8) uint) arrayUInt {
	var r = make(arrayUInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt(r)
}

// Reduce with arrayUInt8 receiver
func (a arrayUInt8) ReduceUInt(f func(uint8, int, ArrayUInt8) uint, initial uint) uint {
	var r uint = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt8 receiver
// returns an arrayUInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt8) MapUInt16(f func(uint8) uint16) arrayUInt16 {
	var r = make(arrayUInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt16(r)
}

// Reduce with arrayUInt8 receiver
func (a arrayUInt8) ReduceUInt16(f func(uint8, int, ArrayUInt8) uint16, initial uint16) uint16 {
	var r uint16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt8 receiver
// returns an arrayUInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt8) MapUInt32(f func(uint8) uint32) arrayUInt32 {
	var r = make(arrayUInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt32(r)
}

// Reduce with arrayUInt8 receiver
func (a arrayUInt8) ReduceUInt32(f func(uint8, int, ArrayUInt8) uint32, initial uint32) uint32 {
	var r uint32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt8 receiver
// returns an arrayUInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt8) MapUInt64(f func(uint8) uint64) arrayUInt64 {
	var r = make(arrayUInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt64(r)
}

// Reduce with arrayUInt8 receiver
func (a arrayUInt8) ReduceUInt64(f func(uint8, int, ArrayUInt8) uint64, initial uint64) uint64 {
	var r uint64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt8 receiver
// returns an arrayUInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt8) MapUInt8(f func(uint8) uint8) arrayUInt8 {
	var r = make(arrayUInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt8(r)
}

// Reduce with arrayUInt8 receiver
func (a arrayUInt8) ReduceUInt8(f func(uint8, int, ArrayUInt8) uint8, initial uint8) uint8 {
	var r uint8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUInt8 receiver
// returns an arrayUintPtr resulting from apllying its function argument
// to every items of the receiver
func (a arrayUInt8) MapUintPtr(f func(uint8) uintptr) arrayUintPtr {
	var r = make(arrayUintPtr, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUintPtr(r)
}

// Reduce with arrayUInt8 receiver
func (a arrayUInt8) ReduceUintPtr(f func(uint8, int, ArrayUInt8) uintptr, initial uintptr) uintptr {
	var r uintptr = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}

 // end of UInt8



// arrayUintPtr is a type alias for []uintptr
type arrayUintPtr []uintptr

// ArrayUintPtr makes an arry off of its arguments of type uintptr 
func ArrayUintPtrFrom(a ...uintptr) arrayUintPtr {
	return arrayUintPtr(a)
}

// First with arrayUintPtr receiver
// returns first element in a ResultUintPtr container
func (a arrayUintPtr) First() ResultUintPtr {
	if len(a) > 0 {
		return OkUintPtr(a[0])
	}
	return ErrUintPtr("Out Of Bound Array Access")
}

// Slice with arrayUintPtr receiver
// returns itself as []uintptr
func (a arrayUintPtr) Slice() []uintptr {
	return []uintptr(a)
}

// Each with arrayUintPtr receiver
// applies its function argument on each item of the array
func (a arrayUintPtr) Each(f func(uintptr)) {
	for _, e := range a { f(e) }
}

// Concat with arrayUintPtr receiver
// returns the concatenation of itself and  its argument array 
func (a arrayUintPtr) Concat(xs ArrayUintPtr) arrayUintPtr {
	return arrayUintPtr(append(a.Slice(), xs.Slice()...))
}


// Map with arrayUintPtr receiver
// returns an arrayBool resulting from apllying its function argument
// to every items of the receiver
func (a arrayUintPtr) MapBool(f func(uintptr) bool) arrayBool {
	var r = make(arrayBool, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayBool(r)
}

// Reduce with arrayUintPtr receiver
func (a arrayUintPtr) ReduceBool(f func(uintptr, int, ArrayUintPtr) bool, initial bool) bool {
	var r bool = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUintPtr receiver
// returns an arrayByte resulting from apllying its function argument
// to every items of the receiver
func (a arrayUintPtr) MapByte(f func(uintptr) byte) arrayByte {
	var r = make(arrayByte, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayByte(r)
}

// Reduce with arrayUintPtr receiver
func (a arrayUintPtr) ReduceByte(f func(uintptr, int, ArrayUintPtr) byte, initial byte) byte {
	var r byte = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUintPtr receiver
// returns an arrayComplex128 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUintPtr) MapComplex128(f func(uintptr) complex128) arrayComplex128 {
	var r = make(arrayComplex128, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex128(r)
}

// Reduce with arrayUintPtr receiver
func (a arrayUintPtr) ReduceComplex128(f func(uintptr, int, ArrayUintPtr) complex128, initial complex128) complex128 {
	var r complex128 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUintPtr receiver
// returns an arrayComplex64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUintPtr) MapComplex64(f func(uintptr) complex64) arrayComplex64 {
	var r = make(arrayComplex64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayComplex64(r)
}

// Reduce with arrayUintPtr receiver
func (a arrayUintPtr) ReduceComplex64(f func(uintptr, int, ArrayUintPtr) complex64, initial complex64) complex64 {
	var r complex64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUintPtr receiver
// returns an arrayFloat32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUintPtr) MapFloat32(f func(uintptr) float32) arrayFloat32 {
	var r = make(arrayFloat32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat32(r)
}

// Reduce with arrayUintPtr receiver
func (a arrayUintPtr) ReduceFloat32(f func(uintptr, int, ArrayUintPtr) float32, initial float32) float32 {
	var r float32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUintPtr receiver
// returns an arrayFloat64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUintPtr) MapFloat64(f func(uintptr) float64) arrayFloat64 {
	var r = make(arrayFloat64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayFloat64(r)
}

// Reduce with arrayUintPtr receiver
func (a arrayUintPtr) ReduceFloat64(f func(uintptr, int, ArrayUintPtr) float64, initial float64) float64 {
	var r float64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUintPtr receiver
// returns an arrayInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayUintPtr) MapInt(f func(uintptr) int) arrayInt {
	var r = make(arrayInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt(r)
}

// Reduce with arrayUintPtr receiver
func (a arrayUintPtr) ReduceInt(f func(uintptr, int, ArrayUintPtr) int, initial int) int {
	var r int = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUintPtr receiver
// returns an arrayInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUintPtr) MapInt16(f func(uintptr) int16) arrayInt16 {
	var r = make(arrayInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt16(r)
}

// Reduce with arrayUintPtr receiver
func (a arrayUintPtr) ReduceInt16(f func(uintptr, int, ArrayUintPtr) int16, initial int16) int16 {
	var r int16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUintPtr receiver
// returns an arrayInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUintPtr) MapInt32(f func(uintptr) int32) arrayInt32 {
	var r = make(arrayInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt32(r)
}

// Reduce with arrayUintPtr receiver
func (a arrayUintPtr) ReduceInt32(f func(uintptr, int, ArrayUintPtr) int32, initial int32) int32 {
	var r int32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUintPtr receiver
// returns an arrayInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUintPtr) MapInt64(f func(uintptr) int64) arrayInt64 {
	var r = make(arrayInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt64(r)
}

// Reduce with arrayUintPtr receiver
func (a arrayUintPtr) ReduceInt64(f func(uintptr, int, ArrayUintPtr) int64, initial int64) int64 {
	var r int64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUintPtr receiver
// returns an arrayInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUintPtr) MapInt8(f func(uintptr) int8) arrayInt8 {
	var r = make(arrayInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayInt8(r)
}

// Reduce with arrayUintPtr receiver
func (a arrayUintPtr) ReduceInt8(f func(uintptr, int, ArrayUintPtr) int8, initial int8) int8 {
	var r int8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUintPtr receiver
// returns an arrayRune resulting from apllying its function argument
// to every items of the receiver
func (a arrayUintPtr) MapRune(f func(uintptr) rune) arrayRune {
	var r = make(arrayRune, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayRune(r)
}

// Reduce with arrayUintPtr receiver
func (a arrayUintPtr) ReduceRune(f func(uintptr, int, ArrayUintPtr) rune, initial rune) rune {
	var r rune = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUintPtr receiver
// returns an arrayString resulting from apllying its function argument
// to every items of the receiver
func (a arrayUintPtr) MapString(f func(uintptr) string) arrayString {
	var r = make(arrayString, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayString(r)
}

// Reduce with arrayUintPtr receiver
func (a arrayUintPtr) ReduceString(f func(uintptr, int, ArrayUintPtr) string, initial string) string {
	var r string = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUintPtr receiver
// returns an arrayUInt resulting from apllying its function argument
// to every items of the receiver
func (a arrayUintPtr) MapUInt(f func(uintptr) uint) arrayUInt {
	var r = make(arrayUInt, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt(r)
}

// Reduce with arrayUintPtr receiver
func (a arrayUintPtr) ReduceUInt(f func(uintptr, int, ArrayUintPtr) uint, initial uint) uint {
	var r uint = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUintPtr receiver
// returns an arrayUInt16 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUintPtr) MapUInt16(f func(uintptr) uint16) arrayUInt16 {
	var r = make(arrayUInt16, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt16(r)
}

// Reduce with arrayUintPtr receiver
func (a arrayUintPtr) ReduceUInt16(f func(uintptr, int, ArrayUintPtr) uint16, initial uint16) uint16 {
	var r uint16 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUintPtr receiver
// returns an arrayUInt32 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUintPtr) MapUInt32(f func(uintptr) uint32) arrayUInt32 {
	var r = make(arrayUInt32, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt32(r)
}

// Reduce with arrayUintPtr receiver
func (a arrayUintPtr) ReduceUInt32(f func(uintptr, int, ArrayUintPtr) uint32, initial uint32) uint32 {
	var r uint32 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUintPtr receiver
// returns an arrayUInt64 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUintPtr) MapUInt64(f func(uintptr) uint64) arrayUInt64 {
	var r = make(arrayUInt64, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt64(r)
}

// Reduce with arrayUintPtr receiver
func (a arrayUintPtr) ReduceUInt64(f func(uintptr, int, ArrayUintPtr) uint64, initial uint64) uint64 {
	var r uint64 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUintPtr receiver
// returns an arrayUInt8 resulting from apllying its function argument
// to every items of the receiver
func (a arrayUintPtr) MapUInt8(f func(uintptr) uint8) arrayUInt8 {
	var r = make(arrayUInt8, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUInt8(r)
}

// Reduce with arrayUintPtr receiver
func (a arrayUintPtr) ReduceUInt8(f func(uintptr, int, ArrayUintPtr) uint8, initial uint8) uint8 {
	var r uint8 = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}


// Map with arrayUintPtr receiver
// returns an arrayUintPtr resulting from apllying its function argument
// to every items of the receiver
func (a arrayUintPtr) MapUintPtr(f func(uintptr) uintptr) arrayUintPtr {
	var r = make(arrayUintPtr, len(a))
	for i, e := range a { r[i] = f(e) }
	return arrayUintPtr(r)
}

// Reduce with arrayUintPtr receiver
func (a arrayUintPtr) ReduceUintPtr(f func(uintptr, int, ArrayUintPtr) uintptr, initial uintptr) uintptr {
	var r uintptr = initial
	for i, e := range a { 
		r = f(e, i, a)
	}
	return r
}

 // end of UintPtr

 // end of implements


