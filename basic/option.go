// Code generated by go generate on 2018-04-10 05:59:54.860794199 +0000 UTC
package basic

// imports 
import ()




// OptionBool 
type OptionBool interface {
	Map(func(bool))
	FoldF(func(), func(bool))

	MapBool(func(bool) bool) OptionBool
	FoldBool(bool, func(bool) bool) bool
	FoldBoolF(func() bool, func(bool) bool) bool

	MapByte(func(bool) byte) OptionByte
	FoldByte(byte, func(bool) byte) byte
	FoldByteF(func() byte, func(bool) byte) byte

	MapComplex128(func(bool) complex128) OptionComplex128
	FoldComplex128(complex128, func(bool) complex128) complex128
	FoldComplex128F(func() complex128, func(bool) complex128) complex128

	MapComplex64(func(bool) complex64) OptionComplex64
	FoldComplex64(complex64, func(bool) complex64) complex64
	FoldComplex64F(func() complex64, func(bool) complex64) complex64

	MapFloat32(func(bool) float32) OptionFloat32
	FoldFloat32(float32, func(bool) float32) float32
	FoldFloat32F(func() float32, func(bool) float32) float32

	MapFloat64(func(bool) float64) OptionFloat64
	FoldFloat64(float64, func(bool) float64) float64
	FoldFloat64F(func() float64, func(bool) float64) float64

	MapInt(func(bool) int) OptionInt
	FoldInt(int, func(bool) int) int
	FoldIntF(func() int, func(bool) int) int

	MapInt16(func(bool) int16) OptionInt16
	FoldInt16(int16, func(bool) int16) int16
	FoldInt16F(func() int16, func(bool) int16) int16

	MapInt32(func(bool) int32) OptionInt32
	FoldInt32(int32, func(bool) int32) int32
	FoldInt32F(func() int32, func(bool) int32) int32

	MapInt64(func(bool) int64) OptionInt64
	FoldInt64(int64, func(bool) int64) int64
	FoldInt64F(func() int64, func(bool) int64) int64

	MapInt8(func(bool) int8) OptionInt8
	FoldInt8(int8, func(bool) int8) int8
	FoldInt8F(func() int8, func(bool) int8) int8

	MapRune(func(bool) rune) OptionRune
	FoldRune(rune, func(bool) rune) rune
	FoldRuneF(func() rune, func(bool) rune) rune

	MapString(func(bool) string) OptionString
	FoldString(string, func(bool) string) string
	FoldStringF(func() string, func(bool) string) string

	MapUInt(func(bool) uint) OptionUInt
	FoldUInt(uint, func(bool) uint) uint
	FoldUIntF(func() uint, func(bool) uint) uint

	MapUInt16(func(bool) uint16) OptionUInt16
	FoldUInt16(uint16, func(bool) uint16) uint16
	FoldUInt16F(func() uint16, func(bool) uint16) uint16

	MapUInt32(func(bool) uint32) OptionUInt32
	FoldUInt32(uint32, func(bool) uint32) uint32
	FoldUInt32F(func() uint32, func(bool) uint32) uint32

	MapUInt64(func(bool) uint64) OptionUInt64
	FoldUInt64(uint64, func(bool) uint64) uint64
	FoldUInt64F(func() uint64, func(bool) uint64) uint64

	MapUInt8(func(bool) uint8) OptionUInt8
	FoldUInt8(uint8, func(bool) uint8) uint8
	FoldUInt8F(func() uint8, func(bool) uint8) uint8

	MapUintPtr(func(bool) uintptr) OptionUintPtr
	FoldUintPtr(uintptr, func(bool) uintptr) uintptr
	FoldUintPtrF(func() uintptr, func(bool) uintptr) uintptr
 
}

// OptionByte 
type OptionByte interface {
	Map(func(byte))
	FoldF(func(), func(byte))

	MapBool(func(byte) bool) OptionBool
	FoldBool(bool, func(byte) bool) bool
	FoldBoolF(func() bool, func(byte) bool) bool

	MapByte(func(byte) byte) OptionByte
	FoldByte(byte, func(byte) byte) byte
	FoldByteF(func() byte, func(byte) byte) byte

	MapComplex128(func(byte) complex128) OptionComplex128
	FoldComplex128(complex128, func(byte) complex128) complex128
	FoldComplex128F(func() complex128, func(byte) complex128) complex128

	MapComplex64(func(byte) complex64) OptionComplex64
	FoldComplex64(complex64, func(byte) complex64) complex64
	FoldComplex64F(func() complex64, func(byte) complex64) complex64

	MapFloat32(func(byte) float32) OptionFloat32
	FoldFloat32(float32, func(byte) float32) float32
	FoldFloat32F(func() float32, func(byte) float32) float32

	MapFloat64(func(byte) float64) OptionFloat64
	FoldFloat64(float64, func(byte) float64) float64
	FoldFloat64F(func() float64, func(byte) float64) float64

	MapInt(func(byte) int) OptionInt
	FoldInt(int, func(byte) int) int
	FoldIntF(func() int, func(byte) int) int

	MapInt16(func(byte) int16) OptionInt16
	FoldInt16(int16, func(byte) int16) int16
	FoldInt16F(func() int16, func(byte) int16) int16

	MapInt32(func(byte) int32) OptionInt32
	FoldInt32(int32, func(byte) int32) int32
	FoldInt32F(func() int32, func(byte) int32) int32

	MapInt64(func(byte) int64) OptionInt64
	FoldInt64(int64, func(byte) int64) int64
	FoldInt64F(func() int64, func(byte) int64) int64

	MapInt8(func(byte) int8) OptionInt8
	FoldInt8(int8, func(byte) int8) int8
	FoldInt8F(func() int8, func(byte) int8) int8

	MapRune(func(byte) rune) OptionRune
	FoldRune(rune, func(byte) rune) rune
	FoldRuneF(func() rune, func(byte) rune) rune

	MapString(func(byte) string) OptionString
	FoldString(string, func(byte) string) string
	FoldStringF(func() string, func(byte) string) string

	MapUInt(func(byte) uint) OptionUInt
	FoldUInt(uint, func(byte) uint) uint
	FoldUIntF(func() uint, func(byte) uint) uint

	MapUInt16(func(byte) uint16) OptionUInt16
	FoldUInt16(uint16, func(byte) uint16) uint16
	FoldUInt16F(func() uint16, func(byte) uint16) uint16

	MapUInt32(func(byte) uint32) OptionUInt32
	FoldUInt32(uint32, func(byte) uint32) uint32
	FoldUInt32F(func() uint32, func(byte) uint32) uint32

	MapUInt64(func(byte) uint64) OptionUInt64
	FoldUInt64(uint64, func(byte) uint64) uint64
	FoldUInt64F(func() uint64, func(byte) uint64) uint64

	MapUInt8(func(byte) uint8) OptionUInt8
	FoldUInt8(uint8, func(byte) uint8) uint8
	FoldUInt8F(func() uint8, func(byte) uint8) uint8

	MapUintPtr(func(byte) uintptr) OptionUintPtr
	FoldUintPtr(uintptr, func(byte) uintptr) uintptr
	FoldUintPtrF(func() uintptr, func(byte) uintptr) uintptr
 
}

// OptionComplex128 
type OptionComplex128 interface {
	Map(func(complex128))
	FoldF(func(), func(complex128))

	MapBool(func(complex128) bool) OptionBool
	FoldBool(bool, func(complex128) bool) bool
	FoldBoolF(func() bool, func(complex128) bool) bool

	MapByte(func(complex128) byte) OptionByte
	FoldByte(byte, func(complex128) byte) byte
	FoldByteF(func() byte, func(complex128) byte) byte

	MapComplex128(func(complex128) complex128) OptionComplex128
	FoldComplex128(complex128, func(complex128) complex128) complex128
	FoldComplex128F(func() complex128, func(complex128) complex128) complex128

	MapComplex64(func(complex128) complex64) OptionComplex64
	FoldComplex64(complex64, func(complex128) complex64) complex64
	FoldComplex64F(func() complex64, func(complex128) complex64) complex64

	MapFloat32(func(complex128) float32) OptionFloat32
	FoldFloat32(float32, func(complex128) float32) float32
	FoldFloat32F(func() float32, func(complex128) float32) float32

	MapFloat64(func(complex128) float64) OptionFloat64
	FoldFloat64(float64, func(complex128) float64) float64
	FoldFloat64F(func() float64, func(complex128) float64) float64

	MapInt(func(complex128) int) OptionInt
	FoldInt(int, func(complex128) int) int
	FoldIntF(func() int, func(complex128) int) int

	MapInt16(func(complex128) int16) OptionInt16
	FoldInt16(int16, func(complex128) int16) int16
	FoldInt16F(func() int16, func(complex128) int16) int16

	MapInt32(func(complex128) int32) OptionInt32
	FoldInt32(int32, func(complex128) int32) int32
	FoldInt32F(func() int32, func(complex128) int32) int32

	MapInt64(func(complex128) int64) OptionInt64
	FoldInt64(int64, func(complex128) int64) int64
	FoldInt64F(func() int64, func(complex128) int64) int64

	MapInt8(func(complex128) int8) OptionInt8
	FoldInt8(int8, func(complex128) int8) int8
	FoldInt8F(func() int8, func(complex128) int8) int8

	MapRune(func(complex128) rune) OptionRune
	FoldRune(rune, func(complex128) rune) rune
	FoldRuneF(func() rune, func(complex128) rune) rune

	MapString(func(complex128) string) OptionString
	FoldString(string, func(complex128) string) string
	FoldStringF(func() string, func(complex128) string) string

	MapUInt(func(complex128) uint) OptionUInt
	FoldUInt(uint, func(complex128) uint) uint
	FoldUIntF(func() uint, func(complex128) uint) uint

	MapUInt16(func(complex128) uint16) OptionUInt16
	FoldUInt16(uint16, func(complex128) uint16) uint16
	FoldUInt16F(func() uint16, func(complex128) uint16) uint16

	MapUInt32(func(complex128) uint32) OptionUInt32
	FoldUInt32(uint32, func(complex128) uint32) uint32
	FoldUInt32F(func() uint32, func(complex128) uint32) uint32

	MapUInt64(func(complex128) uint64) OptionUInt64
	FoldUInt64(uint64, func(complex128) uint64) uint64
	FoldUInt64F(func() uint64, func(complex128) uint64) uint64

	MapUInt8(func(complex128) uint8) OptionUInt8
	FoldUInt8(uint8, func(complex128) uint8) uint8
	FoldUInt8F(func() uint8, func(complex128) uint8) uint8

	MapUintPtr(func(complex128) uintptr) OptionUintPtr
	FoldUintPtr(uintptr, func(complex128) uintptr) uintptr
	FoldUintPtrF(func() uintptr, func(complex128) uintptr) uintptr
 
}

// OptionComplex64 
type OptionComplex64 interface {
	Map(func(complex64))
	FoldF(func(), func(complex64))

	MapBool(func(complex64) bool) OptionBool
	FoldBool(bool, func(complex64) bool) bool
	FoldBoolF(func() bool, func(complex64) bool) bool

	MapByte(func(complex64) byte) OptionByte
	FoldByte(byte, func(complex64) byte) byte
	FoldByteF(func() byte, func(complex64) byte) byte

	MapComplex128(func(complex64) complex128) OptionComplex128
	FoldComplex128(complex128, func(complex64) complex128) complex128
	FoldComplex128F(func() complex128, func(complex64) complex128) complex128

	MapComplex64(func(complex64) complex64) OptionComplex64
	FoldComplex64(complex64, func(complex64) complex64) complex64
	FoldComplex64F(func() complex64, func(complex64) complex64) complex64

	MapFloat32(func(complex64) float32) OptionFloat32
	FoldFloat32(float32, func(complex64) float32) float32
	FoldFloat32F(func() float32, func(complex64) float32) float32

	MapFloat64(func(complex64) float64) OptionFloat64
	FoldFloat64(float64, func(complex64) float64) float64
	FoldFloat64F(func() float64, func(complex64) float64) float64

	MapInt(func(complex64) int) OptionInt
	FoldInt(int, func(complex64) int) int
	FoldIntF(func() int, func(complex64) int) int

	MapInt16(func(complex64) int16) OptionInt16
	FoldInt16(int16, func(complex64) int16) int16
	FoldInt16F(func() int16, func(complex64) int16) int16

	MapInt32(func(complex64) int32) OptionInt32
	FoldInt32(int32, func(complex64) int32) int32
	FoldInt32F(func() int32, func(complex64) int32) int32

	MapInt64(func(complex64) int64) OptionInt64
	FoldInt64(int64, func(complex64) int64) int64
	FoldInt64F(func() int64, func(complex64) int64) int64

	MapInt8(func(complex64) int8) OptionInt8
	FoldInt8(int8, func(complex64) int8) int8
	FoldInt8F(func() int8, func(complex64) int8) int8

	MapRune(func(complex64) rune) OptionRune
	FoldRune(rune, func(complex64) rune) rune
	FoldRuneF(func() rune, func(complex64) rune) rune

	MapString(func(complex64) string) OptionString
	FoldString(string, func(complex64) string) string
	FoldStringF(func() string, func(complex64) string) string

	MapUInt(func(complex64) uint) OptionUInt
	FoldUInt(uint, func(complex64) uint) uint
	FoldUIntF(func() uint, func(complex64) uint) uint

	MapUInt16(func(complex64) uint16) OptionUInt16
	FoldUInt16(uint16, func(complex64) uint16) uint16
	FoldUInt16F(func() uint16, func(complex64) uint16) uint16

	MapUInt32(func(complex64) uint32) OptionUInt32
	FoldUInt32(uint32, func(complex64) uint32) uint32
	FoldUInt32F(func() uint32, func(complex64) uint32) uint32

	MapUInt64(func(complex64) uint64) OptionUInt64
	FoldUInt64(uint64, func(complex64) uint64) uint64
	FoldUInt64F(func() uint64, func(complex64) uint64) uint64

	MapUInt8(func(complex64) uint8) OptionUInt8
	FoldUInt8(uint8, func(complex64) uint8) uint8
	FoldUInt8F(func() uint8, func(complex64) uint8) uint8

	MapUintPtr(func(complex64) uintptr) OptionUintPtr
	FoldUintPtr(uintptr, func(complex64) uintptr) uintptr
	FoldUintPtrF(func() uintptr, func(complex64) uintptr) uintptr
 
}

// OptionFloat32 
type OptionFloat32 interface {
	Map(func(float32))
	FoldF(func(), func(float32))

	MapBool(func(float32) bool) OptionBool
	FoldBool(bool, func(float32) bool) bool
	FoldBoolF(func() bool, func(float32) bool) bool

	MapByte(func(float32) byte) OptionByte
	FoldByte(byte, func(float32) byte) byte
	FoldByteF(func() byte, func(float32) byte) byte

	MapComplex128(func(float32) complex128) OptionComplex128
	FoldComplex128(complex128, func(float32) complex128) complex128
	FoldComplex128F(func() complex128, func(float32) complex128) complex128

	MapComplex64(func(float32) complex64) OptionComplex64
	FoldComplex64(complex64, func(float32) complex64) complex64
	FoldComplex64F(func() complex64, func(float32) complex64) complex64

	MapFloat32(func(float32) float32) OptionFloat32
	FoldFloat32(float32, func(float32) float32) float32
	FoldFloat32F(func() float32, func(float32) float32) float32

	MapFloat64(func(float32) float64) OptionFloat64
	FoldFloat64(float64, func(float32) float64) float64
	FoldFloat64F(func() float64, func(float32) float64) float64

	MapInt(func(float32) int) OptionInt
	FoldInt(int, func(float32) int) int
	FoldIntF(func() int, func(float32) int) int

	MapInt16(func(float32) int16) OptionInt16
	FoldInt16(int16, func(float32) int16) int16
	FoldInt16F(func() int16, func(float32) int16) int16

	MapInt32(func(float32) int32) OptionInt32
	FoldInt32(int32, func(float32) int32) int32
	FoldInt32F(func() int32, func(float32) int32) int32

	MapInt64(func(float32) int64) OptionInt64
	FoldInt64(int64, func(float32) int64) int64
	FoldInt64F(func() int64, func(float32) int64) int64

	MapInt8(func(float32) int8) OptionInt8
	FoldInt8(int8, func(float32) int8) int8
	FoldInt8F(func() int8, func(float32) int8) int8

	MapRune(func(float32) rune) OptionRune
	FoldRune(rune, func(float32) rune) rune
	FoldRuneF(func() rune, func(float32) rune) rune

	MapString(func(float32) string) OptionString
	FoldString(string, func(float32) string) string
	FoldStringF(func() string, func(float32) string) string

	MapUInt(func(float32) uint) OptionUInt
	FoldUInt(uint, func(float32) uint) uint
	FoldUIntF(func() uint, func(float32) uint) uint

	MapUInt16(func(float32) uint16) OptionUInt16
	FoldUInt16(uint16, func(float32) uint16) uint16
	FoldUInt16F(func() uint16, func(float32) uint16) uint16

	MapUInt32(func(float32) uint32) OptionUInt32
	FoldUInt32(uint32, func(float32) uint32) uint32
	FoldUInt32F(func() uint32, func(float32) uint32) uint32

	MapUInt64(func(float32) uint64) OptionUInt64
	FoldUInt64(uint64, func(float32) uint64) uint64
	FoldUInt64F(func() uint64, func(float32) uint64) uint64

	MapUInt8(func(float32) uint8) OptionUInt8
	FoldUInt8(uint8, func(float32) uint8) uint8
	FoldUInt8F(func() uint8, func(float32) uint8) uint8

	MapUintPtr(func(float32) uintptr) OptionUintPtr
	FoldUintPtr(uintptr, func(float32) uintptr) uintptr
	FoldUintPtrF(func() uintptr, func(float32) uintptr) uintptr
 
}

// OptionFloat64 
type OptionFloat64 interface {
	Map(func(float64))
	FoldF(func(), func(float64))

	MapBool(func(float64) bool) OptionBool
	FoldBool(bool, func(float64) bool) bool
	FoldBoolF(func() bool, func(float64) bool) bool

	MapByte(func(float64) byte) OptionByte
	FoldByte(byte, func(float64) byte) byte
	FoldByteF(func() byte, func(float64) byte) byte

	MapComplex128(func(float64) complex128) OptionComplex128
	FoldComplex128(complex128, func(float64) complex128) complex128
	FoldComplex128F(func() complex128, func(float64) complex128) complex128

	MapComplex64(func(float64) complex64) OptionComplex64
	FoldComplex64(complex64, func(float64) complex64) complex64
	FoldComplex64F(func() complex64, func(float64) complex64) complex64

	MapFloat32(func(float64) float32) OptionFloat32
	FoldFloat32(float32, func(float64) float32) float32
	FoldFloat32F(func() float32, func(float64) float32) float32

	MapFloat64(func(float64) float64) OptionFloat64
	FoldFloat64(float64, func(float64) float64) float64
	FoldFloat64F(func() float64, func(float64) float64) float64

	MapInt(func(float64) int) OptionInt
	FoldInt(int, func(float64) int) int
	FoldIntF(func() int, func(float64) int) int

	MapInt16(func(float64) int16) OptionInt16
	FoldInt16(int16, func(float64) int16) int16
	FoldInt16F(func() int16, func(float64) int16) int16

	MapInt32(func(float64) int32) OptionInt32
	FoldInt32(int32, func(float64) int32) int32
	FoldInt32F(func() int32, func(float64) int32) int32

	MapInt64(func(float64) int64) OptionInt64
	FoldInt64(int64, func(float64) int64) int64
	FoldInt64F(func() int64, func(float64) int64) int64

	MapInt8(func(float64) int8) OptionInt8
	FoldInt8(int8, func(float64) int8) int8
	FoldInt8F(func() int8, func(float64) int8) int8

	MapRune(func(float64) rune) OptionRune
	FoldRune(rune, func(float64) rune) rune
	FoldRuneF(func() rune, func(float64) rune) rune

	MapString(func(float64) string) OptionString
	FoldString(string, func(float64) string) string
	FoldStringF(func() string, func(float64) string) string

	MapUInt(func(float64) uint) OptionUInt
	FoldUInt(uint, func(float64) uint) uint
	FoldUIntF(func() uint, func(float64) uint) uint

	MapUInt16(func(float64) uint16) OptionUInt16
	FoldUInt16(uint16, func(float64) uint16) uint16
	FoldUInt16F(func() uint16, func(float64) uint16) uint16

	MapUInt32(func(float64) uint32) OptionUInt32
	FoldUInt32(uint32, func(float64) uint32) uint32
	FoldUInt32F(func() uint32, func(float64) uint32) uint32

	MapUInt64(func(float64) uint64) OptionUInt64
	FoldUInt64(uint64, func(float64) uint64) uint64
	FoldUInt64F(func() uint64, func(float64) uint64) uint64

	MapUInt8(func(float64) uint8) OptionUInt8
	FoldUInt8(uint8, func(float64) uint8) uint8
	FoldUInt8F(func() uint8, func(float64) uint8) uint8

	MapUintPtr(func(float64) uintptr) OptionUintPtr
	FoldUintPtr(uintptr, func(float64) uintptr) uintptr
	FoldUintPtrF(func() uintptr, func(float64) uintptr) uintptr
 
}

// OptionInt 
type OptionInt interface {
	Map(func(int))
	FoldF(func(), func(int))

	MapBool(func(int) bool) OptionBool
	FoldBool(bool, func(int) bool) bool
	FoldBoolF(func() bool, func(int) bool) bool

	MapByte(func(int) byte) OptionByte
	FoldByte(byte, func(int) byte) byte
	FoldByteF(func() byte, func(int) byte) byte

	MapComplex128(func(int) complex128) OptionComplex128
	FoldComplex128(complex128, func(int) complex128) complex128
	FoldComplex128F(func() complex128, func(int) complex128) complex128

	MapComplex64(func(int) complex64) OptionComplex64
	FoldComplex64(complex64, func(int) complex64) complex64
	FoldComplex64F(func() complex64, func(int) complex64) complex64

	MapFloat32(func(int) float32) OptionFloat32
	FoldFloat32(float32, func(int) float32) float32
	FoldFloat32F(func() float32, func(int) float32) float32

	MapFloat64(func(int) float64) OptionFloat64
	FoldFloat64(float64, func(int) float64) float64
	FoldFloat64F(func() float64, func(int) float64) float64

	MapInt(func(int) int) OptionInt
	FoldInt(int, func(int) int) int
	FoldIntF(func() int, func(int) int) int

	MapInt16(func(int) int16) OptionInt16
	FoldInt16(int16, func(int) int16) int16
	FoldInt16F(func() int16, func(int) int16) int16

	MapInt32(func(int) int32) OptionInt32
	FoldInt32(int32, func(int) int32) int32
	FoldInt32F(func() int32, func(int) int32) int32

	MapInt64(func(int) int64) OptionInt64
	FoldInt64(int64, func(int) int64) int64
	FoldInt64F(func() int64, func(int) int64) int64

	MapInt8(func(int) int8) OptionInt8
	FoldInt8(int8, func(int) int8) int8
	FoldInt8F(func() int8, func(int) int8) int8

	MapRune(func(int) rune) OptionRune
	FoldRune(rune, func(int) rune) rune
	FoldRuneF(func() rune, func(int) rune) rune

	MapString(func(int) string) OptionString
	FoldString(string, func(int) string) string
	FoldStringF(func() string, func(int) string) string

	MapUInt(func(int) uint) OptionUInt
	FoldUInt(uint, func(int) uint) uint
	FoldUIntF(func() uint, func(int) uint) uint

	MapUInt16(func(int) uint16) OptionUInt16
	FoldUInt16(uint16, func(int) uint16) uint16
	FoldUInt16F(func() uint16, func(int) uint16) uint16

	MapUInt32(func(int) uint32) OptionUInt32
	FoldUInt32(uint32, func(int) uint32) uint32
	FoldUInt32F(func() uint32, func(int) uint32) uint32

	MapUInt64(func(int) uint64) OptionUInt64
	FoldUInt64(uint64, func(int) uint64) uint64
	FoldUInt64F(func() uint64, func(int) uint64) uint64

	MapUInt8(func(int) uint8) OptionUInt8
	FoldUInt8(uint8, func(int) uint8) uint8
	FoldUInt8F(func() uint8, func(int) uint8) uint8

	MapUintPtr(func(int) uintptr) OptionUintPtr
	FoldUintPtr(uintptr, func(int) uintptr) uintptr
	FoldUintPtrF(func() uintptr, func(int) uintptr) uintptr
 
}

// OptionInt16 
type OptionInt16 interface {
	Map(func(int16))
	FoldF(func(), func(int16))

	MapBool(func(int16) bool) OptionBool
	FoldBool(bool, func(int16) bool) bool
	FoldBoolF(func() bool, func(int16) bool) bool

	MapByte(func(int16) byte) OptionByte
	FoldByte(byte, func(int16) byte) byte
	FoldByteF(func() byte, func(int16) byte) byte

	MapComplex128(func(int16) complex128) OptionComplex128
	FoldComplex128(complex128, func(int16) complex128) complex128
	FoldComplex128F(func() complex128, func(int16) complex128) complex128

	MapComplex64(func(int16) complex64) OptionComplex64
	FoldComplex64(complex64, func(int16) complex64) complex64
	FoldComplex64F(func() complex64, func(int16) complex64) complex64

	MapFloat32(func(int16) float32) OptionFloat32
	FoldFloat32(float32, func(int16) float32) float32
	FoldFloat32F(func() float32, func(int16) float32) float32

	MapFloat64(func(int16) float64) OptionFloat64
	FoldFloat64(float64, func(int16) float64) float64
	FoldFloat64F(func() float64, func(int16) float64) float64

	MapInt(func(int16) int) OptionInt
	FoldInt(int, func(int16) int) int
	FoldIntF(func() int, func(int16) int) int

	MapInt16(func(int16) int16) OptionInt16
	FoldInt16(int16, func(int16) int16) int16
	FoldInt16F(func() int16, func(int16) int16) int16

	MapInt32(func(int16) int32) OptionInt32
	FoldInt32(int32, func(int16) int32) int32
	FoldInt32F(func() int32, func(int16) int32) int32

	MapInt64(func(int16) int64) OptionInt64
	FoldInt64(int64, func(int16) int64) int64
	FoldInt64F(func() int64, func(int16) int64) int64

	MapInt8(func(int16) int8) OptionInt8
	FoldInt8(int8, func(int16) int8) int8
	FoldInt8F(func() int8, func(int16) int8) int8

	MapRune(func(int16) rune) OptionRune
	FoldRune(rune, func(int16) rune) rune
	FoldRuneF(func() rune, func(int16) rune) rune

	MapString(func(int16) string) OptionString
	FoldString(string, func(int16) string) string
	FoldStringF(func() string, func(int16) string) string

	MapUInt(func(int16) uint) OptionUInt
	FoldUInt(uint, func(int16) uint) uint
	FoldUIntF(func() uint, func(int16) uint) uint

	MapUInt16(func(int16) uint16) OptionUInt16
	FoldUInt16(uint16, func(int16) uint16) uint16
	FoldUInt16F(func() uint16, func(int16) uint16) uint16

	MapUInt32(func(int16) uint32) OptionUInt32
	FoldUInt32(uint32, func(int16) uint32) uint32
	FoldUInt32F(func() uint32, func(int16) uint32) uint32

	MapUInt64(func(int16) uint64) OptionUInt64
	FoldUInt64(uint64, func(int16) uint64) uint64
	FoldUInt64F(func() uint64, func(int16) uint64) uint64

	MapUInt8(func(int16) uint8) OptionUInt8
	FoldUInt8(uint8, func(int16) uint8) uint8
	FoldUInt8F(func() uint8, func(int16) uint8) uint8

	MapUintPtr(func(int16) uintptr) OptionUintPtr
	FoldUintPtr(uintptr, func(int16) uintptr) uintptr
	FoldUintPtrF(func() uintptr, func(int16) uintptr) uintptr
 
}

// OptionInt32 
type OptionInt32 interface {
	Map(func(int32))
	FoldF(func(), func(int32))

	MapBool(func(int32) bool) OptionBool
	FoldBool(bool, func(int32) bool) bool
	FoldBoolF(func() bool, func(int32) bool) bool

	MapByte(func(int32) byte) OptionByte
	FoldByte(byte, func(int32) byte) byte
	FoldByteF(func() byte, func(int32) byte) byte

	MapComplex128(func(int32) complex128) OptionComplex128
	FoldComplex128(complex128, func(int32) complex128) complex128
	FoldComplex128F(func() complex128, func(int32) complex128) complex128

	MapComplex64(func(int32) complex64) OptionComplex64
	FoldComplex64(complex64, func(int32) complex64) complex64
	FoldComplex64F(func() complex64, func(int32) complex64) complex64

	MapFloat32(func(int32) float32) OptionFloat32
	FoldFloat32(float32, func(int32) float32) float32
	FoldFloat32F(func() float32, func(int32) float32) float32

	MapFloat64(func(int32) float64) OptionFloat64
	FoldFloat64(float64, func(int32) float64) float64
	FoldFloat64F(func() float64, func(int32) float64) float64

	MapInt(func(int32) int) OptionInt
	FoldInt(int, func(int32) int) int
	FoldIntF(func() int, func(int32) int) int

	MapInt16(func(int32) int16) OptionInt16
	FoldInt16(int16, func(int32) int16) int16
	FoldInt16F(func() int16, func(int32) int16) int16

	MapInt32(func(int32) int32) OptionInt32
	FoldInt32(int32, func(int32) int32) int32
	FoldInt32F(func() int32, func(int32) int32) int32

	MapInt64(func(int32) int64) OptionInt64
	FoldInt64(int64, func(int32) int64) int64
	FoldInt64F(func() int64, func(int32) int64) int64

	MapInt8(func(int32) int8) OptionInt8
	FoldInt8(int8, func(int32) int8) int8
	FoldInt8F(func() int8, func(int32) int8) int8

	MapRune(func(int32) rune) OptionRune
	FoldRune(rune, func(int32) rune) rune
	FoldRuneF(func() rune, func(int32) rune) rune

	MapString(func(int32) string) OptionString
	FoldString(string, func(int32) string) string
	FoldStringF(func() string, func(int32) string) string

	MapUInt(func(int32) uint) OptionUInt
	FoldUInt(uint, func(int32) uint) uint
	FoldUIntF(func() uint, func(int32) uint) uint

	MapUInt16(func(int32) uint16) OptionUInt16
	FoldUInt16(uint16, func(int32) uint16) uint16
	FoldUInt16F(func() uint16, func(int32) uint16) uint16

	MapUInt32(func(int32) uint32) OptionUInt32
	FoldUInt32(uint32, func(int32) uint32) uint32
	FoldUInt32F(func() uint32, func(int32) uint32) uint32

	MapUInt64(func(int32) uint64) OptionUInt64
	FoldUInt64(uint64, func(int32) uint64) uint64
	FoldUInt64F(func() uint64, func(int32) uint64) uint64

	MapUInt8(func(int32) uint8) OptionUInt8
	FoldUInt8(uint8, func(int32) uint8) uint8
	FoldUInt8F(func() uint8, func(int32) uint8) uint8

	MapUintPtr(func(int32) uintptr) OptionUintPtr
	FoldUintPtr(uintptr, func(int32) uintptr) uintptr
	FoldUintPtrF(func() uintptr, func(int32) uintptr) uintptr
 
}

// OptionInt64 
type OptionInt64 interface {
	Map(func(int64))
	FoldF(func(), func(int64))

	MapBool(func(int64) bool) OptionBool
	FoldBool(bool, func(int64) bool) bool
	FoldBoolF(func() bool, func(int64) bool) bool

	MapByte(func(int64) byte) OptionByte
	FoldByte(byte, func(int64) byte) byte
	FoldByteF(func() byte, func(int64) byte) byte

	MapComplex128(func(int64) complex128) OptionComplex128
	FoldComplex128(complex128, func(int64) complex128) complex128
	FoldComplex128F(func() complex128, func(int64) complex128) complex128

	MapComplex64(func(int64) complex64) OptionComplex64
	FoldComplex64(complex64, func(int64) complex64) complex64
	FoldComplex64F(func() complex64, func(int64) complex64) complex64

	MapFloat32(func(int64) float32) OptionFloat32
	FoldFloat32(float32, func(int64) float32) float32
	FoldFloat32F(func() float32, func(int64) float32) float32

	MapFloat64(func(int64) float64) OptionFloat64
	FoldFloat64(float64, func(int64) float64) float64
	FoldFloat64F(func() float64, func(int64) float64) float64

	MapInt(func(int64) int) OptionInt
	FoldInt(int, func(int64) int) int
	FoldIntF(func() int, func(int64) int) int

	MapInt16(func(int64) int16) OptionInt16
	FoldInt16(int16, func(int64) int16) int16
	FoldInt16F(func() int16, func(int64) int16) int16

	MapInt32(func(int64) int32) OptionInt32
	FoldInt32(int32, func(int64) int32) int32
	FoldInt32F(func() int32, func(int64) int32) int32

	MapInt64(func(int64) int64) OptionInt64
	FoldInt64(int64, func(int64) int64) int64
	FoldInt64F(func() int64, func(int64) int64) int64

	MapInt8(func(int64) int8) OptionInt8
	FoldInt8(int8, func(int64) int8) int8
	FoldInt8F(func() int8, func(int64) int8) int8

	MapRune(func(int64) rune) OptionRune
	FoldRune(rune, func(int64) rune) rune
	FoldRuneF(func() rune, func(int64) rune) rune

	MapString(func(int64) string) OptionString
	FoldString(string, func(int64) string) string
	FoldStringF(func() string, func(int64) string) string

	MapUInt(func(int64) uint) OptionUInt
	FoldUInt(uint, func(int64) uint) uint
	FoldUIntF(func() uint, func(int64) uint) uint

	MapUInt16(func(int64) uint16) OptionUInt16
	FoldUInt16(uint16, func(int64) uint16) uint16
	FoldUInt16F(func() uint16, func(int64) uint16) uint16

	MapUInt32(func(int64) uint32) OptionUInt32
	FoldUInt32(uint32, func(int64) uint32) uint32
	FoldUInt32F(func() uint32, func(int64) uint32) uint32

	MapUInt64(func(int64) uint64) OptionUInt64
	FoldUInt64(uint64, func(int64) uint64) uint64
	FoldUInt64F(func() uint64, func(int64) uint64) uint64

	MapUInt8(func(int64) uint8) OptionUInt8
	FoldUInt8(uint8, func(int64) uint8) uint8
	FoldUInt8F(func() uint8, func(int64) uint8) uint8

	MapUintPtr(func(int64) uintptr) OptionUintPtr
	FoldUintPtr(uintptr, func(int64) uintptr) uintptr
	FoldUintPtrF(func() uintptr, func(int64) uintptr) uintptr
 
}

// OptionInt8 
type OptionInt8 interface {
	Map(func(int8))
	FoldF(func(), func(int8))

	MapBool(func(int8) bool) OptionBool
	FoldBool(bool, func(int8) bool) bool
	FoldBoolF(func() bool, func(int8) bool) bool

	MapByte(func(int8) byte) OptionByte
	FoldByte(byte, func(int8) byte) byte
	FoldByteF(func() byte, func(int8) byte) byte

	MapComplex128(func(int8) complex128) OptionComplex128
	FoldComplex128(complex128, func(int8) complex128) complex128
	FoldComplex128F(func() complex128, func(int8) complex128) complex128

	MapComplex64(func(int8) complex64) OptionComplex64
	FoldComplex64(complex64, func(int8) complex64) complex64
	FoldComplex64F(func() complex64, func(int8) complex64) complex64

	MapFloat32(func(int8) float32) OptionFloat32
	FoldFloat32(float32, func(int8) float32) float32
	FoldFloat32F(func() float32, func(int8) float32) float32

	MapFloat64(func(int8) float64) OptionFloat64
	FoldFloat64(float64, func(int8) float64) float64
	FoldFloat64F(func() float64, func(int8) float64) float64

	MapInt(func(int8) int) OptionInt
	FoldInt(int, func(int8) int) int
	FoldIntF(func() int, func(int8) int) int

	MapInt16(func(int8) int16) OptionInt16
	FoldInt16(int16, func(int8) int16) int16
	FoldInt16F(func() int16, func(int8) int16) int16

	MapInt32(func(int8) int32) OptionInt32
	FoldInt32(int32, func(int8) int32) int32
	FoldInt32F(func() int32, func(int8) int32) int32

	MapInt64(func(int8) int64) OptionInt64
	FoldInt64(int64, func(int8) int64) int64
	FoldInt64F(func() int64, func(int8) int64) int64

	MapInt8(func(int8) int8) OptionInt8
	FoldInt8(int8, func(int8) int8) int8
	FoldInt8F(func() int8, func(int8) int8) int8

	MapRune(func(int8) rune) OptionRune
	FoldRune(rune, func(int8) rune) rune
	FoldRuneF(func() rune, func(int8) rune) rune

	MapString(func(int8) string) OptionString
	FoldString(string, func(int8) string) string
	FoldStringF(func() string, func(int8) string) string

	MapUInt(func(int8) uint) OptionUInt
	FoldUInt(uint, func(int8) uint) uint
	FoldUIntF(func() uint, func(int8) uint) uint

	MapUInt16(func(int8) uint16) OptionUInt16
	FoldUInt16(uint16, func(int8) uint16) uint16
	FoldUInt16F(func() uint16, func(int8) uint16) uint16

	MapUInt32(func(int8) uint32) OptionUInt32
	FoldUInt32(uint32, func(int8) uint32) uint32
	FoldUInt32F(func() uint32, func(int8) uint32) uint32

	MapUInt64(func(int8) uint64) OptionUInt64
	FoldUInt64(uint64, func(int8) uint64) uint64
	FoldUInt64F(func() uint64, func(int8) uint64) uint64

	MapUInt8(func(int8) uint8) OptionUInt8
	FoldUInt8(uint8, func(int8) uint8) uint8
	FoldUInt8F(func() uint8, func(int8) uint8) uint8

	MapUintPtr(func(int8) uintptr) OptionUintPtr
	FoldUintPtr(uintptr, func(int8) uintptr) uintptr
	FoldUintPtrF(func() uintptr, func(int8) uintptr) uintptr
 
}

// OptionRune 
type OptionRune interface {
	Map(func(rune))
	FoldF(func(), func(rune))

	MapBool(func(rune) bool) OptionBool
	FoldBool(bool, func(rune) bool) bool
	FoldBoolF(func() bool, func(rune) bool) bool

	MapByte(func(rune) byte) OptionByte
	FoldByte(byte, func(rune) byte) byte
	FoldByteF(func() byte, func(rune) byte) byte

	MapComplex128(func(rune) complex128) OptionComplex128
	FoldComplex128(complex128, func(rune) complex128) complex128
	FoldComplex128F(func() complex128, func(rune) complex128) complex128

	MapComplex64(func(rune) complex64) OptionComplex64
	FoldComplex64(complex64, func(rune) complex64) complex64
	FoldComplex64F(func() complex64, func(rune) complex64) complex64

	MapFloat32(func(rune) float32) OptionFloat32
	FoldFloat32(float32, func(rune) float32) float32
	FoldFloat32F(func() float32, func(rune) float32) float32

	MapFloat64(func(rune) float64) OptionFloat64
	FoldFloat64(float64, func(rune) float64) float64
	FoldFloat64F(func() float64, func(rune) float64) float64

	MapInt(func(rune) int) OptionInt
	FoldInt(int, func(rune) int) int
	FoldIntF(func() int, func(rune) int) int

	MapInt16(func(rune) int16) OptionInt16
	FoldInt16(int16, func(rune) int16) int16
	FoldInt16F(func() int16, func(rune) int16) int16

	MapInt32(func(rune) int32) OptionInt32
	FoldInt32(int32, func(rune) int32) int32
	FoldInt32F(func() int32, func(rune) int32) int32

	MapInt64(func(rune) int64) OptionInt64
	FoldInt64(int64, func(rune) int64) int64
	FoldInt64F(func() int64, func(rune) int64) int64

	MapInt8(func(rune) int8) OptionInt8
	FoldInt8(int8, func(rune) int8) int8
	FoldInt8F(func() int8, func(rune) int8) int8

	MapRune(func(rune) rune) OptionRune
	FoldRune(rune, func(rune) rune) rune
	FoldRuneF(func() rune, func(rune) rune) rune

	MapString(func(rune) string) OptionString
	FoldString(string, func(rune) string) string
	FoldStringF(func() string, func(rune) string) string

	MapUInt(func(rune) uint) OptionUInt
	FoldUInt(uint, func(rune) uint) uint
	FoldUIntF(func() uint, func(rune) uint) uint

	MapUInt16(func(rune) uint16) OptionUInt16
	FoldUInt16(uint16, func(rune) uint16) uint16
	FoldUInt16F(func() uint16, func(rune) uint16) uint16

	MapUInt32(func(rune) uint32) OptionUInt32
	FoldUInt32(uint32, func(rune) uint32) uint32
	FoldUInt32F(func() uint32, func(rune) uint32) uint32

	MapUInt64(func(rune) uint64) OptionUInt64
	FoldUInt64(uint64, func(rune) uint64) uint64
	FoldUInt64F(func() uint64, func(rune) uint64) uint64

	MapUInt8(func(rune) uint8) OptionUInt8
	FoldUInt8(uint8, func(rune) uint8) uint8
	FoldUInt8F(func() uint8, func(rune) uint8) uint8

	MapUintPtr(func(rune) uintptr) OptionUintPtr
	FoldUintPtr(uintptr, func(rune) uintptr) uintptr
	FoldUintPtrF(func() uintptr, func(rune) uintptr) uintptr
 
}

// OptionString 
type OptionString interface {
	Map(func(string))
	FoldF(func(), func(string))

	MapBool(func(string) bool) OptionBool
	FoldBool(bool, func(string) bool) bool
	FoldBoolF(func() bool, func(string) bool) bool

	MapByte(func(string) byte) OptionByte
	FoldByte(byte, func(string) byte) byte
	FoldByteF(func() byte, func(string) byte) byte

	MapComplex128(func(string) complex128) OptionComplex128
	FoldComplex128(complex128, func(string) complex128) complex128
	FoldComplex128F(func() complex128, func(string) complex128) complex128

	MapComplex64(func(string) complex64) OptionComplex64
	FoldComplex64(complex64, func(string) complex64) complex64
	FoldComplex64F(func() complex64, func(string) complex64) complex64

	MapFloat32(func(string) float32) OptionFloat32
	FoldFloat32(float32, func(string) float32) float32
	FoldFloat32F(func() float32, func(string) float32) float32

	MapFloat64(func(string) float64) OptionFloat64
	FoldFloat64(float64, func(string) float64) float64
	FoldFloat64F(func() float64, func(string) float64) float64

	MapInt(func(string) int) OptionInt
	FoldInt(int, func(string) int) int
	FoldIntF(func() int, func(string) int) int

	MapInt16(func(string) int16) OptionInt16
	FoldInt16(int16, func(string) int16) int16
	FoldInt16F(func() int16, func(string) int16) int16

	MapInt32(func(string) int32) OptionInt32
	FoldInt32(int32, func(string) int32) int32
	FoldInt32F(func() int32, func(string) int32) int32

	MapInt64(func(string) int64) OptionInt64
	FoldInt64(int64, func(string) int64) int64
	FoldInt64F(func() int64, func(string) int64) int64

	MapInt8(func(string) int8) OptionInt8
	FoldInt8(int8, func(string) int8) int8
	FoldInt8F(func() int8, func(string) int8) int8

	MapRune(func(string) rune) OptionRune
	FoldRune(rune, func(string) rune) rune
	FoldRuneF(func() rune, func(string) rune) rune

	MapString(func(string) string) OptionString
	FoldString(string, func(string) string) string
	FoldStringF(func() string, func(string) string) string

	MapUInt(func(string) uint) OptionUInt
	FoldUInt(uint, func(string) uint) uint
	FoldUIntF(func() uint, func(string) uint) uint

	MapUInt16(func(string) uint16) OptionUInt16
	FoldUInt16(uint16, func(string) uint16) uint16
	FoldUInt16F(func() uint16, func(string) uint16) uint16

	MapUInt32(func(string) uint32) OptionUInt32
	FoldUInt32(uint32, func(string) uint32) uint32
	FoldUInt32F(func() uint32, func(string) uint32) uint32

	MapUInt64(func(string) uint64) OptionUInt64
	FoldUInt64(uint64, func(string) uint64) uint64
	FoldUInt64F(func() uint64, func(string) uint64) uint64

	MapUInt8(func(string) uint8) OptionUInt8
	FoldUInt8(uint8, func(string) uint8) uint8
	FoldUInt8F(func() uint8, func(string) uint8) uint8

	MapUintPtr(func(string) uintptr) OptionUintPtr
	FoldUintPtr(uintptr, func(string) uintptr) uintptr
	FoldUintPtrF(func() uintptr, func(string) uintptr) uintptr
 
}

// OptionUInt 
type OptionUInt interface {
	Map(func(uint))
	FoldF(func(), func(uint))

	MapBool(func(uint) bool) OptionBool
	FoldBool(bool, func(uint) bool) bool
	FoldBoolF(func() bool, func(uint) bool) bool

	MapByte(func(uint) byte) OptionByte
	FoldByte(byte, func(uint) byte) byte
	FoldByteF(func() byte, func(uint) byte) byte

	MapComplex128(func(uint) complex128) OptionComplex128
	FoldComplex128(complex128, func(uint) complex128) complex128
	FoldComplex128F(func() complex128, func(uint) complex128) complex128

	MapComplex64(func(uint) complex64) OptionComplex64
	FoldComplex64(complex64, func(uint) complex64) complex64
	FoldComplex64F(func() complex64, func(uint) complex64) complex64

	MapFloat32(func(uint) float32) OptionFloat32
	FoldFloat32(float32, func(uint) float32) float32
	FoldFloat32F(func() float32, func(uint) float32) float32

	MapFloat64(func(uint) float64) OptionFloat64
	FoldFloat64(float64, func(uint) float64) float64
	FoldFloat64F(func() float64, func(uint) float64) float64

	MapInt(func(uint) int) OptionInt
	FoldInt(int, func(uint) int) int
	FoldIntF(func() int, func(uint) int) int

	MapInt16(func(uint) int16) OptionInt16
	FoldInt16(int16, func(uint) int16) int16
	FoldInt16F(func() int16, func(uint) int16) int16

	MapInt32(func(uint) int32) OptionInt32
	FoldInt32(int32, func(uint) int32) int32
	FoldInt32F(func() int32, func(uint) int32) int32

	MapInt64(func(uint) int64) OptionInt64
	FoldInt64(int64, func(uint) int64) int64
	FoldInt64F(func() int64, func(uint) int64) int64

	MapInt8(func(uint) int8) OptionInt8
	FoldInt8(int8, func(uint) int8) int8
	FoldInt8F(func() int8, func(uint) int8) int8

	MapRune(func(uint) rune) OptionRune
	FoldRune(rune, func(uint) rune) rune
	FoldRuneF(func() rune, func(uint) rune) rune

	MapString(func(uint) string) OptionString
	FoldString(string, func(uint) string) string
	FoldStringF(func() string, func(uint) string) string

	MapUInt(func(uint) uint) OptionUInt
	FoldUInt(uint, func(uint) uint) uint
	FoldUIntF(func() uint, func(uint) uint) uint

	MapUInt16(func(uint) uint16) OptionUInt16
	FoldUInt16(uint16, func(uint) uint16) uint16
	FoldUInt16F(func() uint16, func(uint) uint16) uint16

	MapUInt32(func(uint) uint32) OptionUInt32
	FoldUInt32(uint32, func(uint) uint32) uint32
	FoldUInt32F(func() uint32, func(uint) uint32) uint32

	MapUInt64(func(uint) uint64) OptionUInt64
	FoldUInt64(uint64, func(uint) uint64) uint64
	FoldUInt64F(func() uint64, func(uint) uint64) uint64

	MapUInt8(func(uint) uint8) OptionUInt8
	FoldUInt8(uint8, func(uint) uint8) uint8
	FoldUInt8F(func() uint8, func(uint) uint8) uint8

	MapUintPtr(func(uint) uintptr) OptionUintPtr
	FoldUintPtr(uintptr, func(uint) uintptr) uintptr
	FoldUintPtrF(func() uintptr, func(uint) uintptr) uintptr
 
}

// OptionUInt16 
type OptionUInt16 interface {
	Map(func(uint16))
	FoldF(func(), func(uint16))

	MapBool(func(uint16) bool) OptionBool
	FoldBool(bool, func(uint16) bool) bool
	FoldBoolF(func() bool, func(uint16) bool) bool

	MapByte(func(uint16) byte) OptionByte
	FoldByte(byte, func(uint16) byte) byte
	FoldByteF(func() byte, func(uint16) byte) byte

	MapComplex128(func(uint16) complex128) OptionComplex128
	FoldComplex128(complex128, func(uint16) complex128) complex128
	FoldComplex128F(func() complex128, func(uint16) complex128) complex128

	MapComplex64(func(uint16) complex64) OptionComplex64
	FoldComplex64(complex64, func(uint16) complex64) complex64
	FoldComplex64F(func() complex64, func(uint16) complex64) complex64

	MapFloat32(func(uint16) float32) OptionFloat32
	FoldFloat32(float32, func(uint16) float32) float32
	FoldFloat32F(func() float32, func(uint16) float32) float32

	MapFloat64(func(uint16) float64) OptionFloat64
	FoldFloat64(float64, func(uint16) float64) float64
	FoldFloat64F(func() float64, func(uint16) float64) float64

	MapInt(func(uint16) int) OptionInt
	FoldInt(int, func(uint16) int) int
	FoldIntF(func() int, func(uint16) int) int

	MapInt16(func(uint16) int16) OptionInt16
	FoldInt16(int16, func(uint16) int16) int16
	FoldInt16F(func() int16, func(uint16) int16) int16

	MapInt32(func(uint16) int32) OptionInt32
	FoldInt32(int32, func(uint16) int32) int32
	FoldInt32F(func() int32, func(uint16) int32) int32

	MapInt64(func(uint16) int64) OptionInt64
	FoldInt64(int64, func(uint16) int64) int64
	FoldInt64F(func() int64, func(uint16) int64) int64

	MapInt8(func(uint16) int8) OptionInt8
	FoldInt8(int8, func(uint16) int8) int8
	FoldInt8F(func() int8, func(uint16) int8) int8

	MapRune(func(uint16) rune) OptionRune
	FoldRune(rune, func(uint16) rune) rune
	FoldRuneF(func() rune, func(uint16) rune) rune

	MapString(func(uint16) string) OptionString
	FoldString(string, func(uint16) string) string
	FoldStringF(func() string, func(uint16) string) string

	MapUInt(func(uint16) uint) OptionUInt
	FoldUInt(uint, func(uint16) uint) uint
	FoldUIntF(func() uint, func(uint16) uint) uint

	MapUInt16(func(uint16) uint16) OptionUInt16
	FoldUInt16(uint16, func(uint16) uint16) uint16
	FoldUInt16F(func() uint16, func(uint16) uint16) uint16

	MapUInt32(func(uint16) uint32) OptionUInt32
	FoldUInt32(uint32, func(uint16) uint32) uint32
	FoldUInt32F(func() uint32, func(uint16) uint32) uint32

	MapUInt64(func(uint16) uint64) OptionUInt64
	FoldUInt64(uint64, func(uint16) uint64) uint64
	FoldUInt64F(func() uint64, func(uint16) uint64) uint64

	MapUInt8(func(uint16) uint8) OptionUInt8
	FoldUInt8(uint8, func(uint16) uint8) uint8
	FoldUInt8F(func() uint8, func(uint16) uint8) uint8

	MapUintPtr(func(uint16) uintptr) OptionUintPtr
	FoldUintPtr(uintptr, func(uint16) uintptr) uintptr
	FoldUintPtrF(func() uintptr, func(uint16) uintptr) uintptr
 
}

// OptionUInt32 
type OptionUInt32 interface {
	Map(func(uint32))
	FoldF(func(), func(uint32))

	MapBool(func(uint32) bool) OptionBool
	FoldBool(bool, func(uint32) bool) bool
	FoldBoolF(func() bool, func(uint32) bool) bool

	MapByte(func(uint32) byte) OptionByte
	FoldByte(byte, func(uint32) byte) byte
	FoldByteF(func() byte, func(uint32) byte) byte

	MapComplex128(func(uint32) complex128) OptionComplex128
	FoldComplex128(complex128, func(uint32) complex128) complex128
	FoldComplex128F(func() complex128, func(uint32) complex128) complex128

	MapComplex64(func(uint32) complex64) OptionComplex64
	FoldComplex64(complex64, func(uint32) complex64) complex64
	FoldComplex64F(func() complex64, func(uint32) complex64) complex64

	MapFloat32(func(uint32) float32) OptionFloat32
	FoldFloat32(float32, func(uint32) float32) float32
	FoldFloat32F(func() float32, func(uint32) float32) float32

	MapFloat64(func(uint32) float64) OptionFloat64
	FoldFloat64(float64, func(uint32) float64) float64
	FoldFloat64F(func() float64, func(uint32) float64) float64

	MapInt(func(uint32) int) OptionInt
	FoldInt(int, func(uint32) int) int
	FoldIntF(func() int, func(uint32) int) int

	MapInt16(func(uint32) int16) OptionInt16
	FoldInt16(int16, func(uint32) int16) int16
	FoldInt16F(func() int16, func(uint32) int16) int16

	MapInt32(func(uint32) int32) OptionInt32
	FoldInt32(int32, func(uint32) int32) int32
	FoldInt32F(func() int32, func(uint32) int32) int32

	MapInt64(func(uint32) int64) OptionInt64
	FoldInt64(int64, func(uint32) int64) int64
	FoldInt64F(func() int64, func(uint32) int64) int64

	MapInt8(func(uint32) int8) OptionInt8
	FoldInt8(int8, func(uint32) int8) int8
	FoldInt8F(func() int8, func(uint32) int8) int8

	MapRune(func(uint32) rune) OptionRune
	FoldRune(rune, func(uint32) rune) rune
	FoldRuneF(func() rune, func(uint32) rune) rune

	MapString(func(uint32) string) OptionString
	FoldString(string, func(uint32) string) string
	FoldStringF(func() string, func(uint32) string) string

	MapUInt(func(uint32) uint) OptionUInt
	FoldUInt(uint, func(uint32) uint) uint
	FoldUIntF(func() uint, func(uint32) uint) uint

	MapUInt16(func(uint32) uint16) OptionUInt16
	FoldUInt16(uint16, func(uint32) uint16) uint16
	FoldUInt16F(func() uint16, func(uint32) uint16) uint16

	MapUInt32(func(uint32) uint32) OptionUInt32
	FoldUInt32(uint32, func(uint32) uint32) uint32
	FoldUInt32F(func() uint32, func(uint32) uint32) uint32

	MapUInt64(func(uint32) uint64) OptionUInt64
	FoldUInt64(uint64, func(uint32) uint64) uint64
	FoldUInt64F(func() uint64, func(uint32) uint64) uint64

	MapUInt8(func(uint32) uint8) OptionUInt8
	FoldUInt8(uint8, func(uint32) uint8) uint8
	FoldUInt8F(func() uint8, func(uint32) uint8) uint8

	MapUintPtr(func(uint32) uintptr) OptionUintPtr
	FoldUintPtr(uintptr, func(uint32) uintptr) uintptr
	FoldUintPtrF(func() uintptr, func(uint32) uintptr) uintptr
 
}

// OptionUInt64 
type OptionUInt64 interface {
	Map(func(uint64))
	FoldF(func(), func(uint64))

	MapBool(func(uint64) bool) OptionBool
	FoldBool(bool, func(uint64) bool) bool
	FoldBoolF(func() bool, func(uint64) bool) bool

	MapByte(func(uint64) byte) OptionByte
	FoldByte(byte, func(uint64) byte) byte
	FoldByteF(func() byte, func(uint64) byte) byte

	MapComplex128(func(uint64) complex128) OptionComplex128
	FoldComplex128(complex128, func(uint64) complex128) complex128
	FoldComplex128F(func() complex128, func(uint64) complex128) complex128

	MapComplex64(func(uint64) complex64) OptionComplex64
	FoldComplex64(complex64, func(uint64) complex64) complex64
	FoldComplex64F(func() complex64, func(uint64) complex64) complex64

	MapFloat32(func(uint64) float32) OptionFloat32
	FoldFloat32(float32, func(uint64) float32) float32
	FoldFloat32F(func() float32, func(uint64) float32) float32

	MapFloat64(func(uint64) float64) OptionFloat64
	FoldFloat64(float64, func(uint64) float64) float64
	FoldFloat64F(func() float64, func(uint64) float64) float64

	MapInt(func(uint64) int) OptionInt
	FoldInt(int, func(uint64) int) int
	FoldIntF(func() int, func(uint64) int) int

	MapInt16(func(uint64) int16) OptionInt16
	FoldInt16(int16, func(uint64) int16) int16
	FoldInt16F(func() int16, func(uint64) int16) int16

	MapInt32(func(uint64) int32) OptionInt32
	FoldInt32(int32, func(uint64) int32) int32
	FoldInt32F(func() int32, func(uint64) int32) int32

	MapInt64(func(uint64) int64) OptionInt64
	FoldInt64(int64, func(uint64) int64) int64
	FoldInt64F(func() int64, func(uint64) int64) int64

	MapInt8(func(uint64) int8) OptionInt8
	FoldInt8(int8, func(uint64) int8) int8
	FoldInt8F(func() int8, func(uint64) int8) int8

	MapRune(func(uint64) rune) OptionRune
	FoldRune(rune, func(uint64) rune) rune
	FoldRuneF(func() rune, func(uint64) rune) rune

	MapString(func(uint64) string) OptionString
	FoldString(string, func(uint64) string) string
	FoldStringF(func() string, func(uint64) string) string

	MapUInt(func(uint64) uint) OptionUInt
	FoldUInt(uint, func(uint64) uint) uint
	FoldUIntF(func() uint, func(uint64) uint) uint

	MapUInt16(func(uint64) uint16) OptionUInt16
	FoldUInt16(uint16, func(uint64) uint16) uint16
	FoldUInt16F(func() uint16, func(uint64) uint16) uint16

	MapUInt32(func(uint64) uint32) OptionUInt32
	FoldUInt32(uint32, func(uint64) uint32) uint32
	FoldUInt32F(func() uint32, func(uint64) uint32) uint32

	MapUInt64(func(uint64) uint64) OptionUInt64
	FoldUInt64(uint64, func(uint64) uint64) uint64
	FoldUInt64F(func() uint64, func(uint64) uint64) uint64

	MapUInt8(func(uint64) uint8) OptionUInt8
	FoldUInt8(uint8, func(uint64) uint8) uint8
	FoldUInt8F(func() uint8, func(uint64) uint8) uint8

	MapUintPtr(func(uint64) uintptr) OptionUintPtr
	FoldUintPtr(uintptr, func(uint64) uintptr) uintptr
	FoldUintPtrF(func() uintptr, func(uint64) uintptr) uintptr
 
}

// OptionUInt8 
type OptionUInt8 interface {
	Map(func(uint8))
	FoldF(func(), func(uint8))

	MapBool(func(uint8) bool) OptionBool
	FoldBool(bool, func(uint8) bool) bool
	FoldBoolF(func() bool, func(uint8) bool) bool

	MapByte(func(uint8) byte) OptionByte
	FoldByte(byte, func(uint8) byte) byte
	FoldByteF(func() byte, func(uint8) byte) byte

	MapComplex128(func(uint8) complex128) OptionComplex128
	FoldComplex128(complex128, func(uint8) complex128) complex128
	FoldComplex128F(func() complex128, func(uint8) complex128) complex128

	MapComplex64(func(uint8) complex64) OptionComplex64
	FoldComplex64(complex64, func(uint8) complex64) complex64
	FoldComplex64F(func() complex64, func(uint8) complex64) complex64

	MapFloat32(func(uint8) float32) OptionFloat32
	FoldFloat32(float32, func(uint8) float32) float32
	FoldFloat32F(func() float32, func(uint8) float32) float32

	MapFloat64(func(uint8) float64) OptionFloat64
	FoldFloat64(float64, func(uint8) float64) float64
	FoldFloat64F(func() float64, func(uint8) float64) float64

	MapInt(func(uint8) int) OptionInt
	FoldInt(int, func(uint8) int) int
	FoldIntF(func() int, func(uint8) int) int

	MapInt16(func(uint8) int16) OptionInt16
	FoldInt16(int16, func(uint8) int16) int16
	FoldInt16F(func() int16, func(uint8) int16) int16

	MapInt32(func(uint8) int32) OptionInt32
	FoldInt32(int32, func(uint8) int32) int32
	FoldInt32F(func() int32, func(uint8) int32) int32

	MapInt64(func(uint8) int64) OptionInt64
	FoldInt64(int64, func(uint8) int64) int64
	FoldInt64F(func() int64, func(uint8) int64) int64

	MapInt8(func(uint8) int8) OptionInt8
	FoldInt8(int8, func(uint8) int8) int8
	FoldInt8F(func() int8, func(uint8) int8) int8

	MapRune(func(uint8) rune) OptionRune
	FoldRune(rune, func(uint8) rune) rune
	FoldRuneF(func() rune, func(uint8) rune) rune

	MapString(func(uint8) string) OptionString
	FoldString(string, func(uint8) string) string
	FoldStringF(func() string, func(uint8) string) string

	MapUInt(func(uint8) uint) OptionUInt
	FoldUInt(uint, func(uint8) uint) uint
	FoldUIntF(func() uint, func(uint8) uint) uint

	MapUInt16(func(uint8) uint16) OptionUInt16
	FoldUInt16(uint16, func(uint8) uint16) uint16
	FoldUInt16F(func() uint16, func(uint8) uint16) uint16

	MapUInt32(func(uint8) uint32) OptionUInt32
	FoldUInt32(uint32, func(uint8) uint32) uint32
	FoldUInt32F(func() uint32, func(uint8) uint32) uint32

	MapUInt64(func(uint8) uint64) OptionUInt64
	FoldUInt64(uint64, func(uint8) uint64) uint64
	FoldUInt64F(func() uint64, func(uint8) uint64) uint64

	MapUInt8(func(uint8) uint8) OptionUInt8
	FoldUInt8(uint8, func(uint8) uint8) uint8
	FoldUInt8F(func() uint8, func(uint8) uint8) uint8

	MapUintPtr(func(uint8) uintptr) OptionUintPtr
	FoldUintPtr(uintptr, func(uint8) uintptr) uintptr
	FoldUintPtrF(func() uintptr, func(uint8) uintptr) uintptr
 
}

// OptionUintPtr 
type OptionUintPtr interface {
	Map(func(uintptr))
	FoldF(func(), func(uintptr))

	MapBool(func(uintptr) bool) OptionBool
	FoldBool(bool, func(uintptr) bool) bool
	FoldBoolF(func() bool, func(uintptr) bool) bool

	MapByte(func(uintptr) byte) OptionByte
	FoldByte(byte, func(uintptr) byte) byte
	FoldByteF(func() byte, func(uintptr) byte) byte

	MapComplex128(func(uintptr) complex128) OptionComplex128
	FoldComplex128(complex128, func(uintptr) complex128) complex128
	FoldComplex128F(func() complex128, func(uintptr) complex128) complex128

	MapComplex64(func(uintptr) complex64) OptionComplex64
	FoldComplex64(complex64, func(uintptr) complex64) complex64
	FoldComplex64F(func() complex64, func(uintptr) complex64) complex64

	MapFloat32(func(uintptr) float32) OptionFloat32
	FoldFloat32(float32, func(uintptr) float32) float32
	FoldFloat32F(func() float32, func(uintptr) float32) float32

	MapFloat64(func(uintptr) float64) OptionFloat64
	FoldFloat64(float64, func(uintptr) float64) float64
	FoldFloat64F(func() float64, func(uintptr) float64) float64

	MapInt(func(uintptr) int) OptionInt
	FoldInt(int, func(uintptr) int) int
	FoldIntF(func() int, func(uintptr) int) int

	MapInt16(func(uintptr) int16) OptionInt16
	FoldInt16(int16, func(uintptr) int16) int16
	FoldInt16F(func() int16, func(uintptr) int16) int16

	MapInt32(func(uintptr) int32) OptionInt32
	FoldInt32(int32, func(uintptr) int32) int32
	FoldInt32F(func() int32, func(uintptr) int32) int32

	MapInt64(func(uintptr) int64) OptionInt64
	FoldInt64(int64, func(uintptr) int64) int64
	FoldInt64F(func() int64, func(uintptr) int64) int64

	MapInt8(func(uintptr) int8) OptionInt8
	FoldInt8(int8, func(uintptr) int8) int8
	FoldInt8F(func() int8, func(uintptr) int8) int8

	MapRune(func(uintptr) rune) OptionRune
	FoldRune(rune, func(uintptr) rune) rune
	FoldRuneF(func() rune, func(uintptr) rune) rune

	MapString(func(uintptr) string) OptionString
	FoldString(string, func(uintptr) string) string
	FoldStringF(func() string, func(uintptr) string) string

	MapUInt(func(uintptr) uint) OptionUInt
	FoldUInt(uint, func(uintptr) uint) uint
	FoldUIntF(func() uint, func(uintptr) uint) uint

	MapUInt16(func(uintptr) uint16) OptionUInt16
	FoldUInt16(uint16, func(uintptr) uint16) uint16
	FoldUInt16F(func() uint16, func(uintptr) uint16) uint16

	MapUInt32(func(uintptr) uint32) OptionUInt32
	FoldUInt32(uint32, func(uintptr) uint32) uint32
	FoldUInt32F(func() uint32, func(uintptr) uint32) uint32

	MapUInt64(func(uintptr) uint64) OptionUInt64
	FoldUInt64(uint64, func(uintptr) uint64) uint64
	FoldUInt64F(func() uint64, func(uintptr) uint64) uint64

	MapUInt8(func(uintptr) uint8) OptionUInt8
	FoldUInt8(uint8, func(uintptr) uint8) uint8
	FoldUInt8F(func() uint8, func(uintptr) uint8) uint8

	MapUintPtr(func(uintptr) uintptr) OptionUintPtr
	FoldUintPtr(uintptr, func(uintptr) uintptr) uintptr
	FoldUintPtrF(func() uintptr, func(uintptr) uintptr) uintptr
 
}




func OptionBoolFrom(v bool, err error) OptionBool {
	if err != nil {
		return NoneBool()
	}
	return SomeBool(v)
}

func OptionByteFrom(v byte, err error) OptionByte {
	if err != nil {
		return NoneByte()
	}
	return SomeByte(v)
}

func OptionComplex128From(v complex128, err error) OptionComplex128 {
	if err != nil {
		return NoneComplex128()
	}
	return SomeComplex128(v)
}

func OptionComplex64From(v complex64, err error) OptionComplex64 {
	if err != nil {
		return NoneComplex64()
	}
	return SomeComplex64(v)
}

func OptionFloat32From(v float32, err error) OptionFloat32 {
	if err != nil {
		return NoneFloat32()
	}
	return SomeFloat32(v)
}

func OptionFloat64From(v float64, err error) OptionFloat64 {
	if err != nil {
		return NoneFloat64()
	}
	return SomeFloat64(v)
}

func OptionIntFrom(v int, err error) OptionInt {
	if err != nil {
		return NoneInt()
	}
	return SomeInt(v)
}

func OptionInt16From(v int16, err error) OptionInt16 {
	if err != nil {
		return NoneInt16()
	}
	return SomeInt16(v)
}

func OptionInt32From(v int32, err error) OptionInt32 {
	if err != nil {
		return NoneInt32()
	}
	return SomeInt32(v)
}

func OptionInt64From(v int64, err error) OptionInt64 {
	if err != nil {
		return NoneInt64()
	}
	return SomeInt64(v)
}

func OptionInt8From(v int8, err error) OptionInt8 {
	if err != nil {
		return NoneInt8()
	}
	return SomeInt8(v)
}

func OptionRuneFrom(v rune, err error) OptionRune {
	if err != nil {
		return NoneRune()
	}
	return SomeRune(v)
}

func OptionStringFrom(v string, err error) OptionString {
	if err != nil {
		return NoneString()
	}
	return SomeString(v)
}

func OptionUIntFrom(v uint, err error) OptionUInt {
	if err != nil {
		return NoneUInt()
	}
	return SomeUInt(v)
}

func OptionUInt16From(v uint16, err error) OptionUInt16 {
	if err != nil {
		return NoneUInt16()
	}
	return SomeUInt16(v)
}

func OptionUInt32From(v uint32, err error) OptionUInt32 {
	if err != nil {
		return NoneUInt32()
	}
	return SomeUInt32(v)
}

func OptionUInt64From(v uint64, err error) OptionUInt64 {
	if err != nil {
		return NoneUInt64()
	}
	return SomeUInt64(v)
}

func OptionUInt8From(v uint8, err error) OptionUInt8 {
	if err != nil {
		return NoneUInt8()
	}
	return SomeUInt8(v)
}

func OptionUintPtrFrom(v uintptr, err error) OptionUintPtr {
	if err != nil {
		return NoneUintPtr()
	}
	return SomeUintPtr(v)
}




type noneBool struct{}

func NoneBool() OptionBool {
	return noneBool{}
}

func (n noneBool) Map(f func(bool)) {}

func (n noneBool) FoldF(l func(), r func(bool)) { l() }


func (n noneBool) MapBool(f func(v bool) bool) OptionBool {
	return noneBool{}
}

func (n noneBool) FoldBool(a bool, f func(v bool) bool) bool {
	return a
}

func (n noneBool) FoldBoolF(a func() bool, f func(v bool) bool) bool {
	return a()
}

func (n noneBool) MapByte(f func(v bool) byte) OptionByte {
	return noneByte{}
}

func (n noneBool) FoldByte(a byte, f func(v bool) byte) byte {
	return a
}

func (n noneBool) FoldByteF(a func() byte, f func(v bool) byte) byte {
	return a()
}

func (n noneBool) MapComplex128(f func(v bool) complex128) OptionComplex128 {
	return noneComplex128{}
}

func (n noneBool) FoldComplex128(a complex128, f func(v bool) complex128) complex128 {
	return a
}

func (n noneBool) FoldComplex128F(a func() complex128, f func(v bool) complex128) complex128 {
	return a()
}

func (n noneBool) MapComplex64(f func(v bool) complex64) OptionComplex64 {
	return noneComplex64{}
}

func (n noneBool) FoldComplex64(a complex64, f func(v bool) complex64) complex64 {
	return a
}

func (n noneBool) FoldComplex64F(a func() complex64, f func(v bool) complex64) complex64 {
	return a()
}

func (n noneBool) MapFloat32(f func(v bool) float32) OptionFloat32 {
	return noneFloat32{}
}

func (n noneBool) FoldFloat32(a float32, f func(v bool) float32) float32 {
	return a
}

func (n noneBool) FoldFloat32F(a func() float32, f func(v bool) float32) float32 {
	return a()
}

func (n noneBool) MapFloat64(f func(v bool) float64) OptionFloat64 {
	return noneFloat64{}
}

func (n noneBool) FoldFloat64(a float64, f func(v bool) float64) float64 {
	return a
}

func (n noneBool) FoldFloat64F(a func() float64, f func(v bool) float64) float64 {
	return a()
}

func (n noneBool) MapInt(f func(v bool) int) OptionInt {
	return noneInt{}
}

func (n noneBool) FoldInt(a int, f func(v bool) int) int {
	return a
}

func (n noneBool) FoldIntF(a func() int, f func(v bool) int) int {
	return a()
}

func (n noneBool) MapInt16(f func(v bool) int16) OptionInt16 {
	return noneInt16{}
}

func (n noneBool) FoldInt16(a int16, f func(v bool) int16) int16 {
	return a
}

func (n noneBool) FoldInt16F(a func() int16, f func(v bool) int16) int16 {
	return a()
}

func (n noneBool) MapInt32(f func(v bool) int32) OptionInt32 {
	return noneInt32{}
}

func (n noneBool) FoldInt32(a int32, f func(v bool) int32) int32 {
	return a
}

func (n noneBool) FoldInt32F(a func() int32, f func(v bool) int32) int32 {
	return a()
}

func (n noneBool) MapInt64(f func(v bool) int64) OptionInt64 {
	return noneInt64{}
}

func (n noneBool) FoldInt64(a int64, f func(v bool) int64) int64 {
	return a
}

func (n noneBool) FoldInt64F(a func() int64, f func(v bool) int64) int64 {
	return a()
}

func (n noneBool) MapInt8(f func(v bool) int8) OptionInt8 {
	return noneInt8{}
}

func (n noneBool) FoldInt8(a int8, f func(v bool) int8) int8 {
	return a
}

func (n noneBool) FoldInt8F(a func() int8, f func(v bool) int8) int8 {
	return a()
}

func (n noneBool) MapRune(f func(v bool) rune) OptionRune {
	return noneRune{}
}

func (n noneBool) FoldRune(a rune, f func(v bool) rune) rune {
	return a
}

func (n noneBool) FoldRuneF(a func() rune, f func(v bool) rune) rune {
	return a()
}

func (n noneBool) MapString(f func(v bool) string) OptionString {
	return noneString{}
}

func (n noneBool) FoldString(a string, f func(v bool) string) string {
	return a
}

func (n noneBool) FoldStringF(a func() string, f func(v bool) string) string {
	return a()
}

func (n noneBool) MapUInt(f func(v bool) uint) OptionUInt {
	return noneUInt{}
}

func (n noneBool) FoldUInt(a uint, f func(v bool) uint) uint {
	return a
}

func (n noneBool) FoldUIntF(a func() uint, f func(v bool) uint) uint {
	return a()
}

func (n noneBool) MapUInt16(f func(v bool) uint16) OptionUInt16 {
	return noneUInt16{}
}

func (n noneBool) FoldUInt16(a uint16, f func(v bool) uint16) uint16 {
	return a
}

func (n noneBool) FoldUInt16F(a func() uint16, f func(v bool) uint16) uint16 {
	return a()
}

func (n noneBool) MapUInt32(f func(v bool) uint32) OptionUInt32 {
	return noneUInt32{}
}

func (n noneBool) FoldUInt32(a uint32, f func(v bool) uint32) uint32 {
	return a
}

func (n noneBool) FoldUInt32F(a func() uint32, f func(v bool) uint32) uint32 {
	return a()
}

func (n noneBool) MapUInt64(f func(v bool) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneBool) FoldUInt64(a uint64, f func(v bool) uint64) uint64 {
	return a
}

func (n noneBool) FoldUInt64F(a func() uint64, f func(v bool) uint64) uint64 {
	return a()
}

func (n noneBool) MapUInt8(f func(v bool) uint8) OptionUInt8 {
	return noneUInt8{}
}

func (n noneBool) FoldUInt8(a uint8, f func(v bool) uint8) uint8 {
	return a
}

func (n noneBool) FoldUInt8F(a func() uint8, f func(v bool) uint8) uint8 {
	return a()
}

func (n noneBool) MapUintPtr(f func(v bool) uintptr) OptionUintPtr {
	return noneUintPtr{}
}

func (n noneBool) FoldUintPtr(a uintptr, f func(v bool) uintptr) uintptr {
	return a
}

func (n noneBool) FoldUintPtrF(a func() uintptr, f func(v bool) uintptr) uintptr {
	return a()
}



type someBool struct {
	v bool
}

func SomeBool(v bool) OptionBool {
	return someBool{v}
}

func (s someBool) Map(f func(bool)) { f(s.v) }

func (s someBool) FoldF(l func(), r func(bool)) { r(s.v) }


func (s someBool) MapBool(f func(v bool) bool) OptionBool {
	return SomeBool(f(s.v))
}

func (s someBool) FoldBool(a bool, f func(v bool) bool) bool {
	return f(s.v)
}

func (s someBool) FoldBoolF(a func() bool, f func(v bool) bool) bool {
	return f(s.v)
}


func (s someBool) MapByte(f func(v bool) byte) OptionByte {
	return SomeByte(f(s.v))
}

func (s someBool) FoldByte(a byte, f func(v bool) byte) byte {
	return f(s.v)
}

func (s someBool) FoldByteF(a func() byte, f func(v bool) byte) byte {
	return f(s.v)
}


func (s someBool) MapComplex128(f func(v bool) complex128) OptionComplex128 {
	return SomeComplex128(f(s.v))
}

func (s someBool) FoldComplex128(a complex128, f func(v bool) complex128) complex128 {
	return f(s.v)
}

func (s someBool) FoldComplex128F(a func() complex128, f func(v bool) complex128) complex128 {
	return f(s.v)
}


func (s someBool) MapComplex64(f func(v bool) complex64) OptionComplex64 {
	return SomeComplex64(f(s.v))
}

func (s someBool) FoldComplex64(a complex64, f func(v bool) complex64) complex64 {
	return f(s.v)
}

func (s someBool) FoldComplex64F(a func() complex64, f func(v bool) complex64) complex64 {
	return f(s.v)
}


func (s someBool) MapFloat32(f func(v bool) float32) OptionFloat32 {
	return SomeFloat32(f(s.v))
}

func (s someBool) FoldFloat32(a float32, f func(v bool) float32) float32 {
	return f(s.v)
}

func (s someBool) FoldFloat32F(a func() float32, f func(v bool) float32) float32 {
	return f(s.v)
}


func (s someBool) MapFloat64(f func(v bool) float64) OptionFloat64 {
	return SomeFloat64(f(s.v))
}

func (s someBool) FoldFloat64(a float64, f func(v bool) float64) float64 {
	return f(s.v)
}

func (s someBool) FoldFloat64F(a func() float64, f func(v bool) float64) float64 {
	return f(s.v)
}


func (s someBool) MapInt(f func(v bool) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someBool) FoldInt(a int, f func(v bool) int) int {
	return f(s.v)
}

func (s someBool) FoldIntF(a func() int, f func(v bool) int) int {
	return f(s.v)
}


func (s someBool) MapInt16(f func(v bool) int16) OptionInt16 {
	return SomeInt16(f(s.v))
}

func (s someBool) FoldInt16(a int16, f func(v bool) int16) int16 {
	return f(s.v)
}

func (s someBool) FoldInt16F(a func() int16, f func(v bool) int16) int16 {
	return f(s.v)
}


func (s someBool) MapInt32(f func(v bool) int32) OptionInt32 {
	return SomeInt32(f(s.v))
}

func (s someBool) FoldInt32(a int32, f func(v bool) int32) int32 {
	return f(s.v)
}

func (s someBool) FoldInt32F(a func() int32, f func(v bool) int32) int32 {
	return f(s.v)
}


func (s someBool) MapInt64(f func(v bool) int64) OptionInt64 {
	return SomeInt64(f(s.v))
}

func (s someBool) FoldInt64(a int64, f func(v bool) int64) int64 {
	return f(s.v)
}

func (s someBool) FoldInt64F(a func() int64, f func(v bool) int64) int64 {
	return f(s.v)
}


func (s someBool) MapInt8(f func(v bool) int8) OptionInt8 {
	return SomeInt8(f(s.v))
}

func (s someBool) FoldInt8(a int8, f func(v bool) int8) int8 {
	return f(s.v)
}

func (s someBool) FoldInt8F(a func() int8, f func(v bool) int8) int8 {
	return f(s.v)
}


func (s someBool) MapRune(f func(v bool) rune) OptionRune {
	return SomeRune(f(s.v))
}

func (s someBool) FoldRune(a rune, f func(v bool) rune) rune {
	return f(s.v)
}

func (s someBool) FoldRuneF(a func() rune, f func(v bool) rune) rune {
	return f(s.v)
}


func (s someBool) MapString(f func(v bool) string) OptionString {
	return SomeString(f(s.v))
}

func (s someBool) FoldString(a string, f func(v bool) string) string {
	return f(s.v)
}

func (s someBool) FoldStringF(a func() string, f func(v bool) string) string {
	return f(s.v)
}


func (s someBool) MapUInt(f func(v bool) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someBool) FoldUInt(a uint, f func(v bool) uint) uint {
	return f(s.v)
}

func (s someBool) FoldUIntF(a func() uint, f func(v bool) uint) uint {
	return f(s.v)
}


func (s someBool) MapUInt16(f func(v bool) uint16) OptionUInt16 {
	return SomeUInt16(f(s.v))
}

func (s someBool) FoldUInt16(a uint16, f func(v bool) uint16) uint16 {
	return f(s.v)
}

func (s someBool) FoldUInt16F(a func() uint16, f func(v bool) uint16) uint16 {
	return f(s.v)
}


func (s someBool) MapUInt32(f func(v bool) uint32) OptionUInt32 {
	return SomeUInt32(f(s.v))
}

func (s someBool) FoldUInt32(a uint32, f func(v bool) uint32) uint32 {
	return f(s.v)
}

func (s someBool) FoldUInt32F(a func() uint32, f func(v bool) uint32) uint32 {
	return f(s.v)
}


func (s someBool) MapUInt64(f func(v bool) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someBool) FoldUInt64(a uint64, f func(v bool) uint64) uint64 {
	return f(s.v)
}

func (s someBool) FoldUInt64F(a func() uint64, f func(v bool) uint64) uint64 {
	return f(s.v)
}


func (s someBool) MapUInt8(f func(v bool) uint8) OptionUInt8 {
	return SomeUInt8(f(s.v))
}

func (s someBool) FoldUInt8(a uint8, f func(v bool) uint8) uint8 {
	return f(s.v)
}

func (s someBool) FoldUInt8F(a func() uint8, f func(v bool) uint8) uint8 {
	return f(s.v)
}


func (s someBool) MapUintPtr(f func(v bool) uintptr) OptionUintPtr {
	return SomeUintPtr(f(s.v))
}

func (s someBool) FoldUintPtr(a uintptr, f func(v bool) uintptr) uintptr {
	return f(s.v)
}

func (s someBool) FoldUintPtrF(a func() uintptr, f func(v bool) uintptr) uintptr {
	return f(s.v)
}




type noneByte struct{}

func NoneByte() OptionByte {
	return noneByte{}
}

func (n noneByte) Map(f func(byte)) {}

func (n noneByte) FoldF(l func(), r func(byte)) { l() }


func (n noneByte) MapBool(f func(v byte) bool) OptionBool {
	return noneBool{}
}

func (n noneByte) FoldBool(a bool, f func(v byte) bool) bool {
	return a
}

func (n noneByte) FoldBoolF(a func() bool, f func(v byte) bool) bool {
	return a()
}

func (n noneByte) MapByte(f func(v byte) byte) OptionByte {
	return noneByte{}
}

func (n noneByte) FoldByte(a byte, f func(v byte) byte) byte {
	return a
}

func (n noneByte) FoldByteF(a func() byte, f func(v byte) byte) byte {
	return a()
}

func (n noneByte) MapComplex128(f func(v byte) complex128) OptionComplex128 {
	return noneComplex128{}
}

func (n noneByte) FoldComplex128(a complex128, f func(v byte) complex128) complex128 {
	return a
}

func (n noneByte) FoldComplex128F(a func() complex128, f func(v byte) complex128) complex128 {
	return a()
}

func (n noneByte) MapComplex64(f func(v byte) complex64) OptionComplex64 {
	return noneComplex64{}
}

func (n noneByte) FoldComplex64(a complex64, f func(v byte) complex64) complex64 {
	return a
}

func (n noneByte) FoldComplex64F(a func() complex64, f func(v byte) complex64) complex64 {
	return a()
}

func (n noneByte) MapFloat32(f func(v byte) float32) OptionFloat32 {
	return noneFloat32{}
}

func (n noneByte) FoldFloat32(a float32, f func(v byte) float32) float32 {
	return a
}

func (n noneByte) FoldFloat32F(a func() float32, f func(v byte) float32) float32 {
	return a()
}

func (n noneByte) MapFloat64(f func(v byte) float64) OptionFloat64 {
	return noneFloat64{}
}

func (n noneByte) FoldFloat64(a float64, f func(v byte) float64) float64 {
	return a
}

func (n noneByte) FoldFloat64F(a func() float64, f func(v byte) float64) float64 {
	return a()
}

func (n noneByte) MapInt(f func(v byte) int) OptionInt {
	return noneInt{}
}

func (n noneByte) FoldInt(a int, f func(v byte) int) int {
	return a
}

func (n noneByte) FoldIntF(a func() int, f func(v byte) int) int {
	return a()
}

func (n noneByte) MapInt16(f func(v byte) int16) OptionInt16 {
	return noneInt16{}
}

func (n noneByte) FoldInt16(a int16, f func(v byte) int16) int16 {
	return a
}

func (n noneByte) FoldInt16F(a func() int16, f func(v byte) int16) int16 {
	return a()
}

func (n noneByte) MapInt32(f func(v byte) int32) OptionInt32 {
	return noneInt32{}
}

func (n noneByte) FoldInt32(a int32, f func(v byte) int32) int32 {
	return a
}

func (n noneByte) FoldInt32F(a func() int32, f func(v byte) int32) int32 {
	return a()
}

func (n noneByte) MapInt64(f func(v byte) int64) OptionInt64 {
	return noneInt64{}
}

func (n noneByte) FoldInt64(a int64, f func(v byte) int64) int64 {
	return a
}

func (n noneByte) FoldInt64F(a func() int64, f func(v byte) int64) int64 {
	return a()
}

func (n noneByte) MapInt8(f func(v byte) int8) OptionInt8 {
	return noneInt8{}
}

func (n noneByte) FoldInt8(a int8, f func(v byte) int8) int8 {
	return a
}

func (n noneByte) FoldInt8F(a func() int8, f func(v byte) int8) int8 {
	return a()
}

func (n noneByte) MapRune(f func(v byte) rune) OptionRune {
	return noneRune{}
}

func (n noneByte) FoldRune(a rune, f func(v byte) rune) rune {
	return a
}

func (n noneByte) FoldRuneF(a func() rune, f func(v byte) rune) rune {
	return a()
}

func (n noneByte) MapString(f func(v byte) string) OptionString {
	return noneString{}
}

func (n noneByte) FoldString(a string, f func(v byte) string) string {
	return a
}

func (n noneByte) FoldStringF(a func() string, f func(v byte) string) string {
	return a()
}

func (n noneByte) MapUInt(f func(v byte) uint) OptionUInt {
	return noneUInt{}
}

func (n noneByte) FoldUInt(a uint, f func(v byte) uint) uint {
	return a
}

func (n noneByte) FoldUIntF(a func() uint, f func(v byte) uint) uint {
	return a()
}

func (n noneByte) MapUInt16(f func(v byte) uint16) OptionUInt16 {
	return noneUInt16{}
}

func (n noneByte) FoldUInt16(a uint16, f func(v byte) uint16) uint16 {
	return a
}

func (n noneByte) FoldUInt16F(a func() uint16, f func(v byte) uint16) uint16 {
	return a()
}

func (n noneByte) MapUInt32(f func(v byte) uint32) OptionUInt32 {
	return noneUInt32{}
}

func (n noneByte) FoldUInt32(a uint32, f func(v byte) uint32) uint32 {
	return a
}

func (n noneByte) FoldUInt32F(a func() uint32, f func(v byte) uint32) uint32 {
	return a()
}

func (n noneByte) MapUInt64(f func(v byte) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneByte) FoldUInt64(a uint64, f func(v byte) uint64) uint64 {
	return a
}

func (n noneByte) FoldUInt64F(a func() uint64, f func(v byte) uint64) uint64 {
	return a()
}

func (n noneByte) MapUInt8(f func(v byte) uint8) OptionUInt8 {
	return noneUInt8{}
}

func (n noneByte) FoldUInt8(a uint8, f func(v byte) uint8) uint8 {
	return a
}

func (n noneByte) FoldUInt8F(a func() uint8, f func(v byte) uint8) uint8 {
	return a()
}

func (n noneByte) MapUintPtr(f func(v byte) uintptr) OptionUintPtr {
	return noneUintPtr{}
}

func (n noneByte) FoldUintPtr(a uintptr, f func(v byte) uintptr) uintptr {
	return a
}

func (n noneByte) FoldUintPtrF(a func() uintptr, f func(v byte) uintptr) uintptr {
	return a()
}



type someByte struct {
	v byte
}

func SomeByte(v byte) OptionByte {
	return someByte{v}
}

func (s someByte) Map(f func(byte)) { f(s.v) }

func (s someByte) FoldF(l func(), r func(byte)) { r(s.v) }


func (s someByte) MapBool(f func(v byte) bool) OptionBool {
	return SomeBool(f(s.v))
}

func (s someByte) FoldBool(a bool, f func(v byte) bool) bool {
	return f(s.v)
}

func (s someByte) FoldBoolF(a func() bool, f func(v byte) bool) bool {
	return f(s.v)
}


func (s someByte) MapByte(f func(v byte) byte) OptionByte {
	return SomeByte(f(s.v))
}

func (s someByte) FoldByte(a byte, f func(v byte) byte) byte {
	return f(s.v)
}

func (s someByte) FoldByteF(a func() byte, f func(v byte) byte) byte {
	return f(s.v)
}


func (s someByte) MapComplex128(f func(v byte) complex128) OptionComplex128 {
	return SomeComplex128(f(s.v))
}

func (s someByte) FoldComplex128(a complex128, f func(v byte) complex128) complex128 {
	return f(s.v)
}

func (s someByte) FoldComplex128F(a func() complex128, f func(v byte) complex128) complex128 {
	return f(s.v)
}


func (s someByte) MapComplex64(f func(v byte) complex64) OptionComplex64 {
	return SomeComplex64(f(s.v))
}

func (s someByte) FoldComplex64(a complex64, f func(v byte) complex64) complex64 {
	return f(s.v)
}

func (s someByte) FoldComplex64F(a func() complex64, f func(v byte) complex64) complex64 {
	return f(s.v)
}


func (s someByte) MapFloat32(f func(v byte) float32) OptionFloat32 {
	return SomeFloat32(f(s.v))
}

func (s someByte) FoldFloat32(a float32, f func(v byte) float32) float32 {
	return f(s.v)
}

func (s someByte) FoldFloat32F(a func() float32, f func(v byte) float32) float32 {
	return f(s.v)
}


func (s someByte) MapFloat64(f func(v byte) float64) OptionFloat64 {
	return SomeFloat64(f(s.v))
}

func (s someByte) FoldFloat64(a float64, f func(v byte) float64) float64 {
	return f(s.v)
}

func (s someByte) FoldFloat64F(a func() float64, f func(v byte) float64) float64 {
	return f(s.v)
}


func (s someByte) MapInt(f func(v byte) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someByte) FoldInt(a int, f func(v byte) int) int {
	return f(s.v)
}

func (s someByte) FoldIntF(a func() int, f func(v byte) int) int {
	return f(s.v)
}


func (s someByte) MapInt16(f func(v byte) int16) OptionInt16 {
	return SomeInt16(f(s.v))
}

func (s someByte) FoldInt16(a int16, f func(v byte) int16) int16 {
	return f(s.v)
}

func (s someByte) FoldInt16F(a func() int16, f func(v byte) int16) int16 {
	return f(s.v)
}


func (s someByte) MapInt32(f func(v byte) int32) OptionInt32 {
	return SomeInt32(f(s.v))
}

func (s someByte) FoldInt32(a int32, f func(v byte) int32) int32 {
	return f(s.v)
}

func (s someByte) FoldInt32F(a func() int32, f func(v byte) int32) int32 {
	return f(s.v)
}


func (s someByte) MapInt64(f func(v byte) int64) OptionInt64 {
	return SomeInt64(f(s.v))
}

func (s someByte) FoldInt64(a int64, f func(v byte) int64) int64 {
	return f(s.v)
}

func (s someByte) FoldInt64F(a func() int64, f func(v byte) int64) int64 {
	return f(s.v)
}


func (s someByte) MapInt8(f func(v byte) int8) OptionInt8 {
	return SomeInt8(f(s.v))
}

func (s someByte) FoldInt8(a int8, f func(v byte) int8) int8 {
	return f(s.v)
}

func (s someByte) FoldInt8F(a func() int8, f func(v byte) int8) int8 {
	return f(s.v)
}


func (s someByte) MapRune(f func(v byte) rune) OptionRune {
	return SomeRune(f(s.v))
}

func (s someByte) FoldRune(a rune, f func(v byte) rune) rune {
	return f(s.v)
}

func (s someByte) FoldRuneF(a func() rune, f func(v byte) rune) rune {
	return f(s.v)
}


func (s someByte) MapString(f func(v byte) string) OptionString {
	return SomeString(f(s.v))
}

func (s someByte) FoldString(a string, f func(v byte) string) string {
	return f(s.v)
}

func (s someByte) FoldStringF(a func() string, f func(v byte) string) string {
	return f(s.v)
}


func (s someByte) MapUInt(f func(v byte) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someByte) FoldUInt(a uint, f func(v byte) uint) uint {
	return f(s.v)
}

func (s someByte) FoldUIntF(a func() uint, f func(v byte) uint) uint {
	return f(s.v)
}


func (s someByte) MapUInt16(f func(v byte) uint16) OptionUInt16 {
	return SomeUInt16(f(s.v))
}

func (s someByte) FoldUInt16(a uint16, f func(v byte) uint16) uint16 {
	return f(s.v)
}

func (s someByte) FoldUInt16F(a func() uint16, f func(v byte) uint16) uint16 {
	return f(s.v)
}


func (s someByte) MapUInt32(f func(v byte) uint32) OptionUInt32 {
	return SomeUInt32(f(s.v))
}

func (s someByte) FoldUInt32(a uint32, f func(v byte) uint32) uint32 {
	return f(s.v)
}

func (s someByte) FoldUInt32F(a func() uint32, f func(v byte) uint32) uint32 {
	return f(s.v)
}


func (s someByte) MapUInt64(f func(v byte) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someByte) FoldUInt64(a uint64, f func(v byte) uint64) uint64 {
	return f(s.v)
}

func (s someByte) FoldUInt64F(a func() uint64, f func(v byte) uint64) uint64 {
	return f(s.v)
}


func (s someByte) MapUInt8(f func(v byte) uint8) OptionUInt8 {
	return SomeUInt8(f(s.v))
}

func (s someByte) FoldUInt8(a uint8, f func(v byte) uint8) uint8 {
	return f(s.v)
}

func (s someByte) FoldUInt8F(a func() uint8, f func(v byte) uint8) uint8 {
	return f(s.v)
}


func (s someByte) MapUintPtr(f func(v byte) uintptr) OptionUintPtr {
	return SomeUintPtr(f(s.v))
}

func (s someByte) FoldUintPtr(a uintptr, f func(v byte) uintptr) uintptr {
	return f(s.v)
}

func (s someByte) FoldUintPtrF(a func() uintptr, f func(v byte) uintptr) uintptr {
	return f(s.v)
}




type noneComplex128 struct{}

func NoneComplex128() OptionComplex128 {
	return noneComplex128{}
}

func (n noneComplex128) Map(f func(complex128)) {}

func (n noneComplex128) FoldF(l func(), r func(complex128)) { l() }


func (n noneComplex128) MapBool(f func(v complex128) bool) OptionBool {
	return noneBool{}
}

func (n noneComplex128) FoldBool(a bool, f func(v complex128) bool) bool {
	return a
}

func (n noneComplex128) FoldBoolF(a func() bool, f func(v complex128) bool) bool {
	return a()
}

func (n noneComplex128) MapByte(f func(v complex128) byte) OptionByte {
	return noneByte{}
}

func (n noneComplex128) FoldByte(a byte, f func(v complex128) byte) byte {
	return a
}

func (n noneComplex128) FoldByteF(a func() byte, f func(v complex128) byte) byte {
	return a()
}

func (n noneComplex128) MapComplex128(f func(v complex128) complex128) OptionComplex128 {
	return noneComplex128{}
}

func (n noneComplex128) FoldComplex128(a complex128, f func(v complex128) complex128) complex128 {
	return a
}

func (n noneComplex128) FoldComplex128F(a func() complex128, f func(v complex128) complex128) complex128 {
	return a()
}

func (n noneComplex128) MapComplex64(f func(v complex128) complex64) OptionComplex64 {
	return noneComplex64{}
}

func (n noneComplex128) FoldComplex64(a complex64, f func(v complex128) complex64) complex64 {
	return a
}

func (n noneComplex128) FoldComplex64F(a func() complex64, f func(v complex128) complex64) complex64 {
	return a()
}

func (n noneComplex128) MapFloat32(f func(v complex128) float32) OptionFloat32 {
	return noneFloat32{}
}

func (n noneComplex128) FoldFloat32(a float32, f func(v complex128) float32) float32 {
	return a
}

func (n noneComplex128) FoldFloat32F(a func() float32, f func(v complex128) float32) float32 {
	return a()
}

func (n noneComplex128) MapFloat64(f func(v complex128) float64) OptionFloat64 {
	return noneFloat64{}
}

func (n noneComplex128) FoldFloat64(a float64, f func(v complex128) float64) float64 {
	return a
}

func (n noneComplex128) FoldFloat64F(a func() float64, f func(v complex128) float64) float64 {
	return a()
}

func (n noneComplex128) MapInt(f func(v complex128) int) OptionInt {
	return noneInt{}
}

func (n noneComplex128) FoldInt(a int, f func(v complex128) int) int {
	return a
}

func (n noneComplex128) FoldIntF(a func() int, f func(v complex128) int) int {
	return a()
}

func (n noneComplex128) MapInt16(f func(v complex128) int16) OptionInt16 {
	return noneInt16{}
}

func (n noneComplex128) FoldInt16(a int16, f func(v complex128) int16) int16 {
	return a
}

func (n noneComplex128) FoldInt16F(a func() int16, f func(v complex128) int16) int16 {
	return a()
}

func (n noneComplex128) MapInt32(f func(v complex128) int32) OptionInt32 {
	return noneInt32{}
}

func (n noneComplex128) FoldInt32(a int32, f func(v complex128) int32) int32 {
	return a
}

func (n noneComplex128) FoldInt32F(a func() int32, f func(v complex128) int32) int32 {
	return a()
}

func (n noneComplex128) MapInt64(f func(v complex128) int64) OptionInt64 {
	return noneInt64{}
}

func (n noneComplex128) FoldInt64(a int64, f func(v complex128) int64) int64 {
	return a
}

func (n noneComplex128) FoldInt64F(a func() int64, f func(v complex128) int64) int64 {
	return a()
}

func (n noneComplex128) MapInt8(f func(v complex128) int8) OptionInt8 {
	return noneInt8{}
}

func (n noneComplex128) FoldInt8(a int8, f func(v complex128) int8) int8 {
	return a
}

func (n noneComplex128) FoldInt8F(a func() int8, f func(v complex128) int8) int8 {
	return a()
}

func (n noneComplex128) MapRune(f func(v complex128) rune) OptionRune {
	return noneRune{}
}

func (n noneComplex128) FoldRune(a rune, f func(v complex128) rune) rune {
	return a
}

func (n noneComplex128) FoldRuneF(a func() rune, f func(v complex128) rune) rune {
	return a()
}

func (n noneComplex128) MapString(f func(v complex128) string) OptionString {
	return noneString{}
}

func (n noneComplex128) FoldString(a string, f func(v complex128) string) string {
	return a
}

func (n noneComplex128) FoldStringF(a func() string, f func(v complex128) string) string {
	return a()
}

func (n noneComplex128) MapUInt(f func(v complex128) uint) OptionUInt {
	return noneUInt{}
}

func (n noneComplex128) FoldUInt(a uint, f func(v complex128) uint) uint {
	return a
}

func (n noneComplex128) FoldUIntF(a func() uint, f func(v complex128) uint) uint {
	return a()
}

func (n noneComplex128) MapUInt16(f func(v complex128) uint16) OptionUInt16 {
	return noneUInt16{}
}

func (n noneComplex128) FoldUInt16(a uint16, f func(v complex128) uint16) uint16 {
	return a
}

func (n noneComplex128) FoldUInt16F(a func() uint16, f func(v complex128) uint16) uint16 {
	return a()
}

func (n noneComplex128) MapUInt32(f func(v complex128) uint32) OptionUInt32 {
	return noneUInt32{}
}

func (n noneComplex128) FoldUInt32(a uint32, f func(v complex128) uint32) uint32 {
	return a
}

func (n noneComplex128) FoldUInt32F(a func() uint32, f func(v complex128) uint32) uint32 {
	return a()
}

func (n noneComplex128) MapUInt64(f func(v complex128) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneComplex128) FoldUInt64(a uint64, f func(v complex128) uint64) uint64 {
	return a
}

func (n noneComplex128) FoldUInt64F(a func() uint64, f func(v complex128) uint64) uint64 {
	return a()
}

func (n noneComplex128) MapUInt8(f func(v complex128) uint8) OptionUInt8 {
	return noneUInt8{}
}

func (n noneComplex128) FoldUInt8(a uint8, f func(v complex128) uint8) uint8 {
	return a
}

func (n noneComplex128) FoldUInt8F(a func() uint8, f func(v complex128) uint8) uint8 {
	return a()
}

func (n noneComplex128) MapUintPtr(f func(v complex128) uintptr) OptionUintPtr {
	return noneUintPtr{}
}

func (n noneComplex128) FoldUintPtr(a uintptr, f func(v complex128) uintptr) uintptr {
	return a
}

func (n noneComplex128) FoldUintPtrF(a func() uintptr, f func(v complex128) uintptr) uintptr {
	return a()
}



type someComplex128 struct {
	v complex128
}

func SomeComplex128(v complex128) OptionComplex128 {
	return someComplex128{v}
}

func (s someComplex128) Map(f func(complex128)) { f(s.v) }

func (s someComplex128) FoldF(l func(), r func(complex128)) { r(s.v) }


func (s someComplex128) MapBool(f func(v complex128) bool) OptionBool {
	return SomeBool(f(s.v))
}

func (s someComplex128) FoldBool(a bool, f func(v complex128) bool) bool {
	return f(s.v)
}

func (s someComplex128) FoldBoolF(a func() bool, f func(v complex128) bool) bool {
	return f(s.v)
}


func (s someComplex128) MapByte(f func(v complex128) byte) OptionByte {
	return SomeByte(f(s.v))
}

func (s someComplex128) FoldByte(a byte, f func(v complex128) byte) byte {
	return f(s.v)
}

func (s someComplex128) FoldByteF(a func() byte, f func(v complex128) byte) byte {
	return f(s.v)
}


func (s someComplex128) MapComplex128(f func(v complex128) complex128) OptionComplex128 {
	return SomeComplex128(f(s.v))
}

func (s someComplex128) FoldComplex128(a complex128, f func(v complex128) complex128) complex128 {
	return f(s.v)
}

func (s someComplex128) FoldComplex128F(a func() complex128, f func(v complex128) complex128) complex128 {
	return f(s.v)
}


func (s someComplex128) MapComplex64(f func(v complex128) complex64) OptionComplex64 {
	return SomeComplex64(f(s.v))
}

func (s someComplex128) FoldComplex64(a complex64, f func(v complex128) complex64) complex64 {
	return f(s.v)
}

func (s someComplex128) FoldComplex64F(a func() complex64, f func(v complex128) complex64) complex64 {
	return f(s.v)
}


func (s someComplex128) MapFloat32(f func(v complex128) float32) OptionFloat32 {
	return SomeFloat32(f(s.v))
}

func (s someComplex128) FoldFloat32(a float32, f func(v complex128) float32) float32 {
	return f(s.v)
}

func (s someComplex128) FoldFloat32F(a func() float32, f func(v complex128) float32) float32 {
	return f(s.v)
}


func (s someComplex128) MapFloat64(f func(v complex128) float64) OptionFloat64 {
	return SomeFloat64(f(s.v))
}

func (s someComplex128) FoldFloat64(a float64, f func(v complex128) float64) float64 {
	return f(s.v)
}

func (s someComplex128) FoldFloat64F(a func() float64, f func(v complex128) float64) float64 {
	return f(s.v)
}


func (s someComplex128) MapInt(f func(v complex128) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someComplex128) FoldInt(a int, f func(v complex128) int) int {
	return f(s.v)
}

func (s someComplex128) FoldIntF(a func() int, f func(v complex128) int) int {
	return f(s.v)
}


func (s someComplex128) MapInt16(f func(v complex128) int16) OptionInt16 {
	return SomeInt16(f(s.v))
}

func (s someComplex128) FoldInt16(a int16, f func(v complex128) int16) int16 {
	return f(s.v)
}

func (s someComplex128) FoldInt16F(a func() int16, f func(v complex128) int16) int16 {
	return f(s.v)
}


func (s someComplex128) MapInt32(f func(v complex128) int32) OptionInt32 {
	return SomeInt32(f(s.v))
}

func (s someComplex128) FoldInt32(a int32, f func(v complex128) int32) int32 {
	return f(s.v)
}

func (s someComplex128) FoldInt32F(a func() int32, f func(v complex128) int32) int32 {
	return f(s.v)
}


func (s someComplex128) MapInt64(f func(v complex128) int64) OptionInt64 {
	return SomeInt64(f(s.v))
}

func (s someComplex128) FoldInt64(a int64, f func(v complex128) int64) int64 {
	return f(s.v)
}

func (s someComplex128) FoldInt64F(a func() int64, f func(v complex128) int64) int64 {
	return f(s.v)
}


func (s someComplex128) MapInt8(f func(v complex128) int8) OptionInt8 {
	return SomeInt8(f(s.v))
}

func (s someComplex128) FoldInt8(a int8, f func(v complex128) int8) int8 {
	return f(s.v)
}

func (s someComplex128) FoldInt8F(a func() int8, f func(v complex128) int8) int8 {
	return f(s.v)
}


func (s someComplex128) MapRune(f func(v complex128) rune) OptionRune {
	return SomeRune(f(s.v))
}

func (s someComplex128) FoldRune(a rune, f func(v complex128) rune) rune {
	return f(s.v)
}

func (s someComplex128) FoldRuneF(a func() rune, f func(v complex128) rune) rune {
	return f(s.v)
}


func (s someComplex128) MapString(f func(v complex128) string) OptionString {
	return SomeString(f(s.v))
}

func (s someComplex128) FoldString(a string, f func(v complex128) string) string {
	return f(s.v)
}

func (s someComplex128) FoldStringF(a func() string, f func(v complex128) string) string {
	return f(s.v)
}


func (s someComplex128) MapUInt(f func(v complex128) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someComplex128) FoldUInt(a uint, f func(v complex128) uint) uint {
	return f(s.v)
}

func (s someComplex128) FoldUIntF(a func() uint, f func(v complex128) uint) uint {
	return f(s.v)
}


func (s someComplex128) MapUInt16(f func(v complex128) uint16) OptionUInt16 {
	return SomeUInt16(f(s.v))
}

func (s someComplex128) FoldUInt16(a uint16, f func(v complex128) uint16) uint16 {
	return f(s.v)
}

func (s someComplex128) FoldUInt16F(a func() uint16, f func(v complex128) uint16) uint16 {
	return f(s.v)
}


func (s someComplex128) MapUInt32(f func(v complex128) uint32) OptionUInt32 {
	return SomeUInt32(f(s.v))
}

func (s someComplex128) FoldUInt32(a uint32, f func(v complex128) uint32) uint32 {
	return f(s.v)
}

func (s someComplex128) FoldUInt32F(a func() uint32, f func(v complex128) uint32) uint32 {
	return f(s.v)
}


func (s someComplex128) MapUInt64(f func(v complex128) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someComplex128) FoldUInt64(a uint64, f func(v complex128) uint64) uint64 {
	return f(s.v)
}

func (s someComplex128) FoldUInt64F(a func() uint64, f func(v complex128) uint64) uint64 {
	return f(s.v)
}


func (s someComplex128) MapUInt8(f func(v complex128) uint8) OptionUInt8 {
	return SomeUInt8(f(s.v))
}

func (s someComplex128) FoldUInt8(a uint8, f func(v complex128) uint8) uint8 {
	return f(s.v)
}

func (s someComplex128) FoldUInt8F(a func() uint8, f func(v complex128) uint8) uint8 {
	return f(s.v)
}


func (s someComplex128) MapUintPtr(f func(v complex128) uintptr) OptionUintPtr {
	return SomeUintPtr(f(s.v))
}

func (s someComplex128) FoldUintPtr(a uintptr, f func(v complex128) uintptr) uintptr {
	return f(s.v)
}

func (s someComplex128) FoldUintPtrF(a func() uintptr, f func(v complex128) uintptr) uintptr {
	return f(s.v)
}




type noneComplex64 struct{}

func NoneComplex64() OptionComplex64 {
	return noneComplex64{}
}

func (n noneComplex64) Map(f func(complex64)) {}

func (n noneComplex64) FoldF(l func(), r func(complex64)) { l() }


func (n noneComplex64) MapBool(f func(v complex64) bool) OptionBool {
	return noneBool{}
}

func (n noneComplex64) FoldBool(a bool, f func(v complex64) bool) bool {
	return a
}

func (n noneComplex64) FoldBoolF(a func() bool, f func(v complex64) bool) bool {
	return a()
}

func (n noneComplex64) MapByte(f func(v complex64) byte) OptionByte {
	return noneByte{}
}

func (n noneComplex64) FoldByte(a byte, f func(v complex64) byte) byte {
	return a
}

func (n noneComplex64) FoldByteF(a func() byte, f func(v complex64) byte) byte {
	return a()
}

func (n noneComplex64) MapComplex128(f func(v complex64) complex128) OptionComplex128 {
	return noneComplex128{}
}

func (n noneComplex64) FoldComplex128(a complex128, f func(v complex64) complex128) complex128 {
	return a
}

func (n noneComplex64) FoldComplex128F(a func() complex128, f func(v complex64) complex128) complex128 {
	return a()
}

func (n noneComplex64) MapComplex64(f func(v complex64) complex64) OptionComplex64 {
	return noneComplex64{}
}

func (n noneComplex64) FoldComplex64(a complex64, f func(v complex64) complex64) complex64 {
	return a
}

func (n noneComplex64) FoldComplex64F(a func() complex64, f func(v complex64) complex64) complex64 {
	return a()
}

func (n noneComplex64) MapFloat32(f func(v complex64) float32) OptionFloat32 {
	return noneFloat32{}
}

func (n noneComplex64) FoldFloat32(a float32, f func(v complex64) float32) float32 {
	return a
}

func (n noneComplex64) FoldFloat32F(a func() float32, f func(v complex64) float32) float32 {
	return a()
}

func (n noneComplex64) MapFloat64(f func(v complex64) float64) OptionFloat64 {
	return noneFloat64{}
}

func (n noneComplex64) FoldFloat64(a float64, f func(v complex64) float64) float64 {
	return a
}

func (n noneComplex64) FoldFloat64F(a func() float64, f func(v complex64) float64) float64 {
	return a()
}

func (n noneComplex64) MapInt(f func(v complex64) int) OptionInt {
	return noneInt{}
}

func (n noneComplex64) FoldInt(a int, f func(v complex64) int) int {
	return a
}

func (n noneComplex64) FoldIntF(a func() int, f func(v complex64) int) int {
	return a()
}

func (n noneComplex64) MapInt16(f func(v complex64) int16) OptionInt16 {
	return noneInt16{}
}

func (n noneComplex64) FoldInt16(a int16, f func(v complex64) int16) int16 {
	return a
}

func (n noneComplex64) FoldInt16F(a func() int16, f func(v complex64) int16) int16 {
	return a()
}

func (n noneComplex64) MapInt32(f func(v complex64) int32) OptionInt32 {
	return noneInt32{}
}

func (n noneComplex64) FoldInt32(a int32, f func(v complex64) int32) int32 {
	return a
}

func (n noneComplex64) FoldInt32F(a func() int32, f func(v complex64) int32) int32 {
	return a()
}

func (n noneComplex64) MapInt64(f func(v complex64) int64) OptionInt64 {
	return noneInt64{}
}

func (n noneComplex64) FoldInt64(a int64, f func(v complex64) int64) int64 {
	return a
}

func (n noneComplex64) FoldInt64F(a func() int64, f func(v complex64) int64) int64 {
	return a()
}

func (n noneComplex64) MapInt8(f func(v complex64) int8) OptionInt8 {
	return noneInt8{}
}

func (n noneComplex64) FoldInt8(a int8, f func(v complex64) int8) int8 {
	return a
}

func (n noneComplex64) FoldInt8F(a func() int8, f func(v complex64) int8) int8 {
	return a()
}

func (n noneComplex64) MapRune(f func(v complex64) rune) OptionRune {
	return noneRune{}
}

func (n noneComplex64) FoldRune(a rune, f func(v complex64) rune) rune {
	return a
}

func (n noneComplex64) FoldRuneF(a func() rune, f func(v complex64) rune) rune {
	return a()
}

func (n noneComplex64) MapString(f func(v complex64) string) OptionString {
	return noneString{}
}

func (n noneComplex64) FoldString(a string, f func(v complex64) string) string {
	return a
}

func (n noneComplex64) FoldStringF(a func() string, f func(v complex64) string) string {
	return a()
}

func (n noneComplex64) MapUInt(f func(v complex64) uint) OptionUInt {
	return noneUInt{}
}

func (n noneComplex64) FoldUInt(a uint, f func(v complex64) uint) uint {
	return a
}

func (n noneComplex64) FoldUIntF(a func() uint, f func(v complex64) uint) uint {
	return a()
}

func (n noneComplex64) MapUInt16(f func(v complex64) uint16) OptionUInt16 {
	return noneUInt16{}
}

func (n noneComplex64) FoldUInt16(a uint16, f func(v complex64) uint16) uint16 {
	return a
}

func (n noneComplex64) FoldUInt16F(a func() uint16, f func(v complex64) uint16) uint16 {
	return a()
}

func (n noneComplex64) MapUInt32(f func(v complex64) uint32) OptionUInt32 {
	return noneUInt32{}
}

func (n noneComplex64) FoldUInt32(a uint32, f func(v complex64) uint32) uint32 {
	return a
}

func (n noneComplex64) FoldUInt32F(a func() uint32, f func(v complex64) uint32) uint32 {
	return a()
}

func (n noneComplex64) MapUInt64(f func(v complex64) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneComplex64) FoldUInt64(a uint64, f func(v complex64) uint64) uint64 {
	return a
}

func (n noneComplex64) FoldUInt64F(a func() uint64, f func(v complex64) uint64) uint64 {
	return a()
}

func (n noneComplex64) MapUInt8(f func(v complex64) uint8) OptionUInt8 {
	return noneUInt8{}
}

func (n noneComplex64) FoldUInt8(a uint8, f func(v complex64) uint8) uint8 {
	return a
}

func (n noneComplex64) FoldUInt8F(a func() uint8, f func(v complex64) uint8) uint8 {
	return a()
}

func (n noneComplex64) MapUintPtr(f func(v complex64) uintptr) OptionUintPtr {
	return noneUintPtr{}
}

func (n noneComplex64) FoldUintPtr(a uintptr, f func(v complex64) uintptr) uintptr {
	return a
}

func (n noneComplex64) FoldUintPtrF(a func() uintptr, f func(v complex64) uintptr) uintptr {
	return a()
}



type someComplex64 struct {
	v complex64
}

func SomeComplex64(v complex64) OptionComplex64 {
	return someComplex64{v}
}

func (s someComplex64) Map(f func(complex64)) { f(s.v) }

func (s someComplex64) FoldF(l func(), r func(complex64)) { r(s.v) }


func (s someComplex64) MapBool(f func(v complex64) bool) OptionBool {
	return SomeBool(f(s.v))
}

func (s someComplex64) FoldBool(a bool, f func(v complex64) bool) bool {
	return f(s.v)
}

func (s someComplex64) FoldBoolF(a func() bool, f func(v complex64) bool) bool {
	return f(s.v)
}


func (s someComplex64) MapByte(f func(v complex64) byte) OptionByte {
	return SomeByte(f(s.v))
}

func (s someComplex64) FoldByte(a byte, f func(v complex64) byte) byte {
	return f(s.v)
}

func (s someComplex64) FoldByteF(a func() byte, f func(v complex64) byte) byte {
	return f(s.v)
}


func (s someComplex64) MapComplex128(f func(v complex64) complex128) OptionComplex128 {
	return SomeComplex128(f(s.v))
}

func (s someComplex64) FoldComplex128(a complex128, f func(v complex64) complex128) complex128 {
	return f(s.v)
}

func (s someComplex64) FoldComplex128F(a func() complex128, f func(v complex64) complex128) complex128 {
	return f(s.v)
}


func (s someComplex64) MapComplex64(f func(v complex64) complex64) OptionComplex64 {
	return SomeComplex64(f(s.v))
}

func (s someComplex64) FoldComplex64(a complex64, f func(v complex64) complex64) complex64 {
	return f(s.v)
}

func (s someComplex64) FoldComplex64F(a func() complex64, f func(v complex64) complex64) complex64 {
	return f(s.v)
}


func (s someComplex64) MapFloat32(f func(v complex64) float32) OptionFloat32 {
	return SomeFloat32(f(s.v))
}

func (s someComplex64) FoldFloat32(a float32, f func(v complex64) float32) float32 {
	return f(s.v)
}

func (s someComplex64) FoldFloat32F(a func() float32, f func(v complex64) float32) float32 {
	return f(s.v)
}


func (s someComplex64) MapFloat64(f func(v complex64) float64) OptionFloat64 {
	return SomeFloat64(f(s.v))
}

func (s someComplex64) FoldFloat64(a float64, f func(v complex64) float64) float64 {
	return f(s.v)
}

func (s someComplex64) FoldFloat64F(a func() float64, f func(v complex64) float64) float64 {
	return f(s.v)
}


func (s someComplex64) MapInt(f func(v complex64) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someComplex64) FoldInt(a int, f func(v complex64) int) int {
	return f(s.v)
}

func (s someComplex64) FoldIntF(a func() int, f func(v complex64) int) int {
	return f(s.v)
}


func (s someComplex64) MapInt16(f func(v complex64) int16) OptionInt16 {
	return SomeInt16(f(s.v))
}

func (s someComplex64) FoldInt16(a int16, f func(v complex64) int16) int16 {
	return f(s.v)
}

func (s someComplex64) FoldInt16F(a func() int16, f func(v complex64) int16) int16 {
	return f(s.v)
}


func (s someComplex64) MapInt32(f func(v complex64) int32) OptionInt32 {
	return SomeInt32(f(s.v))
}

func (s someComplex64) FoldInt32(a int32, f func(v complex64) int32) int32 {
	return f(s.v)
}

func (s someComplex64) FoldInt32F(a func() int32, f func(v complex64) int32) int32 {
	return f(s.v)
}


func (s someComplex64) MapInt64(f func(v complex64) int64) OptionInt64 {
	return SomeInt64(f(s.v))
}

func (s someComplex64) FoldInt64(a int64, f func(v complex64) int64) int64 {
	return f(s.v)
}

func (s someComplex64) FoldInt64F(a func() int64, f func(v complex64) int64) int64 {
	return f(s.v)
}


func (s someComplex64) MapInt8(f func(v complex64) int8) OptionInt8 {
	return SomeInt8(f(s.v))
}

func (s someComplex64) FoldInt8(a int8, f func(v complex64) int8) int8 {
	return f(s.v)
}

func (s someComplex64) FoldInt8F(a func() int8, f func(v complex64) int8) int8 {
	return f(s.v)
}


func (s someComplex64) MapRune(f func(v complex64) rune) OptionRune {
	return SomeRune(f(s.v))
}

func (s someComplex64) FoldRune(a rune, f func(v complex64) rune) rune {
	return f(s.v)
}

func (s someComplex64) FoldRuneF(a func() rune, f func(v complex64) rune) rune {
	return f(s.v)
}


func (s someComplex64) MapString(f func(v complex64) string) OptionString {
	return SomeString(f(s.v))
}

func (s someComplex64) FoldString(a string, f func(v complex64) string) string {
	return f(s.v)
}

func (s someComplex64) FoldStringF(a func() string, f func(v complex64) string) string {
	return f(s.v)
}


func (s someComplex64) MapUInt(f func(v complex64) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someComplex64) FoldUInt(a uint, f func(v complex64) uint) uint {
	return f(s.v)
}

func (s someComplex64) FoldUIntF(a func() uint, f func(v complex64) uint) uint {
	return f(s.v)
}


func (s someComplex64) MapUInt16(f func(v complex64) uint16) OptionUInt16 {
	return SomeUInt16(f(s.v))
}

func (s someComplex64) FoldUInt16(a uint16, f func(v complex64) uint16) uint16 {
	return f(s.v)
}

func (s someComplex64) FoldUInt16F(a func() uint16, f func(v complex64) uint16) uint16 {
	return f(s.v)
}


func (s someComplex64) MapUInt32(f func(v complex64) uint32) OptionUInt32 {
	return SomeUInt32(f(s.v))
}

func (s someComplex64) FoldUInt32(a uint32, f func(v complex64) uint32) uint32 {
	return f(s.v)
}

func (s someComplex64) FoldUInt32F(a func() uint32, f func(v complex64) uint32) uint32 {
	return f(s.v)
}


func (s someComplex64) MapUInt64(f func(v complex64) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someComplex64) FoldUInt64(a uint64, f func(v complex64) uint64) uint64 {
	return f(s.v)
}

func (s someComplex64) FoldUInt64F(a func() uint64, f func(v complex64) uint64) uint64 {
	return f(s.v)
}


func (s someComplex64) MapUInt8(f func(v complex64) uint8) OptionUInt8 {
	return SomeUInt8(f(s.v))
}

func (s someComplex64) FoldUInt8(a uint8, f func(v complex64) uint8) uint8 {
	return f(s.v)
}

func (s someComplex64) FoldUInt8F(a func() uint8, f func(v complex64) uint8) uint8 {
	return f(s.v)
}


func (s someComplex64) MapUintPtr(f func(v complex64) uintptr) OptionUintPtr {
	return SomeUintPtr(f(s.v))
}

func (s someComplex64) FoldUintPtr(a uintptr, f func(v complex64) uintptr) uintptr {
	return f(s.v)
}

func (s someComplex64) FoldUintPtrF(a func() uintptr, f func(v complex64) uintptr) uintptr {
	return f(s.v)
}




type noneFloat32 struct{}

func NoneFloat32() OptionFloat32 {
	return noneFloat32{}
}

func (n noneFloat32) Map(f func(float32)) {}

func (n noneFloat32) FoldF(l func(), r func(float32)) { l() }


func (n noneFloat32) MapBool(f func(v float32) bool) OptionBool {
	return noneBool{}
}

func (n noneFloat32) FoldBool(a bool, f func(v float32) bool) bool {
	return a
}

func (n noneFloat32) FoldBoolF(a func() bool, f func(v float32) bool) bool {
	return a()
}

func (n noneFloat32) MapByte(f func(v float32) byte) OptionByte {
	return noneByte{}
}

func (n noneFloat32) FoldByte(a byte, f func(v float32) byte) byte {
	return a
}

func (n noneFloat32) FoldByteF(a func() byte, f func(v float32) byte) byte {
	return a()
}

func (n noneFloat32) MapComplex128(f func(v float32) complex128) OptionComplex128 {
	return noneComplex128{}
}

func (n noneFloat32) FoldComplex128(a complex128, f func(v float32) complex128) complex128 {
	return a
}

func (n noneFloat32) FoldComplex128F(a func() complex128, f func(v float32) complex128) complex128 {
	return a()
}

func (n noneFloat32) MapComplex64(f func(v float32) complex64) OptionComplex64 {
	return noneComplex64{}
}

func (n noneFloat32) FoldComplex64(a complex64, f func(v float32) complex64) complex64 {
	return a
}

func (n noneFloat32) FoldComplex64F(a func() complex64, f func(v float32) complex64) complex64 {
	return a()
}

func (n noneFloat32) MapFloat32(f func(v float32) float32) OptionFloat32 {
	return noneFloat32{}
}

func (n noneFloat32) FoldFloat32(a float32, f func(v float32) float32) float32 {
	return a
}

func (n noneFloat32) FoldFloat32F(a func() float32, f func(v float32) float32) float32 {
	return a()
}

func (n noneFloat32) MapFloat64(f func(v float32) float64) OptionFloat64 {
	return noneFloat64{}
}

func (n noneFloat32) FoldFloat64(a float64, f func(v float32) float64) float64 {
	return a
}

func (n noneFloat32) FoldFloat64F(a func() float64, f func(v float32) float64) float64 {
	return a()
}

func (n noneFloat32) MapInt(f func(v float32) int) OptionInt {
	return noneInt{}
}

func (n noneFloat32) FoldInt(a int, f func(v float32) int) int {
	return a
}

func (n noneFloat32) FoldIntF(a func() int, f func(v float32) int) int {
	return a()
}

func (n noneFloat32) MapInt16(f func(v float32) int16) OptionInt16 {
	return noneInt16{}
}

func (n noneFloat32) FoldInt16(a int16, f func(v float32) int16) int16 {
	return a
}

func (n noneFloat32) FoldInt16F(a func() int16, f func(v float32) int16) int16 {
	return a()
}

func (n noneFloat32) MapInt32(f func(v float32) int32) OptionInt32 {
	return noneInt32{}
}

func (n noneFloat32) FoldInt32(a int32, f func(v float32) int32) int32 {
	return a
}

func (n noneFloat32) FoldInt32F(a func() int32, f func(v float32) int32) int32 {
	return a()
}

func (n noneFloat32) MapInt64(f func(v float32) int64) OptionInt64 {
	return noneInt64{}
}

func (n noneFloat32) FoldInt64(a int64, f func(v float32) int64) int64 {
	return a
}

func (n noneFloat32) FoldInt64F(a func() int64, f func(v float32) int64) int64 {
	return a()
}

func (n noneFloat32) MapInt8(f func(v float32) int8) OptionInt8 {
	return noneInt8{}
}

func (n noneFloat32) FoldInt8(a int8, f func(v float32) int8) int8 {
	return a
}

func (n noneFloat32) FoldInt8F(a func() int8, f func(v float32) int8) int8 {
	return a()
}

func (n noneFloat32) MapRune(f func(v float32) rune) OptionRune {
	return noneRune{}
}

func (n noneFloat32) FoldRune(a rune, f func(v float32) rune) rune {
	return a
}

func (n noneFloat32) FoldRuneF(a func() rune, f func(v float32) rune) rune {
	return a()
}

func (n noneFloat32) MapString(f func(v float32) string) OptionString {
	return noneString{}
}

func (n noneFloat32) FoldString(a string, f func(v float32) string) string {
	return a
}

func (n noneFloat32) FoldStringF(a func() string, f func(v float32) string) string {
	return a()
}

func (n noneFloat32) MapUInt(f func(v float32) uint) OptionUInt {
	return noneUInt{}
}

func (n noneFloat32) FoldUInt(a uint, f func(v float32) uint) uint {
	return a
}

func (n noneFloat32) FoldUIntF(a func() uint, f func(v float32) uint) uint {
	return a()
}

func (n noneFloat32) MapUInt16(f func(v float32) uint16) OptionUInt16 {
	return noneUInt16{}
}

func (n noneFloat32) FoldUInt16(a uint16, f func(v float32) uint16) uint16 {
	return a
}

func (n noneFloat32) FoldUInt16F(a func() uint16, f func(v float32) uint16) uint16 {
	return a()
}

func (n noneFloat32) MapUInt32(f func(v float32) uint32) OptionUInt32 {
	return noneUInt32{}
}

func (n noneFloat32) FoldUInt32(a uint32, f func(v float32) uint32) uint32 {
	return a
}

func (n noneFloat32) FoldUInt32F(a func() uint32, f func(v float32) uint32) uint32 {
	return a()
}

func (n noneFloat32) MapUInt64(f func(v float32) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneFloat32) FoldUInt64(a uint64, f func(v float32) uint64) uint64 {
	return a
}

func (n noneFloat32) FoldUInt64F(a func() uint64, f func(v float32) uint64) uint64 {
	return a()
}

func (n noneFloat32) MapUInt8(f func(v float32) uint8) OptionUInt8 {
	return noneUInt8{}
}

func (n noneFloat32) FoldUInt8(a uint8, f func(v float32) uint8) uint8 {
	return a
}

func (n noneFloat32) FoldUInt8F(a func() uint8, f func(v float32) uint8) uint8 {
	return a()
}

func (n noneFloat32) MapUintPtr(f func(v float32) uintptr) OptionUintPtr {
	return noneUintPtr{}
}

func (n noneFloat32) FoldUintPtr(a uintptr, f func(v float32) uintptr) uintptr {
	return a
}

func (n noneFloat32) FoldUintPtrF(a func() uintptr, f func(v float32) uintptr) uintptr {
	return a()
}



type someFloat32 struct {
	v float32
}

func SomeFloat32(v float32) OptionFloat32 {
	return someFloat32{v}
}

func (s someFloat32) Map(f func(float32)) { f(s.v) }

func (s someFloat32) FoldF(l func(), r func(float32)) { r(s.v) }


func (s someFloat32) MapBool(f func(v float32) bool) OptionBool {
	return SomeBool(f(s.v))
}

func (s someFloat32) FoldBool(a bool, f func(v float32) bool) bool {
	return f(s.v)
}

func (s someFloat32) FoldBoolF(a func() bool, f func(v float32) bool) bool {
	return f(s.v)
}


func (s someFloat32) MapByte(f func(v float32) byte) OptionByte {
	return SomeByte(f(s.v))
}

func (s someFloat32) FoldByte(a byte, f func(v float32) byte) byte {
	return f(s.v)
}

func (s someFloat32) FoldByteF(a func() byte, f func(v float32) byte) byte {
	return f(s.v)
}


func (s someFloat32) MapComplex128(f func(v float32) complex128) OptionComplex128 {
	return SomeComplex128(f(s.v))
}

func (s someFloat32) FoldComplex128(a complex128, f func(v float32) complex128) complex128 {
	return f(s.v)
}

func (s someFloat32) FoldComplex128F(a func() complex128, f func(v float32) complex128) complex128 {
	return f(s.v)
}


func (s someFloat32) MapComplex64(f func(v float32) complex64) OptionComplex64 {
	return SomeComplex64(f(s.v))
}

func (s someFloat32) FoldComplex64(a complex64, f func(v float32) complex64) complex64 {
	return f(s.v)
}

func (s someFloat32) FoldComplex64F(a func() complex64, f func(v float32) complex64) complex64 {
	return f(s.v)
}


func (s someFloat32) MapFloat32(f func(v float32) float32) OptionFloat32 {
	return SomeFloat32(f(s.v))
}

func (s someFloat32) FoldFloat32(a float32, f func(v float32) float32) float32 {
	return f(s.v)
}

func (s someFloat32) FoldFloat32F(a func() float32, f func(v float32) float32) float32 {
	return f(s.v)
}


func (s someFloat32) MapFloat64(f func(v float32) float64) OptionFloat64 {
	return SomeFloat64(f(s.v))
}

func (s someFloat32) FoldFloat64(a float64, f func(v float32) float64) float64 {
	return f(s.v)
}

func (s someFloat32) FoldFloat64F(a func() float64, f func(v float32) float64) float64 {
	return f(s.v)
}


func (s someFloat32) MapInt(f func(v float32) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someFloat32) FoldInt(a int, f func(v float32) int) int {
	return f(s.v)
}

func (s someFloat32) FoldIntF(a func() int, f func(v float32) int) int {
	return f(s.v)
}


func (s someFloat32) MapInt16(f func(v float32) int16) OptionInt16 {
	return SomeInt16(f(s.v))
}

func (s someFloat32) FoldInt16(a int16, f func(v float32) int16) int16 {
	return f(s.v)
}

func (s someFloat32) FoldInt16F(a func() int16, f func(v float32) int16) int16 {
	return f(s.v)
}


func (s someFloat32) MapInt32(f func(v float32) int32) OptionInt32 {
	return SomeInt32(f(s.v))
}

func (s someFloat32) FoldInt32(a int32, f func(v float32) int32) int32 {
	return f(s.v)
}

func (s someFloat32) FoldInt32F(a func() int32, f func(v float32) int32) int32 {
	return f(s.v)
}


func (s someFloat32) MapInt64(f func(v float32) int64) OptionInt64 {
	return SomeInt64(f(s.v))
}

func (s someFloat32) FoldInt64(a int64, f func(v float32) int64) int64 {
	return f(s.v)
}

func (s someFloat32) FoldInt64F(a func() int64, f func(v float32) int64) int64 {
	return f(s.v)
}


func (s someFloat32) MapInt8(f func(v float32) int8) OptionInt8 {
	return SomeInt8(f(s.v))
}

func (s someFloat32) FoldInt8(a int8, f func(v float32) int8) int8 {
	return f(s.v)
}

func (s someFloat32) FoldInt8F(a func() int8, f func(v float32) int8) int8 {
	return f(s.v)
}


func (s someFloat32) MapRune(f func(v float32) rune) OptionRune {
	return SomeRune(f(s.v))
}

func (s someFloat32) FoldRune(a rune, f func(v float32) rune) rune {
	return f(s.v)
}

func (s someFloat32) FoldRuneF(a func() rune, f func(v float32) rune) rune {
	return f(s.v)
}


func (s someFloat32) MapString(f func(v float32) string) OptionString {
	return SomeString(f(s.v))
}

func (s someFloat32) FoldString(a string, f func(v float32) string) string {
	return f(s.v)
}

func (s someFloat32) FoldStringF(a func() string, f func(v float32) string) string {
	return f(s.v)
}


func (s someFloat32) MapUInt(f func(v float32) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someFloat32) FoldUInt(a uint, f func(v float32) uint) uint {
	return f(s.v)
}

func (s someFloat32) FoldUIntF(a func() uint, f func(v float32) uint) uint {
	return f(s.v)
}


func (s someFloat32) MapUInt16(f func(v float32) uint16) OptionUInt16 {
	return SomeUInt16(f(s.v))
}

func (s someFloat32) FoldUInt16(a uint16, f func(v float32) uint16) uint16 {
	return f(s.v)
}

func (s someFloat32) FoldUInt16F(a func() uint16, f func(v float32) uint16) uint16 {
	return f(s.v)
}


func (s someFloat32) MapUInt32(f func(v float32) uint32) OptionUInt32 {
	return SomeUInt32(f(s.v))
}

func (s someFloat32) FoldUInt32(a uint32, f func(v float32) uint32) uint32 {
	return f(s.v)
}

func (s someFloat32) FoldUInt32F(a func() uint32, f func(v float32) uint32) uint32 {
	return f(s.v)
}


func (s someFloat32) MapUInt64(f func(v float32) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someFloat32) FoldUInt64(a uint64, f func(v float32) uint64) uint64 {
	return f(s.v)
}

func (s someFloat32) FoldUInt64F(a func() uint64, f func(v float32) uint64) uint64 {
	return f(s.v)
}


func (s someFloat32) MapUInt8(f func(v float32) uint8) OptionUInt8 {
	return SomeUInt8(f(s.v))
}

func (s someFloat32) FoldUInt8(a uint8, f func(v float32) uint8) uint8 {
	return f(s.v)
}

func (s someFloat32) FoldUInt8F(a func() uint8, f func(v float32) uint8) uint8 {
	return f(s.v)
}


func (s someFloat32) MapUintPtr(f func(v float32) uintptr) OptionUintPtr {
	return SomeUintPtr(f(s.v))
}

func (s someFloat32) FoldUintPtr(a uintptr, f func(v float32) uintptr) uintptr {
	return f(s.v)
}

func (s someFloat32) FoldUintPtrF(a func() uintptr, f func(v float32) uintptr) uintptr {
	return f(s.v)
}




type noneFloat64 struct{}

func NoneFloat64() OptionFloat64 {
	return noneFloat64{}
}

func (n noneFloat64) Map(f func(float64)) {}

func (n noneFloat64) FoldF(l func(), r func(float64)) { l() }


func (n noneFloat64) MapBool(f func(v float64) bool) OptionBool {
	return noneBool{}
}

func (n noneFloat64) FoldBool(a bool, f func(v float64) bool) bool {
	return a
}

func (n noneFloat64) FoldBoolF(a func() bool, f func(v float64) bool) bool {
	return a()
}

func (n noneFloat64) MapByte(f func(v float64) byte) OptionByte {
	return noneByte{}
}

func (n noneFloat64) FoldByte(a byte, f func(v float64) byte) byte {
	return a
}

func (n noneFloat64) FoldByteF(a func() byte, f func(v float64) byte) byte {
	return a()
}

func (n noneFloat64) MapComplex128(f func(v float64) complex128) OptionComplex128 {
	return noneComplex128{}
}

func (n noneFloat64) FoldComplex128(a complex128, f func(v float64) complex128) complex128 {
	return a
}

func (n noneFloat64) FoldComplex128F(a func() complex128, f func(v float64) complex128) complex128 {
	return a()
}

func (n noneFloat64) MapComplex64(f func(v float64) complex64) OptionComplex64 {
	return noneComplex64{}
}

func (n noneFloat64) FoldComplex64(a complex64, f func(v float64) complex64) complex64 {
	return a
}

func (n noneFloat64) FoldComplex64F(a func() complex64, f func(v float64) complex64) complex64 {
	return a()
}

func (n noneFloat64) MapFloat32(f func(v float64) float32) OptionFloat32 {
	return noneFloat32{}
}

func (n noneFloat64) FoldFloat32(a float32, f func(v float64) float32) float32 {
	return a
}

func (n noneFloat64) FoldFloat32F(a func() float32, f func(v float64) float32) float32 {
	return a()
}

func (n noneFloat64) MapFloat64(f func(v float64) float64) OptionFloat64 {
	return noneFloat64{}
}

func (n noneFloat64) FoldFloat64(a float64, f func(v float64) float64) float64 {
	return a
}

func (n noneFloat64) FoldFloat64F(a func() float64, f func(v float64) float64) float64 {
	return a()
}

func (n noneFloat64) MapInt(f func(v float64) int) OptionInt {
	return noneInt{}
}

func (n noneFloat64) FoldInt(a int, f func(v float64) int) int {
	return a
}

func (n noneFloat64) FoldIntF(a func() int, f func(v float64) int) int {
	return a()
}

func (n noneFloat64) MapInt16(f func(v float64) int16) OptionInt16 {
	return noneInt16{}
}

func (n noneFloat64) FoldInt16(a int16, f func(v float64) int16) int16 {
	return a
}

func (n noneFloat64) FoldInt16F(a func() int16, f func(v float64) int16) int16 {
	return a()
}

func (n noneFloat64) MapInt32(f func(v float64) int32) OptionInt32 {
	return noneInt32{}
}

func (n noneFloat64) FoldInt32(a int32, f func(v float64) int32) int32 {
	return a
}

func (n noneFloat64) FoldInt32F(a func() int32, f func(v float64) int32) int32 {
	return a()
}

func (n noneFloat64) MapInt64(f func(v float64) int64) OptionInt64 {
	return noneInt64{}
}

func (n noneFloat64) FoldInt64(a int64, f func(v float64) int64) int64 {
	return a
}

func (n noneFloat64) FoldInt64F(a func() int64, f func(v float64) int64) int64 {
	return a()
}

func (n noneFloat64) MapInt8(f func(v float64) int8) OptionInt8 {
	return noneInt8{}
}

func (n noneFloat64) FoldInt8(a int8, f func(v float64) int8) int8 {
	return a
}

func (n noneFloat64) FoldInt8F(a func() int8, f func(v float64) int8) int8 {
	return a()
}

func (n noneFloat64) MapRune(f func(v float64) rune) OptionRune {
	return noneRune{}
}

func (n noneFloat64) FoldRune(a rune, f func(v float64) rune) rune {
	return a
}

func (n noneFloat64) FoldRuneF(a func() rune, f func(v float64) rune) rune {
	return a()
}

func (n noneFloat64) MapString(f func(v float64) string) OptionString {
	return noneString{}
}

func (n noneFloat64) FoldString(a string, f func(v float64) string) string {
	return a
}

func (n noneFloat64) FoldStringF(a func() string, f func(v float64) string) string {
	return a()
}

func (n noneFloat64) MapUInt(f func(v float64) uint) OptionUInt {
	return noneUInt{}
}

func (n noneFloat64) FoldUInt(a uint, f func(v float64) uint) uint {
	return a
}

func (n noneFloat64) FoldUIntF(a func() uint, f func(v float64) uint) uint {
	return a()
}

func (n noneFloat64) MapUInt16(f func(v float64) uint16) OptionUInt16 {
	return noneUInt16{}
}

func (n noneFloat64) FoldUInt16(a uint16, f func(v float64) uint16) uint16 {
	return a
}

func (n noneFloat64) FoldUInt16F(a func() uint16, f func(v float64) uint16) uint16 {
	return a()
}

func (n noneFloat64) MapUInt32(f func(v float64) uint32) OptionUInt32 {
	return noneUInt32{}
}

func (n noneFloat64) FoldUInt32(a uint32, f func(v float64) uint32) uint32 {
	return a
}

func (n noneFloat64) FoldUInt32F(a func() uint32, f func(v float64) uint32) uint32 {
	return a()
}

func (n noneFloat64) MapUInt64(f func(v float64) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneFloat64) FoldUInt64(a uint64, f func(v float64) uint64) uint64 {
	return a
}

func (n noneFloat64) FoldUInt64F(a func() uint64, f func(v float64) uint64) uint64 {
	return a()
}

func (n noneFloat64) MapUInt8(f func(v float64) uint8) OptionUInt8 {
	return noneUInt8{}
}

func (n noneFloat64) FoldUInt8(a uint8, f func(v float64) uint8) uint8 {
	return a
}

func (n noneFloat64) FoldUInt8F(a func() uint8, f func(v float64) uint8) uint8 {
	return a()
}

func (n noneFloat64) MapUintPtr(f func(v float64) uintptr) OptionUintPtr {
	return noneUintPtr{}
}

func (n noneFloat64) FoldUintPtr(a uintptr, f func(v float64) uintptr) uintptr {
	return a
}

func (n noneFloat64) FoldUintPtrF(a func() uintptr, f func(v float64) uintptr) uintptr {
	return a()
}



type someFloat64 struct {
	v float64
}

func SomeFloat64(v float64) OptionFloat64 {
	return someFloat64{v}
}

func (s someFloat64) Map(f func(float64)) { f(s.v) }

func (s someFloat64) FoldF(l func(), r func(float64)) { r(s.v) }


func (s someFloat64) MapBool(f func(v float64) bool) OptionBool {
	return SomeBool(f(s.v))
}

func (s someFloat64) FoldBool(a bool, f func(v float64) bool) bool {
	return f(s.v)
}

func (s someFloat64) FoldBoolF(a func() bool, f func(v float64) bool) bool {
	return f(s.v)
}


func (s someFloat64) MapByte(f func(v float64) byte) OptionByte {
	return SomeByte(f(s.v))
}

func (s someFloat64) FoldByte(a byte, f func(v float64) byte) byte {
	return f(s.v)
}

func (s someFloat64) FoldByteF(a func() byte, f func(v float64) byte) byte {
	return f(s.v)
}


func (s someFloat64) MapComplex128(f func(v float64) complex128) OptionComplex128 {
	return SomeComplex128(f(s.v))
}

func (s someFloat64) FoldComplex128(a complex128, f func(v float64) complex128) complex128 {
	return f(s.v)
}

func (s someFloat64) FoldComplex128F(a func() complex128, f func(v float64) complex128) complex128 {
	return f(s.v)
}


func (s someFloat64) MapComplex64(f func(v float64) complex64) OptionComplex64 {
	return SomeComplex64(f(s.v))
}

func (s someFloat64) FoldComplex64(a complex64, f func(v float64) complex64) complex64 {
	return f(s.v)
}

func (s someFloat64) FoldComplex64F(a func() complex64, f func(v float64) complex64) complex64 {
	return f(s.v)
}


func (s someFloat64) MapFloat32(f func(v float64) float32) OptionFloat32 {
	return SomeFloat32(f(s.v))
}

func (s someFloat64) FoldFloat32(a float32, f func(v float64) float32) float32 {
	return f(s.v)
}

func (s someFloat64) FoldFloat32F(a func() float32, f func(v float64) float32) float32 {
	return f(s.v)
}


func (s someFloat64) MapFloat64(f func(v float64) float64) OptionFloat64 {
	return SomeFloat64(f(s.v))
}

func (s someFloat64) FoldFloat64(a float64, f func(v float64) float64) float64 {
	return f(s.v)
}

func (s someFloat64) FoldFloat64F(a func() float64, f func(v float64) float64) float64 {
	return f(s.v)
}


func (s someFloat64) MapInt(f func(v float64) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someFloat64) FoldInt(a int, f func(v float64) int) int {
	return f(s.v)
}

func (s someFloat64) FoldIntF(a func() int, f func(v float64) int) int {
	return f(s.v)
}


func (s someFloat64) MapInt16(f func(v float64) int16) OptionInt16 {
	return SomeInt16(f(s.v))
}

func (s someFloat64) FoldInt16(a int16, f func(v float64) int16) int16 {
	return f(s.v)
}

func (s someFloat64) FoldInt16F(a func() int16, f func(v float64) int16) int16 {
	return f(s.v)
}


func (s someFloat64) MapInt32(f func(v float64) int32) OptionInt32 {
	return SomeInt32(f(s.v))
}

func (s someFloat64) FoldInt32(a int32, f func(v float64) int32) int32 {
	return f(s.v)
}

func (s someFloat64) FoldInt32F(a func() int32, f func(v float64) int32) int32 {
	return f(s.v)
}


func (s someFloat64) MapInt64(f func(v float64) int64) OptionInt64 {
	return SomeInt64(f(s.v))
}

func (s someFloat64) FoldInt64(a int64, f func(v float64) int64) int64 {
	return f(s.v)
}

func (s someFloat64) FoldInt64F(a func() int64, f func(v float64) int64) int64 {
	return f(s.v)
}


func (s someFloat64) MapInt8(f func(v float64) int8) OptionInt8 {
	return SomeInt8(f(s.v))
}

func (s someFloat64) FoldInt8(a int8, f func(v float64) int8) int8 {
	return f(s.v)
}

func (s someFloat64) FoldInt8F(a func() int8, f func(v float64) int8) int8 {
	return f(s.v)
}


func (s someFloat64) MapRune(f func(v float64) rune) OptionRune {
	return SomeRune(f(s.v))
}

func (s someFloat64) FoldRune(a rune, f func(v float64) rune) rune {
	return f(s.v)
}

func (s someFloat64) FoldRuneF(a func() rune, f func(v float64) rune) rune {
	return f(s.v)
}


func (s someFloat64) MapString(f func(v float64) string) OptionString {
	return SomeString(f(s.v))
}

func (s someFloat64) FoldString(a string, f func(v float64) string) string {
	return f(s.v)
}

func (s someFloat64) FoldStringF(a func() string, f func(v float64) string) string {
	return f(s.v)
}


func (s someFloat64) MapUInt(f func(v float64) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someFloat64) FoldUInt(a uint, f func(v float64) uint) uint {
	return f(s.v)
}

func (s someFloat64) FoldUIntF(a func() uint, f func(v float64) uint) uint {
	return f(s.v)
}


func (s someFloat64) MapUInt16(f func(v float64) uint16) OptionUInt16 {
	return SomeUInt16(f(s.v))
}

func (s someFloat64) FoldUInt16(a uint16, f func(v float64) uint16) uint16 {
	return f(s.v)
}

func (s someFloat64) FoldUInt16F(a func() uint16, f func(v float64) uint16) uint16 {
	return f(s.v)
}


func (s someFloat64) MapUInt32(f func(v float64) uint32) OptionUInt32 {
	return SomeUInt32(f(s.v))
}

func (s someFloat64) FoldUInt32(a uint32, f func(v float64) uint32) uint32 {
	return f(s.v)
}

func (s someFloat64) FoldUInt32F(a func() uint32, f func(v float64) uint32) uint32 {
	return f(s.v)
}


func (s someFloat64) MapUInt64(f func(v float64) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someFloat64) FoldUInt64(a uint64, f func(v float64) uint64) uint64 {
	return f(s.v)
}

func (s someFloat64) FoldUInt64F(a func() uint64, f func(v float64) uint64) uint64 {
	return f(s.v)
}


func (s someFloat64) MapUInt8(f func(v float64) uint8) OptionUInt8 {
	return SomeUInt8(f(s.v))
}

func (s someFloat64) FoldUInt8(a uint8, f func(v float64) uint8) uint8 {
	return f(s.v)
}

func (s someFloat64) FoldUInt8F(a func() uint8, f func(v float64) uint8) uint8 {
	return f(s.v)
}


func (s someFloat64) MapUintPtr(f func(v float64) uintptr) OptionUintPtr {
	return SomeUintPtr(f(s.v))
}

func (s someFloat64) FoldUintPtr(a uintptr, f func(v float64) uintptr) uintptr {
	return f(s.v)
}

func (s someFloat64) FoldUintPtrF(a func() uintptr, f func(v float64) uintptr) uintptr {
	return f(s.v)
}




type noneInt struct{}

func NoneInt() OptionInt {
	return noneInt{}
}

func (n noneInt) Map(f func(int)) {}

func (n noneInt) FoldF(l func(), r func(int)) { l() }


func (n noneInt) MapBool(f func(v int) bool) OptionBool {
	return noneBool{}
}

func (n noneInt) FoldBool(a bool, f func(v int) bool) bool {
	return a
}

func (n noneInt) FoldBoolF(a func() bool, f func(v int) bool) bool {
	return a()
}

func (n noneInt) MapByte(f func(v int) byte) OptionByte {
	return noneByte{}
}

func (n noneInt) FoldByte(a byte, f func(v int) byte) byte {
	return a
}

func (n noneInt) FoldByteF(a func() byte, f func(v int) byte) byte {
	return a()
}

func (n noneInt) MapComplex128(f func(v int) complex128) OptionComplex128 {
	return noneComplex128{}
}

func (n noneInt) FoldComplex128(a complex128, f func(v int) complex128) complex128 {
	return a
}

func (n noneInt) FoldComplex128F(a func() complex128, f func(v int) complex128) complex128 {
	return a()
}

func (n noneInt) MapComplex64(f func(v int) complex64) OptionComplex64 {
	return noneComplex64{}
}

func (n noneInt) FoldComplex64(a complex64, f func(v int) complex64) complex64 {
	return a
}

func (n noneInt) FoldComplex64F(a func() complex64, f func(v int) complex64) complex64 {
	return a()
}

func (n noneInt) MapFloat32(f func(v int) float32) OptionFloat32 {
	return noneFloat32{}
}

func (n noneInt) FoldFloat32(a float32, f func(v int) float32) float32 {
	return a
}

func (n noneInt) FoldFloat32F(a func() float32, f func(v int) float32) float32 {
	return a()
}

func (n noneInt) MapFloat64(f func(v int) float64) OptionFloat64 {
	return noneFloat64{}
}

func (n noneInt) FoldFloat64(a float64, f func(v int) float64) float64 {
	return a
}

func (n noneInt) FoldFloat64F(a func() float64, f func(v int) float64) float64 {
	return a()
}

func (n noneInt) MapInt(f func(v int) int) OptionInt {
	return noneInt{}
}

func (n noneInt) FoldInt(a int, f func(v int) int) int {
	return a
}

func (n noneInt) FoldIntF(a func() int, f func(v int) int) int {
	return a()
}

func (n noneInt) MapInt16(f func(v int) int16) OptionInt16 {
	return noneInt16{}
}

func (n noneInt) FoldInt16(a int16, f func(v int) int16) int16 {
	return a
}

func (n noneInt) FoldInt16F(a func() int16, f func(v int) int16) int16 {
	return a()
}

func (n noneInt) MapInt32(f func(v int) int32) OptionInt32 {
	return noneInt32{}
}

func (n noneInt) FoldInt32(a int32, f func(v int) int32) int32 {
	return a
}

func (n noneInt) FoldInt32F(a func() int32, f func(v int) int32) int32 {
	return a()
}

func (n noneInt) MapInt64(f func(v int) int64) OptionInt64 {
	return noneInt64{}
}

func (n noneInt) FoldInt64(a int64, f func(v int) int64) int64 {
	return a
}

func (n noneInt) FoldInt64F(a func() int64, f func(v int) int64) int64 {
	return a()
}

func (n noneInt) MapInt8(f func(v int) int8) OptionInt8 {
	return noneInt8{}
}

func (n noneInt) FoldInt8(a int8, f func(v int) int8) int8 {
	return a
}

func (n noneInt) FoldInt8F(a func() int8, f func(v int) int8) int8 {
	return a()
}

func (n noneInt) MapRune(f func(v int) rune) OptionRune {
	return noneRune{}
}

func (n noneInt) FoldRune(a rune, f func(v int) rune) rune {
	return a
}

func (n noneInt) FoldRuneF(a func() rune, f func(v int) rune) rune {
	return a()
}

func (n noneInt) MapString(f func(v int) string) OptionString {
	return noneString{}
}

func (n noneInt) FoldString(a string, f func(v int) string) string {
	return a
}

func (n noneInt) FoldStringF(a func() string, f func(v int) string) string {
	return a()
}

func (n noneInt) MapUInt(f func(v int) uint) OptionUInt {
	return noneUInt{}
}

func (n noneInt) FoldUInt(a uint, f func(v int) uint) uint {
	return a
}

func (n noneInt) FoldUIntF(a func() uint, f func(v int) uint) uint {
	return a()
}

func (n noneInt) MapUInt16(f func(v int) uint16) OptionUInt16 {
	return noneUInt16{}
}

func (n noneInt) FoldUInt16(a uint16, f func(v int) uint16) uint16 {
	return a
}

func (n noneInt) FoldUInt16F(a func() uint16, f func(v int) uint16) uint16 {
	return a()
}

func (n noneInt) MapUInt32(f func(v int) uint32) OptionUInt32 {
	return noneUInt32{}
}

func (n noneInt) FoldUInt32(a uint32, f func(v int) uint32) uint32 {
	return a
}

func (n noneInt) FoldUInt32F(a func() uint32, f func(v int) uint32) uint32 {
	return a()
}

func (n noneInt) MapUInt64(f func(v int) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneInt) FoldUInt64(a uint64, f func(v int) uint64) uint64 {
	return a
}

func (n noneInt) FoldUInt64F(a func() uint64, f func(v int) uint64) uint64 {
	return a()
}

func (n noneInt) MapUInt8(f func(v int) uint8) OptionUInt8 {
	return noneUInt8{}
}

func (n noneInt) FoldUInt8(a uint8, f func(v int) uint8) uint8 {
	return a
}

func (n noneInt) FoldUInt8F(a func() uint8, f func(v int) uint8) uint8 {
	return a()
}

func (n noneInt) MapUintPtr(f func(v int) uintptr) OptionUintPtr {
	return noneUintPtr{}
}

func (n noneInt) FoldUintPtr(a uintptr, f func(v int) uintptr) uintptr {
	return a
}

func (n noneInt) FoldUintPtrF(a func() uintptr, f func(v int) uintptr) uintptr {
	return a()
}



type someInt struct {
	v int
}

func SomeInt(v int) OptionInt {
	return someInt{v}
}

func (s someInt) Map(f func(int)) { f(s.v) }

func (s someInt) FoldF(l func(), r func(int)) { r(s.v) }


func (s someInt) MapBool(f func(v int) bool) OptionBool {
	return SomeBool(f(s.v))
}

func (s someInt) FoldBool(a bool, f func(v int) bool) bool {
	return f(s.v)
}

func (s someInt) FoldBoolF(a func() bool, f func(v int) bool) bool {
	return f(s.v)
}


func (s someInt) MapByte(f func(v int) byte) OptionByte {
	return SomeByte(f(s.v))
}

func (s someInt) FoldByte(a byte, f func(v int) byte) byte {
	return f(s.v)
}

func (s someInt) FoldByteF(a func() byte, f func(v int) byte) byte {
	return f(s.v)
}


func (s someInt) MapComplex128(f func(v int) complex128) OptionComplex128 {
	return SomeComplex128(f(s.v))
}

func (s someInt) FoldComplex128(a complex128, f func(v int) complex128) complex128 {
	return f(s.v)
}

func (s someInt) FoldComplex128F(a func() complex128, f func(v int) complex128) complex128 {
	return f(s.v)
}


func (s someInt) MapComplex64(f func(v int) complex64) OptionComplex64 {
	return SomeComplex64(f(s.v))
}

func (s someInt) FoldComplex64(a complex64, f func(v int) complex64) complex64 {
	return f(s.v)
}

func (s someInt) FoldComplex64F(a func() complex64, f func(v int) complex64) complex64 {
	return f(s.v)
}


func (s someInt) MapFloat32(f func(v int) float32) OptionFloat32 {
	return SomeFloat32(f(s.v))
}

func (s someInt) FoldFloat32(a float32, f func(v int) float32) float32 {
	return f(s.v)
}

func (s someInt) FoldFloat32F(a func() float32, f func(v int) float32) float32 {
	return f(s.v)
}


func (s someInt) MapFloat64(f func(v int) float64) OptionFloat64 {
	return SomeFloat64(f(s.v))
}

func (s someInt) FoldFloat64(a float64, f func(v int) float64) float64 {
	return f(s.v)
}

func (s someInt) FoldFloat64F(a func() float64, f func(v int) float64) float64 {
	return f(s.v)
}


func (s someInt) MapInt(f func(v int) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someInt) FoldInt(a int, f func(v int) int) int {
	return f(s.v)
}

func (s someInt) FoldIntF(a func() int, f func(v int) int) int {
	return f(s.v)
}


func (s someInt) MapInt16(f func(v int) int16) OptionInt16 {
	return SomeInt16(f(s.v))
}

func (s someInt) FoldInt16(a int16, f func(v int) int16) int16 {
	return f(s.v)
}

func (s someInt) FoldInt16F(a func() int16, f func(v int) int16) int16 {
	return f(s.v)
}


func (s someInt) MapInt32(f func(v int) int32) OptionInt32 {
	return SomeInt32(f(s.v))
}

func (s someInt) FoldInt32(a int32, f func(v int) int32) int32 {
	return f(s.v)
}

func (s someInt) FoldInt32F(a func() int32, f func(v int) int32) int32 {
	return f(s.v)
}


func (s someInt) MapInt64(f func(v int) int64) OptionInt64 {
	return SomeInt64(f(s.v))
}

func (s someInt) FoldInt64(a int64, f func(v int) int64) int64 {
	return f(s.v)
}

func (s someInt) FoldInt64F(a func() int64, f func(v int) int64) int64 {
	return f(s.v)
}


func (s someInt) MapInt8(f func(v int) int8) OptionInt8 {
	return SomeInt8(f(s.v))
}

func (s someInt) FoldInt8(a int8, f func(v int) int8) int8 {
	return f(s.v)
}

func (s someInt) FoldInt8F(a func() int8, f func(v int) int8) int8 {
	return f(s.v)
}


func (s someInt) MapRune(f func(v int) rune) OptionRune {
	return SomeRune(f(s.v))
}

func (s someInt) FoldRune(a rune, f func(v int) rune) rune {
	return f(s.v)
}

func (s someInt) FoldRuneF(a func() rune, f func(v int) rune) rune {
	return f(s.v)
}


func (s someInt) MapString(f func(v int) string) OptionString {
	return SomeString(f(s.v))
}

func (s someInt) FoldString(a string, f func(v int) string) string {
	return f(s.v)
}

func (s someInt) FoldStringF(a func() string, f func(v int) string) string {
	return f(s.v)
}


func (s someInt) MapUInt(f func(v int) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someInt) FoldUInt(a uint, f func(v int) uint) uint {
	return f(s.v)
}

func (s someInt) FoldUIntF(a func() uint, f func(v int) uint) uint {
	return f(s.v)
}


func (s someInt) MapUInt16(f func(v int) uint16) OptionUInt16 {
	return SomeUInt16(f(s.v))
}

func (s someInt) FoldUInt16(a uint16, f func(v int) uint16) uint16 {
	return f(s.v)
}

func (s someInt) FoldUInt16F(a func() uint16, f func(v int) uint16) uint16 {
	return f(s.v)
}


func (s someInt) MapUInt32(f func(v int) uint32) OptionUInt32 {
	return SomeUInt32(f(s.v))
}

func (s someInt) FoldUInt32(a uint32, f func(v int) uint32) uint32 {
	return f(s.v)
}

func (s someInt) FoldUInt32F(a func() uint32, f func(v int) uint32) uint32 {
	return f(s.v)
}


func (s someInt) MapUInt64(f func(v int) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someInt) FoldUInt64(a uint64, f func(v int) uint64) uint64 {
	return f(s.v)
}

func (s someInt) FoldUInt64F(a func() uint64, f func(v int) uint64) uint64 {
	return f(s.v)
}


func (s someInt) MapUInt8(f func(v int) uint8) OptionUInt8 {
	return SomeUInt8(f(s.v))
}

func (s someInt) FoldUInt8(a uint8, f func(v int) uint8) uint8 {
	return f(s.v)
}

func (s someInt) FoldUInt8F(a func() uint8, f func(v int) uint8) uint8 {
	return f(s.v)
}


func (s someInt) MapUintPtr(f func(v int) uintptr) OptionUintPtr {
	return SomeUintPtr(f(s.v))
}

func (s someInt) FoldUintPtr(a uintptr, f func(v int) uintptr) uintptr {
	return f(s.v)
}

func (s someInt) FoldUintPtrF(a func() uintptr, f func(v int) uintptr) uintptr {
	return f(s.v)
}




type noneInt16 struct{}

func NoneInt16() OptionInt16 {
	return noneInt16{}
}

func (n noneInt16) Map(f func(int16)) {}

func (n noneInt16) FoldF(l func(), r func(int16)) { l() }


func (n noneInt16) MapBool(f func(v int16) bool) OptionBool {
	return noneBool{}
}

func (n noneInt16) FoldBool(a bool, f func(v int16) bool) bool {
	return a
}

func (n noneInt16) FoldBoolF(a func() bool, f func(v int16) bool) bool {
	return a()
}

func (n noneInt16) MapByte(f func(v int16) byte) OptionByte {
	return noneByte{}
}

func (n noneInt16) FoldByte(a byte, f func(v int16) byte) byte {
	return a
}

func (n noneInt16) FoldByteF(a func() byte, f func(v int16) byte) byte {
	return a()
}

func (n noneInt16) MapComplex128(f func(v int16) complex128) OptionComplex128 {
	return noneComplex128{}
}

func (n noneInt16) FoldComplex128(a complex128, f func(v int16) complex128) complex128 {
	return a
}

func (n noneInt16) FoldComplex128F(a func() complex128, f func(v int16) complex128) complex128 {
	return a()
}

func (n noneInt16) MapComplex64(f func(v int16) complex64) OptionComplex64 {
	return noneComplex64{}
}

func (n noneInt16) FoldComplex64(a complex64, f func(v int16) complex64) complex64 {
	return a
}

func (n noneInt16) FoldComplex64F(a func() complex64, f func(v int16) complex64) complex64 {
	return a()
}

func (n noneInt16) MapFloat32(f func(v int16) float32) OptionFloat32 {
	return noneFloat32{}
}

func (n noneInt16) FoldFloat32(a float32, f func(v int16) float32) float32 {
	return a
}

func (n noneInt16) FoldFloat32F(a func() float32, f func(v int16) float32) float32 {
	return a()
}

func (n noneInt16) MapFloat64(f func(v int16) float64) OptionFloat64 {
	return noneFloat64{}
}

func (n noneInt16) FoldFloat64(a float64, f func(v int16) float64) float64 {
	return a
}

func (n noneInt16) FoldFloat64F(a func() float64, f func(v int16) float64) float64 {
	return a()
}

func (n noneInt16) MapInt(f func(v int16) int) OptionInt {
	return noneInt{}
}

func (n noneInt16) FoldInt(a int, f func(v int16) int) int {
	return a
}

func (n noneInt16) FoldIntF(a func() int, f func(v int16) int) int {
	return a()
}

func (n noneInt16) MapInt16(f func(v int16) int16) OptionInt16 {
	return noneInt16{}
}

func (n noneInt16) FoldInt16(a int16, f func(v int16) int16) int16 {
	return a
}

func (n noneInt16) FoldInt16F(a func() int16, f func(v int16) int16) int16 {
	return a()
}

func (n noneInt16) MapInt32(f func(v int16) int32) OptionInt32 {
	return noneInt32{}
}

func (n noneInt16) FoldInt32(a int32, f func(v int16) int32) int32 {
	return a
}

func (n noneInt16) FoldInt32F(a func() int32, f func(v int16) int32) int32 {
	return a()
}

func (n noneInt16) MapInt64(f func(v int16) int64) OptionInt64 {
	return noneInt64{}
}

func (n noneInt16) FoldInt64(a int64, f func(v int16) int64) int64 {
	return a
}

func (n noneInt16) FoldInt64F(a func() int64, f func(v int16) int64) int64 {
	return a()
}

func (n noneInt16) MapInt8(f func(v int16) int8) OptionInt8 {
	return noneInt8{}
}

func (n noneInt16) FoldInt8(a int8, f func(v int16) int8) int8 {
	return a
}

func (n noneInt16) FoldInt8F(a func() int8, f func(v int16) int8) int8 {
	return a()
}

func (n noneInt16) MapRune(f func(v int16) rune) OptionRune {
	return noneRune{}
}

func (n noneInt16) FoldRune(a rune, f func(v int16) rune) rune {
	return a
}

func (n noneInt16) FoldRuneF(a func() rune, f func(v int16) rune) rune {
	return a()
}

func (n noneInt16) MapString(f func(v int16) string) OptionString {
	return noneString{}
}

func (n noneInt16) FoldString(a string, f func(v int16) string) string {
	return a
}

func (n noneInt16) FoldStringF(a func() string, f func(v int16) string) string {
	return a()
}

func (n noneInt16) MapUInt(f func(v int16) uint) OptionUInt {
	return noneUInt{}
}

func (n noneInt16) FoldUInt(a uint, f func(v int16) uint) uint {
	return a
}

func (n noneInt16) FoldUIntF(a func() uint, f func(v int16) uint) uint {
	return a()
}

func (n noneInt16) MapUInt16(f func(v int16) uint16) OptionUInt16 {
	return noneUInt16{}
}

func (n noneInt16) FoldUInt16(a uint16, f func(v int16) uint16) uint16 {
	return a
}

func (n noneInt16) FoldUInt16F(a func() uint16, f func(v int16) uint16) uint16 {
	return a()
}

func (n noneInt16) MapUInt32(f func(v int16) uint32) OptionUInt32 {
	return noneUInt32{}
}

func (n noneInt16) FoldUInt32(a uint32, f func(v int16) uint32) uint32 {
	return a
}

func (n noneInt16) FoldUInt32F(a func() uint32, f func(v int16) uint32) uint32 {
	return a()
}

func (n noneInt16) MapUInt64(f func(v int16) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneInt16) FoldUInt64(a uint64, f func(v int16) uint64) uint64 {
	return a
}

func (n noneInt16) FoldUInt64F(a func() uint64, f func(v int16) uint64) uint64 {
	return a()
}

func (n noneInt16) MapUInt8(f func(v int16) uint8) OptionUInt8 {
	return noneUInt8{}
}

func (n noneInt16) FoldUInt8(a uint8, f func(v int16) uint8) uint8 {
	return a
}

func (n noneInt16) FoldUInt8F(a func() uint8, f func(v int16) uint8) uint8 {
	return a()
}

func (n noneInt16) MapUintPtr(f func(v int16) uintptr) OptionUintPtr {
	return noneUintPtr{}
}

func (n noneInt16) FoldUintPtr(a uintptr, f func(v int16) uintptr) uintptr {
	return a
}

func (n noneInt16) FoldUintPtrF(a func() uintptr, f func(v int16) uintptr) uintptr {
	return a()
}



type someInt16 struct {
	v int16
}

func SomeInt16(v int16) OptionInt16 {
	return someInt16{v}
}

func (s someInt16) Map(f func(int16)) { f(s.v) }

func (s someInt16) FoldF(l func(), r func(int16)) { r(s.v) }


func (s someInt16) MapBool(f func(v int16) bool) OptionBool {
	return SomeBool(f(s.v))
}

func (s someInt16) FoldBool(a bool, f func(v int16) bool) bool {
	return f(s.v)
}

func (s someInt16) FoldBoolF(a func() bool, f func(v int16) bool) bool {
	return f(s.v)
}


func (s someInt16) MapByte(f func(v int16) byte) OptionByte {
	return SomeByte(f(s.v))
}

func (s someInt16) FoldByte(a byte, f func(v int16) byte) byte {
	return f(s.v)
}

func (s someInt16) FoldByteF(a func() byte, f func(v int16) byte) byte {
	return f(s.v)
}


func (s someInt16) MapComplex128(f func(v int16) complex128) OptionComplex128 {
	return SomeComplex128(f(s.v))
}

func (s someInt16) FoldComplex128(a complex128, f func(v int16) complex128) complex128 {
	return f(s.v)
}

func (s someInt16) FoldComplex128F(a func() complex128, f func(v int16) complex128) complex128 {
	return f(s.v)
}


func (s someInt16) MapComplex64(f func(v int16) complex64) OptionComplex64 {
	return SomeComplex64(f(s.v))
}

func (s someInt16) FoldComplex64(a complex64, f func(v int16) complex64) complex64 {
	return f(s.v)
}

func (s someInt16) FoldComplex64F(a func() complex64, f func(v int16) complex64) complex64 {
	return f(s.v)
}


func (s someInt16) MapFloat32(f func(v int16) float32) OptionFloat32 {
	return SomeFloat32(f(s.v))
}

func (s someInt16) FoldFloat32(a float32, f func(v int16) float32) float32 {
	return f(s.v)
}

func (s someInt16) FoldFloat32F(a func() float32, f func(v int16) float32) float32 {
	return f(s.v)
}


func (s someInt16) MapFloat64(f func(v int16) float64) OptionFloat64 {
	return SomeFloat64(f(s.v))
}

func (s someInt16) FoldFloat64(a float64, f func(v int16) float64) float64 {
	return f(s.v)
}

func (s someInt16) FoldFloat64F(a func() float64, f func(v int16) float64) float64 {
	return f(s.v)
}


func (s someInt16) MapInt(f func(v int16) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someInt16) FoldInt(a int, f func(v int16) int) int {
	return f(s.v)
}

func (s someInt16) FoldIntF(a func() int, f func(v int16) int) int {
	return f(s.v)
}


func (s someInt16) MapInt16(f func(v int16) int16) OptionInt16 {
	return SomeInt16(f(s.v))
}

func (s someInt16) FoldInt16(a int16, f func(v int16) int16) int16 {
	return f(s.v)
}

func (s someInt16) FoldInt16F(a func() int16, f func(v int16) int16) int16 {
	return f(s.v)
}


func (s someInt16) MapInt32(f func(v int16) int32) OptionInt32 {
	return SomeInt32(f(s.v))
}

func (s someInt16) FoldInt32(a int32, f func(v int16) int32) int32 {
	return f(s.v)
}

func (s someInt16) FoldInt32F(a func() int32, f func(v int16) int32) int32 {
	return f(s.v)
}


func (s someInt16) MapInt64(f func(v int16) int64) OptionInt64 {
	return SomeInt64(f(s.v))
}

func (s someInt16) FoldInt64(a int64, f func(v int16) int64) int64 {
	return f(s.v)
}

func (s someInt16) FoldInt64F(a func() int64, f func(v int16) int64) int64 {
	return f(s.v)
}


func (s someInt16) MapInt8(f func(v int16) int8) OptionInt8 {
	return SomeInt8(f(s.v))
}

func (s someInt16) FoldInt8(a int8, f func(v int16) int8) int8 {
	return f(s.v)
}

func (s someInt16) FoldInt8F(a func() int8, f func(v int16) int8) int8 {
	return f(s.v)
}


func (s someInt16) MapRune(f func(v int16) rune) OptionRune {
	return SomeRune(f(s.v))
}

func (s someInt16) FoldRune(a rune, f func(v int16) rune) rune {
	return f(s.v)
}

func (s someInt16) FoldRuneF(a func() rune, f func(v int16) rune) rune {
	return f(s.v)
}


func (s someInt16) MapString(f func(v int16) string) OptionString {
	return SomeString(f(s.v))
}

func (s someInt16) FoldString(a string, f func(v int16) string) string {
	return f(s.v)
}

func (s someInt16) FoldStringF(a func() string, f func(v int16) string) string {
	return f(s.v)
}


func (s someInt16) MapUInt(f func(v int16) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someInt16) FoldUInt(a uint, f func(v int16) uint) uint {
	return f(s.v)
}

func (s someInt16) FoldUIntF(a func() uint, f func(v int16) uint) uint {
	return f(s.v)
}


func (s someInt16) MapUInt16(f func(v int16) uint16) OptionUInt16 {
	return SomeUInt16(f(s.v))
}

func (s someInt16) FoldUInt16(a uint16, f func(v int16) uint16) uint16 {
	return f(s.v)
}

func (s someInt16) FoldUInt16F(a func() uint16, f func(v int16) uint16) uint16 {
	return f(s.v)
}


func (s someInt16) MapUInt32(f func(v int16) uint32) OptionUInt32 {
	return SomeUInt32(f(s.v))
}

func (s someInt16) FoldUInt32(a uint32, f func(v int16) uint32) uint32 {
	return f(s.v)
}

func (s someInt16) FoldUInt32F(a func() uint32, f func(v int16) uint32) uint32 {
	return f(s.v)
}


func (s someInt16) MapUInt64(f func(v int16) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someInt16) FoldUInt64(a uint64, f func(v int16) uint64) uint64 {
	return f(s.v)
}

func (s someInt16) FoldUInt64F(a func() uint64, f func(v int16) uint64) uint64 {
	return f(s.v)
}


func (s someInt16) MapUInt8(f func(v int16) uint8) OptionUInt8 {
	return SomeUInt8(f(s.v))
}

func (s someInt16) FoldUInt8(a uint8, f func(v int16) uint8) uint8 {
	return f(s.v)
}

func (s someInt16) FoldUInt8F(a func() uint8, f func(v int16) uint8) uint8 {
	return f(s.v)
}


func (s someInt16) MapUintPtr(f func(v int16) uintptr) OptionUintPtr {
	return SomeUintPtr(f(s.v))
}

func (s someInt16) FoldUintPtr(a uintptr, f func(v int16) uintptr) uintptr {
	return f(s.v)
}

func (s someInt16) FoldUintPtrF(a func() uintptr, f func(v int16) uintptr) uintptr {
	return f(s.v)
}




type noneInt32 struct{}

func NoneInt32() OptionInt32 {
	return noneInt32{}
}

func (n noneInt32) Map(f func(int32)) {}

func (n noneInt32) FoldF(l func(), r func(int32)) { l() }


func (n noneInt32) MapBool(f func(v int32) bool) OptionBool {
	return noneBool{}
}

func (n noneInt32) FoldBool(a bool, f func(v int32) bool) bool {
	return a
}

func (n noneInt32) FoldBoolF(a func() bool, f func(v int32) bool) bool {
	return a()
}

func (n noneInt32) MapByte(f func(v int32) byte) OptionByte {
	return noneByte{}
}

func (n noneInt32) FoldByte(a byte, f func(v int32) byte) byte {
	return a
}

func (n noneInt32) FoldByteF(a func() byte, f func(v int32) byte) byte {
	return a()
}

func (n noneInt32) MapComplex128(f func(v int32) complex128) OptionComplex128 {
	return noneComplex128{}
}

func (n noneInt32) FoldComplex128(a complex128, f func(v int32) complex128) complex128 {
	return a
}

func (n noneInt32) FoldComplex128F(a func() complex128, f func(v int32) complex128) complex128 {
	return a()
}

func (n noneInt32) MapComplex64(f func(v int32) complex64) OptionComplex64 {
	return noneComplex64{}
}

func (n noneInt32) FoldComplex64(a complex64, f func(v int32) complex64) complex64 {
	return a
}

func (n noneInt32) FoldComplex64F(a func() complex64, f func(v int32) complex64) complex64 {
	return a()
}

func (n noneInt32) MapFloat32(f func(v int32) float32) OptionFloat32 {
	return noneFloat32{}
}

func (n noneInt32) FoldFloat32(a float32, f func(v int32) float32) float32 {
	return a
}

func (n noneInt32) FoldFloat32F(a func() float32, f func(v int32) float32) float32 {
	return a()
}

func (n noneInt32) MapFloat64(f func(v int32) float64) OptionFloat64 {
	return noneFloat64{}
}

func (n noneInt32) FoldFloat64(a float64, f func(v int32) float64) float64 {
	return a
}

func (n noneInt32) FoldFloat64F(a func() float64, f func(v int32) float64) float64 {
	return a()
}

func (n noneInt32) MapInt(f func(v int32) int) OptionInt {
	return noneInt{}
}

func (n noneInt32) FoldInt(a int, f func(v int32) int) int {
	return a
}

func (n noneInt32) FoldIntF(a func() int, f func(v int32) int) int {
	return a()
}

func (n noneInt32) MapInt16(f func(v int32) int16) OptionInt16 {
	return noneInt16{}
}

func (n noneInt32) FoldInt16(a int16, f func(v int32) int16) int16 {
	return a
}

func (n noneInt32) FoldInt16F(a func() int16, f func(v int32) int16) int16 {
	return a()
}

func (n noneInt32) MapInt32(f func(v int32) int32) OptionInt32 {
	return noneInt32{}
}

func (n noneInt32) FoldInt32(a int32, f func(v int32) int32) int32 {
	return a
}

func (n noneInt32) FoldInt32F(a func() int32, f func(v int32) int32) int32 {
	return a()
}

func (n noneInt32) MapInt64(f func(v int32) int64) OptionInt64 {
	return noneInt64{}
}

func (n noneInt32) FoldInt64(a int64, f func(v int32) int64) int64 {
	return a
}

func (n noneInt32) FoldInt64F(a func() int64, f func(v int32) int64) int64 {
	return a()
}

func (n noneInt32) MapInt8(f func(v int32) int8) OptionInt8 {
	return noneInt8{}
}

func (n noneInt32) FoldInt8(a int8, f func(v int32) int8) int8 {
	return a
}

func (n noneInt32) FoldInt8F(a func() int8, f func(v int32) int8) int8 {
	return a()
}

func (n noneInt32) MapRune(f func(v int32) rune) OptionRune {
	return noneRune{}
}

func (n noneInt32) FoldRune(a rune, f func(v int32) rune) rune {
	return a
}

func (n noneInt32) FoldRuneF(a func() rune, f func(v int32) rune) rune {
	return a()
}

func (n noneInt32) MapString(f func(v int32) string) OptionString {
	return noneString{}
}

func (n noneInt32) FoldString(a string, f func(v int32) string) string {
	return a
}

func (n noneInt32) FoldStringF(a func() string, f func(v int32) string) string {
	return a()
}

func (n noneInt32) MapUInt(f func(v int32) uint) OptionUInt {
	return noneUInt{}
}

func (n noneInt32) FoldUInt(a uint, f func(v int32) uint) uint {
	return a
}

func (n noneInt32) FoldUIntF(a func() uint, f func(v int32) uint) uint {
	return a()
}

func (n noneInt32) MapUInt16(f func(v int32) uint16) OptionUInt16 {
	return noneUInt16{}
}

func (n noneInt32) FoldUInt16(a uint16, f func(v int32) uint16) uint16 {
	return a
}

func (n noneInt32) FoldUInt16F(a func() uint16, f func(v int32) uint16) uint16 {
	return a()
}

func (n noneInt32) MapUInt32(f func(v int32) uint32) OptionUInt32 {
	return noneUInt32{}
}

func (n noneInt32) FoldUInt32(a uint32, f func(v int32) uint32) uint32 {
	return a
}

func (n noneInt32) FoldUInt32F(a func() uint32, f func(v int32) uint32) uint32 {
	return a()
}

func (n noneInt32) MapUInt64(f func(v int32) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneInt32) FoldUInt64(a uint64, f func(v int32) uint64) uint64 {
	return a
}

func (n noneInt32) FoldUInt64F(a func() uint64, f func(v int32) uint64) uint64 {
	return a()
}

func (n noneInt32) MapUInt8(f func(v int32) uint8) OptionUInt8 {
	return noneUInt8{}
}

func (n noneInt32) FoldUInt8(a uint8, f func(v int32) uint8) uint8 {
	return a
}

func (n noneInt32) FoldUInt8F(a func() uint8, f func(v int32) uint8) uint8 {
	return a()
}

func (n noneInt32) MapUintPtr(f func(v int32) uintptr) OptionUintPtr {
	return noneUintPtr{}
}

func (n noneInt32) FoldUintPtr(a uintptr, f func(v int32) uintptr) uintptr {
	return a
}

func (n noneInt32) FoldUintPtrF(a func() uintptr, f func(v int32) uintptr) uintptr {
	return a()
}



type someInt32 struct {
	v int32
}

func SomeInt32(v int32) OptionInt32 {
	return someInt32{v}
}

func (s someInt32) Map(f func(int32)) { f(s.v) }

func (s someInt32) FoldF(l func(), r func(int32)) { r(s.v) }


func (s someInt32) MapBool(f func(v int32) bool) OptionBool {
	return SomeBool(f(s.v))
}

func (s someInt32) FoldBool(a bool, f func(v int32) bool) bool {
	return f(s.v)
}

func (s someInt32) FoldBoolF(a func() bool, f func(v int32) bool) bool {
	return f(s.v)
}


func (s someInt32) MapByte(f func(v int32) byte) OptionByte {
	return SomeByte(f(s.v))
}

func (s someInt32) FoldByte(a byte, f func(v int32) byte) byte {
	return f(s.v)
}

func (s someInt32) FoldByteF(a func() byte, f func(v int32) byte) byte {
	return f(s.v)
}


func (s someInt32) MapComplex128(f func(v int32) complex128) OptionComplex128 {
	return SomeComplex128(f(s.v))
}

func (s someInt32) FoldComplex128(a complex128, f func(v int32) complex128) complex128 {
	return f(s.v)
}

func (s someInt32) FoldComplex128F(a func() complex128, f func(v int32) complex128) complex128 {
	return f(s.v)
}


func (s someInt32) MapComplex64(f func(v int32) complex64) OptionComplex64 {
	return SomeComplex64(f(s.v))
}

func (s someInt32) FoldComplex64(a complex64, f func(v int32) complex64) complex64 {
	return f(s.v)
}

func (s someInt32) FoldComplex64F(a func() complex64, f func(v int32) complex64) complex64 {
	return f(s.v)
}


func (s someInt32) MapFloat32(f func(v int32) float32) OptionFloat32 {
	return SomeFloat32(f(s.v))
}

func (s someInt32) FoldFloat32(a float32, f func(v int32) float32) float32 {
	return f(s.v)
}

func (s someInt32) FoldFloat32F(a func() float32, f func(v int32) float32) float32 {
	return f(s.v)
}


func (s someInt32) MapFloat64(f func(v int32) float64) OptionFloat64 {
	return SomeFloat64(f(s.v))
}

func (s someInt32) FoldFloat64(a float64, f func(v int32) float64) float64 {
	return f(s.v)
}

func (s someInt32) FoldFloat64F(a func() float64, f func(v int32) float64) float64 {
	return f(s.v)
}


func (s someInt32) MapInt(f func(v int32) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someInt32) FoldInt(a int, f func(v int32) int) int {
	return f(s.v)
}

func (s someInt32) FoldIntF(a func() int, f func(v int32) int) int {
	return f(s.v)
}


func (s someInt32) MapInt16(f func(v int32) int16) OptionInt16 {
	return SomeInt16(f(s.v))
}

func (s someInt32) FoldInt16(a int16, f func(v int32) int16) int16 {
	return f(s.v)
}

func (s someInt32) FoldInt16F(a func() int16, f func(v int32) int16) int16 {
	return f(s.v)
}


func (s someInt32) MapInt32(f func(v int32) int32) OptionInt32 {
	return SomeInt32(f(s.v))
}

func (s someInt32) FoldInt32(a int32, f func(v int32) int32) int32 {
	return f(s.v)
}

func (s someInt32) FoldInt32F(a func() int32, f func(v int32) int32) int32 {
	return f(s.v)
}


func (s someInt32) MapInt64(f func(v int32) int64) OptionInt64 {
	return SomeInt64(f(s.v))
}

func (s someInt32) FoldInt64(a int64, f func(v int32) int64) int64 {
	return f(s.v)
}

func (s someInt32) FoldInt64F(a func() int64, f func(v int32) int64) int64 {
	return f(s.v)
}


func (s someInt32) MapInt8(f func(v int32) int8) OptionInt8 {
	return SomeInt8(f(s.v))
}

func (s someInt32) FoldInt8(a int8, f func(v int32) int8) int8 {
	return f(s.v)
}

func (s someInt32) FoldInt8F(a func() int8, f func(v int32) int8) int8 {
	return f(s.v)
}


func (s someInt32) MapRune(f func(v int32) rune) OptionRune {
	return SomeRune(f(s.v))
}

func (s someInt32) FoldRune(a rune, f func(v int32) rune) rune {
	return f(s.v)
}

func (s someInt32) FoldRuneF(a func() rune, f func(v int32) rune) rune {
	return f(s.v)
}


func (s someInt32) MapString(f func(v int32) string) OptionString {
	return SomeString(f(s.v))
}

func (s someInt32) FoldString(a string, f func(v int32) string) string {
	return f(s.v)
}

func (s someInt32) FoldStringF(a func() string, f func(v int32) string) string {
	return f(s.v)
}


func (s someInt32) MapUInt(f func(v int32) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someInt32) FoldUInt(a uint, f func(v int32) uint) uint {
	return f(s.v)
}

func (s someInt32) FoldUIntF(a func() uint, f func(v int32) uint) uint {
	return f(s.v)
}


func (s someInt32) MapUInt16(f func(v int32) uint16) OptionUInt16 {
	return SomeUInt16(f(s.v))
}

func (s someInt32) FoldUInt16(a uint16, f func(v int32) uint16) uint16 {
	return f(s.v)
}

func (s someInt32) FoldUInt16F(a func() uint16, f func(v int32) uint16) uint16 {
	return f(s.v)
}


func (s someInt32) MapUInt32(f func(v int32) uint32) OptionUInt32 {
	return SomeUInt32(f(s.v))
}

func (s someInt32) FoldUInt32(a uint32, f func(v int32) uint32) uint32 {
	return f(s.v)
}

func (s someInt32) FoldUInt32F(a func() uint32, f func(v int32) uint32) uint32 {
	return f(s.v)
}


func (s someInt32) MapUInt64(f func(v int32) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someInt32) FoldUInt64(a uint64, f func(v int32) uint64) uint64 {
	return f(s.v)
}

func (s someInt32) FoldUInt64F(a func() uint64, f func(v int32) uint64) uint64 {
	return f(s.v)
}


func (s someInt32) MapUInt8(f func(v int32) uint8) OptionUInt8 {
	return SomeUInt8(f(s.v))
}

func (s someInt32) FoldUInt8(a uint8, f func(v int32) uint8) uint8 {
	return f(s.v)
}

func (s someInt32) FoldUInt8F(a func() uint8, f func(v int32) uint8) uint8 {
	return f(s.v)
}


func (s someInt32) MapUintPtr(f func(v int32) uintptr) OptionUintPtr {
	return SomeUintPtr(f(s.v))
}

func (s someInt32) FoldUintPtr(a uintptr, f func(v int32) uintptr) uintptr {
	return f(s.v)
}

func (s someInt32) FoldUintPtrF(a func() uintptr, f func(v int32) uintptr) uintptr {
	return f(s.v)
}




type noneInt64 struct{}

func NoneInt64() OptionInt64 {
	return noneInt64{}
}

func (n noneInt64) Map(f func(int64)) {}

func (n noneInt64) FoldF(l func(), r func(int64)) { l() }


func (n noneInt64) MapBool(f func(v int64) bool) OptionBool {
	return noneBool{}
}

func (n noneInt64) FoldBool(a bool, f func(v int64) bool) bool {
	return a
}

func (n noneInt64) FoldBoolF(a func() bool, f func(v int64) bool) bool {
	return a()
}

func (n noneInt64) MapByte(f func(v int64) byte) OptionByte {
	return noneByte{}
}

func (n noneInt64) FoldByte(a byte, f func(v int64) byte) byte {
	return a
}

func (n noneInt64) FoldByteF(a func() byte, f func(v int64) byte) byte {
	return a()
}

func (n noneInt64) MapComplex128(f func(v int64) complex128) OptionComplex128 {
	return noneComplex128{}
}

func (n noneInt64) FoldComplex128(a complex128, f func(v int64) complex128) complex128 {
	return a
}

func (n noneInt64) FoldComplex128F(a func() complex128, f func(v int64) complex128) complex128 {
	return a()
}

func (n noneInt64) MapComplex64(f func(v int64) complex64) OptionComplex64 {
	return noneComplex64{}
}

func (n noneInt64) FoldComplex64(a complex64, f func(v int64) complex64) complex64 {
	return a
}

func (n noneInt64) FoldComplex64F(a func() complex64, f func(v int64) complex64) complex64 {
	return a()
}

func (n noneInt64) MapFloat32(f func(v int64) float32) OptionFloat32 {
	return noneFloat32{}
}

func (n noneInt64) FoldFloat32(a float32, f func(v int64) float32) float32 {
	return a
}

func (n noneInt64) FoldFloat32F(a func() float32, f func(v int64) float32) float32 {
	return a()
}

func (n noneInt64) MapFloat64(f func(v int64) float64) OptionFloat64 {
	return noneFloat64{}
}

func (n noneInt64) FoldFloat64(a float64, f func(v int64) float64) float64 {
	return a
}

func (n noneInt64) FoldFloat64F(a func() float64, f func(v int64) float64) float64 {
	return a()
}

func (n noneInt64) MapInt(f func(v int64) int) OptionInt {
	return noneInt{}
}

func (n noneInt64) FoldInt(a int, f func(v int64) int) int {
	return a
}

func (n noneInt64) FoldIntF(a func() int, f func(v int64) int) int {
	return a()
}

func (n noneInt64) MapInt16(f func(v int64) int16) OptionInt16 {
	return noneInt16{}
}

func (n noneInt64) FoldInt16(a int16, f func(v int64) int16) int16 {
	return a
}

func (n noneInt64) FoldInt16F(a func() int16, f func(v int64) int16) int16 {
	return a()
}

func (n noneInt64) MapInt32(f func(v int64) int32) OptionInt32 {
	return noneInt32{}
}

func (n noneInt64) FoldInt32(a int32, f func(v int64) int32) int32 {
	return a
}

func (n noneInt64) FoldInt32F(a func() int32, f func(v int64) int32) int32 {
	return a()
}

func (n noneInt64) MapInt64(f func(v int64) int64) OptionInt64 {
	return noneInt64{}
}

func (n noneInt64) FoldInt64(a int64, f func(v int64) int64) int64 {
	return a
}

func (n noneInt64) FoldInt64F(a func() int64, f func(v int64) int64) int64 {
	return a()
}

func (n noneInt64) MapInt8(f func(v int64) int8) OptionInt8 {
	return noneInt8{}
}

func (n noneInt64) FoldInt8(a int8, f func(v int64) int8) int8 {
	return a
}

func (n noneInt64) FoldInt8F(a func() int8, f func(v int64) int8) int8 {
	return a()
}

func (n noneInt64) MapRune(f func(v int64) rune) OptionRune {
	return noneRune{}
}

func (n noneInt64) FoldRune(a rune, f func(v int64) rune) rune {
	return a
}

func (n noneInt64) FoldRuneF(a func() rune, f func(v int64) rune) rune {
	return a()
}

func (n noneInt64) MapString(f func(v int64) string) OptionString {
	return noneString{}
}

func (n noneInt64) FoldString(a string, f func(v int64) string) string {
	return a
}

func (n noneInt64) FoldStringF(a func() string, f func(v int64) string) string {
	return a()
}

func (n noneInt64) MapUInt(f func(v int64) uint) OptionUInt {
	return noneUInt{}
}

func (n noneInt64) FoldUInt(a uint, f func(v int64) uint) uint {
	return a
}

func (n noneInt64) FoldUIntF(a func() uint, f func(v int64) uint) uint {
	return a()
}

func (n noneInt64) MapUInt16(f func(v int64) uint16) OptionUInt16 {
	return noneUInt16{}
}

func (n noneInt64) FoldUInt16(a uint16, f func(v int64) uint16) uint16 {
	return a
}

func (n noneInt64) FoldUInt16F(a func() uint16, f func(v int64) uint16) uint16 {
	return a()
}

func (n noneInt64) MapUInt32(f func(v int64) uint32) OptionUInt32 {
	return noneUInt32{}
}

func (n noneInt64) FoldUInt32(a uint32, f func(v int64) uint32) uint32 {
	return a
}

func (n noneInt64) FoldUInt32F(a func() uint32, f func(v int64) uint32) uint32 {
	return a()
}

func (n noneInt64) MapUInt64(f func(v int64) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneInt64) FoldUInt64(a uint64, f func(v int64) uint64) uint64 {
	return a
}

func (n noneInt64) FoldUInt64F(a func() uint64, f func(v int64) uint64) uint64 {
	return a()
}

func (n noneInt64) MapUInt8(f func(v int64) uint8) OptionUInt8 {
	return noneUInt8{}
}

func (n noneInt64) FoldUInt8(a uint8, f func(v int64) uint8) uint8 {
	return a
}

func (n noneInt64) FoldUInt8F(a func() uint8, f func(v int64) uint8) uint8 {
	return a()
}

func (n noneInt64) MapUintPtr(f func(v int64) uintptr) OptionUintPtr {
	return noneUintPtr{}
}

func (n noneInt64) FoldUintPtr(a uintptr, f func(v int64) uintptr) uintptr {
	return a
}

func (n noneInt64) FoldUintPtrF(a func() uintptr, f func(v int64) uintptr) uintptr {
	return a()
}



type someInt64 struct {
	v int64
}

func SomeInt64(v int64) OptionInt64 {
	return someInt64{v}
}

func (s someInt64) Map(f func(int64)) { f(s.v) }

func (s someInt64) FoldF(l func(), r func(int64)) { r(s.v) }


func (s someInt64) MapBool(f func(v int64) bool) OptionBool {
	return SomeBool(f(s.v))
}

func (s someInt64) FoldBool(a bool, f func(v int64) bool) bool {
	return f(s.v)
}

func (s someInt64) FoldBoolF(a func() bool, f func(v int64) bool) bool {
	return f(s.v)
}


func (s someInt64) MapByte(f func(v int64) byte) OptionByte {
	return SomeByte(f(s.v))
}

func (s someInt64) FoldByte(a byte, f func(v int64) byte) byte {
	return f(s.v)
}

func (s someInt64) FoldByteF(a func() byte, f func(v int64) byte) byte {
	return f(s.v)
}


func (s someInt64) MapComplex128(f func(v int64) complex128) OptionComplex128 {
	return SomeComplex128(f(s.v))
}

func (s someInt64) FoldComplex128(a complex128, f func(v int64) complex128) complex128 {
	return f(s.v)
}

func (s someInt64) FoldComplex128F(a func() complex128, f func(v int64) complex128) complex128 {
	return f(s.v)
}


func (s someInt64) MapComplex64(f func(v int64) complex64) OptionComplex64 {
	return SomeComplex64(f(s.v))
}

func (s someInt64) FoldComplex64(a complex64, f func(v int64) complex64) complex64 {
	return f(s.v)
}

func (s someInt64) FoldComplex64F(a func() complex64, f func(v int64) complex64) complex64 {
	return f(s.v)
}


func (s someInt64) MapFloat32(f func(v int64) float32) OptionFloat32 {
	return SomeFloat32(f(s.v))
}

func (s someInt64) FoldFloat32(a float32, f func(v int64) float32) float32 {
	return f(s.v)
}

func (s someInt64) FoldFloat32F(a func() float32, f func(v int64) float32) float32 {
	return f(s.v)
}


func (s someInt64) MapFloat64(f func(v int64) float64) OptionFloat64 {
	return SomeFloat64(f(s.v))
}

func (s someInt64) FoldFloat64(a float64, f func(v int64) float64) float64 {
	return f(s.v)
}

func (s someInt64) FoldFloat64F(a func() float64, f func(v int64) float64) float64 {
	return f(s.v)
}


func (s someInt64) MapInt(f func(v int64) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someInt64) FoldInt(a int, f func(v int64) int) int {
	return f(s.v)
}

func (s someInt64) FoldIntF(a func() int, f func(v int64) int) int {
	return f(s.v)
}


func (s someInt64) MapInt16(f func(v int64) int16) OptionInt16 {
	return SomeInt16(f(s.v))
}

func (s someInt64) FoldInt16(a int16, f func(v int64) int16) int16 {
	return f(s.v)
}

func (s someInt64) FoldInt16F(a func() int16, f func(v int64) int16) int16 {
	return f(s.v)
}


func (s someInt64) MapInt32(f func(v int64) int32) OptionInt32 {
	return SomeInt32(f(s.v))
}

func (s someInt64) FoldInt32(a int32, f func(v int64) int32) int32 {
	return f(s.v)
}

func (s someInt64) FoldInt32F(a func() int32, f func(v int64) int32) int32 {
	return f(s.v)
}


func (s someInt64) MapInt64(f func(v int64) int64) OptionInt64 {
	return SomeInt64(f(s.v))
}

func (s someInt64) FoldInt64(a int64, f func(v int64) int64) int64 {
	return f(s.v)
}

func (s someInt64) FoldInt64F(a func() int64, f func(v int64) int64) int64 {
	return f(s.v)
}


func (s someInt64) MapInt8(f func(v int64) int8) OptionInt8 {
	return SomeInt8(f(s.v))
}

func (s someInt64) FoldInt8(a int8, f func(v int64) int8) int8 {
	return f(s.v)
}

func (s someInt64) FoldInt8F(a func() int8, f func(v int64) int8) int8 {
	return f(s.v)
}


func (s someInt64) MapRune(f func(v int64) rune) OptionRune {
	return SomeRune(f(s.v))
}

func (s someInt64) FoldRune(a rune, f func(v int64) rune) rune {
	return f(s.v)
}

func (s someInt64) FoldRuneF(a func() rune, f func(v int64) rune) rune {
	return f(s.v)
}


func (s someInt64) MapString(f func(v int64) string) OptionString {
	return SomeString(f(s.v))
}

func (s someInt64) FoldString(a string, f func(v int64) string) string {
	return f(s.v)
}

func (s someInt64) FoldStringF(a func() string, f func(v int64) string) string {
	return f(s.v)
}


func (s someInt64) MapUInt(f func(v int64) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someInt64) FoldUInt(a uint, f func(v int64) uint) uint {
	return f(s.v)
}

func (s someInt64) FoldUIntF(a func() uint, f func(v int64) uint) uint {
	return f(s.v)
}


func (s someInt64) MapUInt16(f func(v int64) uint16) OptionUInt16 {
	return SomeUInt16(f(s.v))
}

func (s someInt64) FoldUInt16(a uint16, f func(v int64) uint16) uint16 {
	return f(s.v)
}

func (s someInt64) FoldUInt16F(a func() uint16, f func(v int64) uint16) uint16 {
	return f(s.v)
}


func (s someInt64) MapUInt32(f func(v int64) uint32) OptionUInt32 {
	return SomeUInt32(f(s.v))
}

func (s someInt64) FoldUInt32(a uint32, f func(v int64) uint32) uint32 {
	return f(s.v)
}

func (s someInt64) FoldUInt32F(a func() uint32, f func(v int64) uint32) uint32 {
	return f(s.v)
}


func (s someInt64) MapUInt64(f func(v int64) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someInt64) FoldUInt64(a uint64, f func(v int64) uint64) uint64 {
	return f(s.v)
}

func (s someInt64) FoldUInt64F(a func() uint64, f func(v int64) uint64) uint64 {
	return f(s.v)
}


func (s someInt64) MapUInt8(f func(v int64) uint8) OptionUInt8 {
	return SomeUInt8(f(s.v))
}

func (s someInt64) FoldUInt8(a uint8, f func(v int64) uint8) uint8 {
	return f(s.v)
}

func (s someInt64) FoldUInt8F(a func() uint8, f func(v int64) uint8) uint8 {
	return f(s.v)
}


func (s someInt64) MapUintPtr(f func(v int64) uintptr) OptionUintPtr {
	return SomeUintPtr(f(s.v))
}

func (s someInt64) FoldUintPtr(a uintptr, f func(v int64) uintptr) uintptr {
	return f(s.v)
}

func (s someInt64) FoldUintPtrF(a func() uintptr, f func(v int64) uintptr) uintptr {
	return f(s.v)
}




type noneInt8 struct{}

func NoneInt8() OptionInt8 {
	return noneInt8{}
}

func (n noneInt8) Map(f func(int8)) {}

func (n noneInt8) FoldF(l func(), r func(int8)) { l() }


func (n noneInt8) MapBool(f func(v int8) bool) OptionBool {
	return noneBool{}
}

func (n noneInt8) FoldBool(a bool, f func(v int8) bool) bool {
	return a
}

func (n noneInt8) FoldBoolF(a func() bool, f func(v int8) bool) bool {
	return a()
}

func (n noneInt8) MapByte(f func(v int8) byte) OptionByte {
	return noneByte{}
}

func (n noneInt8) FoldByte(a byte, f func(v int8) byte) byte {
	return a
}

func (n noneInt8) FoldByteF(a func() byte, f func(v int8) byte) byte {
	return a()
}

func (n noneInt8) MapComplex128(f func(v int8) complex128) OptionComplex128 {
	return noneComplex128{}
}

func (n noneInt8) FoldComplex128(a complex128, f func(v int8) complex128) complex128 {
	return a
}

func (n noneInt8) FoldComplex128F(a func() complex128, f func(v int8) complex128) complex128 {
	return a()
}

func (n noneInt8) MapComplex64(f func(v int8) complex64) OptionComplex64 {
	return noneComplex64{}
}

func (n noneInt8) FoldComplex64(a complex64, f func(v int8) complex64) complex64 {
	return a
}

func (n noneInt8) FoldComplex64F(a func() complex64, f func(v int8) complex64) complex64 {
	return a()
}

func (n noneInt8) MapFloat32(f func(v int8) float32) OptionFloat32 {
	return noneFloat32{}
}

func (n noneInt8) FoldFloat32(a float32, f func(v int8) float32) float32 {
	return a
}

func (n noneInt8) FoldFloat32F(a func() float32, f func(v int8) float32) float32 {
	return a()
}

func (n noneInt8) MapFloat64(f func(v int8) float64) OptionFloat64 {
	return noneFloat64{}
}

func (n noneInt8) FoldFloat64(a float64, f func(v int8) float64) float64 {
	return a
}

func (n noneInt8) FoldFloat64F(a func() float64, f func(v int8) float64) float64 {
	return a()
}

func (n noneInt8) MapInt(f func(v int8) int) OptionInt {
	return noneInt{}
}

func (n noneInt8) FoldInt(a int, f func(v int8) int) int {
	return a
}

func (n noneInt8) FoldIntF(a func() int, f func(v int8) int) int {
	return a()
}

func (n noneInt8) MapInt16(f func(v int8) int16) OptionInt16 {
	return noneInt16{}
}

func (n noneInt8) FoldInt16(a int16, f func(v int8) int16) int16 {
	return a
}

func (n noneInt8) FoldInt16F(a func() int16, f func(v int8) int16) int16 {
	return a()
}

func (n noneInt8) MapInt32(f func(v int8) int32) OptionInt32 {
	return noneInt32{}
}

func (n noneInt8) FoldInt32(a int32, f func(v int8) int32) int32 {
	return a
}

func (n noneInt8) FoldInt32F(a func() int32, f func(v int8) int32) int32 {
	return a()
}

func (n noneInt8) MapInt64(f func(v int8) int64) OptionInt64 {
	return noneInt64{}
}

func (n noneInt8) FoldInt64(a int64, f func(v int8) int64) int64 {
	return a
}

func (n noneInt8) FoldInt64F(a func() int64, f func(v int8) int64) int64 {
	return a()
}

func (n noneInt8) MapInt8(f func(v int8) int8) OptionInt8 {
	return noneInt8{}
}

func (n noneInt8) FoldInt8(a int8, f func(v int8) int8) int8 {
	return a
}

func (n noneInt8) FoldInt8F(a func() int8, f func(v int8) int8) int8 {
	return a()
}

func (n noneInt8) MapRune(f func(v int8) rune) OptionRune {
	return noneRune{}
}

func (n noneInt8) FoldRune(a rune, f func(v int8) rune) rune {
	return a
}

func (n noneInt8) FoldRuneF(a func() rune, f func(v int8) rune) rune {
	return a()
}

func (n noneInt8) MapString(f func(v int8) string) OptionString {
	return noneString{}
}

func (n noneInt8) FoldString(a string, f func(v int8) string) string {
	return a
}

func (n noneInt8) FoldStringF(a func() string, f func(v int8) string) string {
	return a()
}

func (n noneInt8) MapUInt(f func(v int8) uint) OptionUInt {
	return noneUInt{}
}

func (n noneInt8) FoldUInt(a uint, f func(v int8) uint) uint {
	return a
}

func (n noneInt8) FoldUIntF(a func() uint, f func(v int8) uint) uint {
	return a()
}

func (n noneInt8) MapUInt16(f func(v int8) uint16) OptionUInt16 {
	return noneUInt16{}
}

func (n noneInt8) FoldUInt16(a uint16, f func(v int8) uint16) uint16 {
	return a
}

func (n noneInt8) FoldUInt16F(a func() uint16, f func(v int8) uint16) uint16 {
	return a()
}

func (n noneInt8) MapUInt32(f func(v int8) uint32) OptionUInt32 {
	return noneUInt32{}
}

func (n noneInt8) FoldUInt32(a uint32, f func(v int8) uint32) uint32 {
	return a
}

func (n noneInt8) FoldUInt32F(a func() uint32, f func(v int8) uint32) uint32 {
	return a()
}

func (n noneInt8) MapUInt64(f func(v int8) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneInt8) FoldUInt64(a uint64, f func(v int8) uint64) uint64 {
	return a
}

func (n noneInt8) FoldUInt64F(a func() uint64, f func(v int8) uint64) uint64 {
	return a()
}

func (n noneInt8) MapUInt8(f func(v int8) uint8) OptionUInt8 {
	return noneUInt8{}
}

func (n noneInt8) FoldUInt8(a uint8, f func(v int8) uint8) uint8 {
	return a
}

func (n noneInt8) FoldUInt8F(a func() uint8, f func(v int8) uint8) uint8 {
	return a()
}

func (n noneInt8) MapUintPtr(f func(v int8) uintptr) OptionUintPtr {
	return noneUintPtr{}
}

func (n noneInt8) FoldUintPtr(a uintptr, f func(v int8) uintptr) uintptr {
	return a
}

func (n noneInt8) FoldUintPtrF(a func() uintptr, f func(v int8) uintptr) uintptr {
	return a()
}



type someInt8 struct {
	v int8
}

func SomeInt8(v int8) OptionInt8 {
	return someInt8{v}
}

func (s someInt8) Map(f func(int8)) { f(s.v) }

func (s someInt8) FoldF(l func(), r func(int8)) { r(s.v) }


func (s someInt8) MapBool(f func(v int8) bool) OptionBool {
	return SomeBool(f(s.v))
}

func (s someInt8) FoldBool(a bool, f func(v int8) bool) bool {
	return f(s.v)
}

func (s someInt8) FoldBoolF(a func() bool, f func(v int8) bool) bool {
	return f(s.v)
}


func (s someInt8) MapByte(f func(v int8) byte) OptionByte {
	return SomeByte(f(s.v))
}

func (s someInt8) FoldByte(a byte, f func(v int8) byte) byte {
	return f(s.v)
}

func (s someInt8) FoldByteF(a func() byte, f func(v int8) byte) byte {
	return f(s.v)
}


func (s someInt8) MapComplex128(f func(v int8) complex128) OptionComplex128 {
	return SomeComplex128(f(s.v))
}

func (s someInt8) FoldComplex128(a complex128, f func(v int8) complex128) complex128 {
	return f(s.v)
}

func (s someInt8) FoldComplex128F(a func() complex128, f func(v int8) complex128) complex128 {
	return f(s.v)
}


func (s someInt8) MapComplex64(f func(v int8) complex64) OptionComplex64 {
	return SomeComplex64(f(s.v))
}

func (s someInt8) FoldComplex64(a complex64, f func(v int8) complex64) complex64 {
	return f(s.v)
}

func (s someInt8) FoldComplex64F(a func() complex64, f func(v int8) complex64) complex64 {
	return f(s.v)
}


func (s someInt8) MapFloat32(f func(v int8) float32) OptionFloat32 {
	return SomeFloat32(f(s.v))
}

func (s someInt8) FoldFloat32(a float32, f func(v int8) float32) float32 {
	return f(s.v)
}

func (s someInt8) FoldFloat32F(a func() float32, f func(v int8) float32) float32 {
	return f(s.v)
}


func (s someInt8) MapFloat64(f func(v int8) float64) OptionFloat64 {
	return SomeFloat64(f(s.v))
}

func (s someInt8) FoldFloat64(a float64, f func(v int8) float64) float64 {
	return f(s.v)
}

func (s someInt8) FoldFloat64F(a func() float64, f func(v int8) float64) float64 {
	return f(s.v)
}


func (s someInt8) MapInt(f func(v int8) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someInt8) FoldInt(a int, f func(v int8) int) int {
	return f(s.v)
}

func (s someInt8) FoldIntF(a func() int, f func(v int8) int) int {
	return f(s.v)
}


func (s someInt8) MapInt16(f func(v int8) int16) OptionInt16 {
	return SomeInt16(f(s.v))
}

func (s someInt8) FoldInt16(a int16, f func(v int8) int16) int16 {
	return f(s.v)
}

func (s someInt8) FoldInt16F(a func() int16, f func(v int8) int16) int16 {
	return f(s.v)
}


func (s someInt8) MapInt32(f func(v int8) int32) OptionInt32 {
	return SomeInt32(f(s.v))
}

func (s someInt8) FoldInt32(a int32, f func(v int8) int32) int32 {
	return f(s.v)
}

func (s someInt8) FoldInt32F(a func() int32, f func(v int8) int32) int32 {
	return f(s.v)
}


func (s someInt8) MapInt64(f func(v int8) int64) OptionInt64 {
	return SomeInt64(f(s.v))
}

func (s someInt8) FoldInt64(a int64, f func(v int8) int64) int64 {
	return f(s.v)
}

func (s someInt8) FoldInt64F(a func() int64, f func(v int8) int64) int64 {
	return f(s.v)
}


func (s someInt8) MapInt8(f func(v int8) int8) OptionInt8 {
	return SomeInt8(f(s.v))
}

func (s someInt8) FoldInt8(a int8, f func(v int8) int8) int8 {
	return f(s.v)
}

func (s someInt8) FoldInt8F(a func() int8, f func(v int8) int8) int8 {
	return f(s.v)
}


func (s someInt8) MapRune(f func(v int8) rune) OptionRune {
	return SomeRune(f(s.v))
}

func (s someInt8) FoldRune(a rune, f func(v int8) rune) rune {
	return f(s.v)
}

func (s someInt8) FoldRuneF(a func() rune, f func(v int8) rune) rune {
	return f(s.v)
}


func (s someInt8) MapString(f func(v int8) string) OptionString {
	return SomeString(f(s.v))
}

func (s someInt8) FoldString(a string, f func(v int8) string) string {
	return f(s.v)
}

func (s someInt8) FoldStringF(a func() string, f func(v int8) string) string {
	return f(s.v)
}


func (s someInt8) MapUInt(f func(v int8) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someInt8) FoldUInt(a uint, f func(v int8) uint) uint {
	return f(s.v)
}

func (s someInt8) FoldUIntF(a func() uint, f func(v int8) uint) uint {
	return f(s.v)
}


func (s someInt8) MapUInt16(f func(v int8) uint16) OptionUInt16 {
	return SomeUInt16(f(s.v))
}

func (s someInt8) FoldUInt16(a uint16, f func(v int8) uint16) uint16 {
	return f(s.v)
}

func (s someInt8) FoldUInt16F(a func() uint16, f func(v int8) uint16) uint16 {
	return f(s.v)
}


func (s someInt8) MapUInt32(f func(v int8) uint32) OptionUInt32 {
	return SomeUInt32(f(s.v))
}

func (s someInt8) FoldUInt32(a uint32, f func(v int8) uint32) uint32 {
	return f(s.v)
}

func (s someInt8) FoldUInt32F(a func() uint32, f func(v int8) uint32) uint32 {
	return f(s.v)
}


func (s someInt8) MapUInt64(f func(v int8) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someInt8) FoldUInt64(a uint64, f func(v int8) uint64) uint64 {
	return f(s.v)
}

func (s someInt8) FoldUInt64F(a func() uint64, f func(v int8) uint64) uint64 {
	return f(s.v)
}


func (s someInt8) MapUInt8(f func(v int8) uint8) OptionUInt8 {
	return SomeUInt8(f(s.v))
}

func (s someInt8) FoldUInt8(a uint8, f func(v int8) uint8) uint8 {
	return f(s.v)
}

func (s someInt8) FoldUInt8F(a func() uint8, f func(v int8) uint8) uint8 {
	return f(s.v)
}


func (s someInt8) MapUintPtr(f func(v int8) uintptr) OptionUintPtr {
	return SomeUintPtr(f(s.v))
}

func (s someInt8) FoldUintPtr(a uintptr, f func(v int8) uintptr) uintptr {
	return f(s.v)
}

func (s someInt8) FoldUintPtrF(a func() uintptr, f func(v int8) uintptr) uintptr {
	return f(s.v)
}




type noneRune struct{}

func NoneRune() OptionRune {
	return noneRune{}
}

func (n noneRune) Map(f func(rune)) {}

func (n noneRune) FoldF(l func(), r func(rune)) { l() }


func (n noneRune) MapBool(f func(v rune) bool) OptionBool {
	return noneBool{}
}

func (n noneRune) FoldBool(a bool, f func(v rune) bool) bool {
	return a
}

func (n noneRune) FoldBoolF(a func() bool, f func(v rune) bool) bool {
	return a()
}

func (n noneRune) MapByte(f func(v rune) byte) OptionByte {
	return noneByte{}
}

func (n noneRune) FoldByte(a byte, f func(v rune) byte) byte {
	return a
}

func (n noneRune) FoldByteF(a func() byte, f func(v rune) byte) byte {
	return a()
}

func (n noneRune) MapComplex128(f func(v rune) complex128) OptionComplex128 {
	return noneComplex128{}
}

func (n noneRune) FoldComplex128(a complex128, f func(v rune) complex128) complex128 {
	return a
}

func (n noneRune) FoldComplex128F(a func() complex128, f func(v rune) complex128) complex128 {
	return a()
}

func (n noneRune) MapComplex64(f func(v rune) complex64) OptionComplex64 {
	return noneComplex64{}
}

func (n noneRune) FoldComplex64(a complex64, f func(v rune) complex64) complex64 {
	return a
}

func (n noneRune) FoldComplex64F(a func() complex64, f func(v rune) complex64) complex64 {
	return a()
}

func (n noneRune) MapFloat32(f func(v rune) float32) OptionFloat32 {
	return noneFloat32{}
}

func (n noneRune) FoldFloat32(a float32, f func(v rune) float32) float32 {
	return a
}

func (n noneRune) FoldFloat32F(a func() float32, f func(v rune) float32) float32 {
	return a()
}

func (n noneRune) MapFloat64(f func(v rune) float64) OptionFloat64 {
	return noneFloat64{}
}

func (n noneRune) FoldFloat64(a float64, f func(v rune) float64) float64 {
	return a
}

func (n noneRune) FoldFloat64F(a func() float64, f func(v rune) float64) float64 {
	return a()
}

func (n noneRune) MapInt(f func(v rune) int) OptionInt {
	return noneInt{}
}

func (n noneRune) FoldInt(a int, f func(v rune) int) int {
	return a
}

func (n noneRune) FoldIntF(a func() int, f func(v rune) int) int {
	return a()
}

func (n noneRune) MapInt16(f func(v rune) int16) OptionInt16 {
	return noneInt16{}
}

func (n noneRune) FoldInt16(a int16, f func(v rune) int16) int16 {
	return a
}

func (n noneRune) FoldInt16F(a func() int16, f func(v rune) int16) int16 {
	return a()
}

func (n noneRune) MapInt32(f func(v rune) int32) OptionInt32 {
	return noneInt32{}
}

func (n noneRune) FoldInt32(a int32, f func(v rune) int32) int32 {
	return a
}

func (n noneRune) FoldInt32F(a func() int32, f func(v rune) int32) int32 {
	return a()
}

func (n noneRune) MapInt64(f func(v rune) int64) OptionInt64 {
	return noneInt64{}
}

func (n noneRune) FoldInt64(a int64, f func(v rune) int64) int64 {
	return a
}

func (n noneRune) FoldInt64F(a func() int64, f func(v rune) int64) int64 {
	return a()
}

func (n noneRune) MapInt8(f func(v rune) int8) OptionInt8 {
	return noneInt8{}
}

func (n noneRune) FoldInt8(a int8, f func(v rune) int8) int8 {
	return a
}

func (n noneRune) FoldInt8F(a func() int8, f func(v rune) int8) int8 {
	return a()
}

func (n noneRune) MapRune(f func(v rune) rune) OptionRune {
	return noneRune{}
}

func (n noneRune) FoldRune(a rune, f func(v rune) rune) rune {
	return a
}

func (n noneRune) FoldRuneF(a func() rune, f func(v rune) rune) rune {
	return a()
}

func (n noneRune) MapString(f func(v rune) string) OptionString {
	return noneString{}
}

func (n noneRune) FoldString(a string, f func(v rune) string) string {
	return a
}

func (n noneRune) FoldStringF(a func() string, f func(v rune) string) string {
	return a()
}

func (n noneRune) MapUInt(f func(v rune) uint) OptionUInt {
	return noneUInt{}
}

func (n noneRune) FoldUInt(a uint, f func(v rune) uint) uint {
	return a
}

func (n noneRune) FoldUIntF(a func() uint, f func(v rune) uint) uint {
	return a()
}

func (n noneRune) MapUInt16(f func(v rune) uint16) OptionUInt16 {
	return noneUInt16{}
}

func (n noneRune) FoldUInt16(a uint16, f func(v rune) uint16) uint16 {
	return a
}

func (n noneRune) FoldUInt16F(a func() uint16, f func(v rune) uint16) uint16 {
	return a()
}

func (n noneRune) MapUInt32(f func(v rune) uint32) OptionUInt32 {
	return noneUInt32{}
}

func (n noneRune) FoldUInt32(a uint32, f func(v rune) uint32) uint32 {
	return a
}

func (n noneRune) FoldUInt32F(a func() uint32, f func(v rune) uint32) uint32 {
	return a()
}

func (n noneRune) MapUInt64(f func(v rune) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneRune) FoldUInt64(a uint64, f func(v rune) uint64) uint64 {
	return a
}

func (n noneRune) FoldUInt64F(a func() uint64, f func(v rune) uint64) uint64 {
	return a()
}

func (n noneRune) MapUInt8(f func(v rune) uint8) OptionUInt8 {
	return noneUInt8{}
}

func (n noneRune) FoldUInt8(a uint8, f func(v rune) uint8) uint8 {
	return a
}

func (n noneRune) FoldUInt8F(a func() uint8, f func(v rune) uint8) uint8 {
	return a()
}

func (n noneRune) MapUintPtr(f func(v rune) uintptr) OptionUintPtr {
	return noneUintPtr{}
}

func (n noneRune) FoldUintPtr(a uintptr, f func(v rune) uintptr) uintptr {
	return a
}

func (n noneRune) FoldUintPtrF(a func() uintptr, f func(v rune) uintptr) uintptr {
	return a()
}



type someRune struct {
	v rune
}

func SomeRune(v rune) OptionRune {
	return someRune{v}
}

func (s someRune) Map(f func(rune)) { f(s.v) }

func (s someRune) FoldF(l func(), r func(rune)) { r(s.v) }


func (s someRune) MapBool(f func(v rune) bool) OptionBool {
	return SomeBool(f(s.v))
}

func (s someRune) FoldBool(a bool, f func(v rune) bool) bool {
	return f(s.v)
}

func (s someRune) FoldBoolF(a func() bool, f func(v rune) bool) bool {
	return f(s.v)
}


func (s someRune) MapByte(f func(v rune) byte) OptionByte {
	return SomeByte(f(s.v))
}

func (s someRune) FoldByte(a byte, f func(v rune) byte) byte {
	return f(s.v)
}

func (s someRune) FoldByteF(a func() byte, f func(v rune) byte) byte {
	return f(s.v)
}


func (s someRune) MapComplex128(f func(v rune) complex128) OptionComplex128 {
	return SomeComplex128(f(s.v))
}

func (s someRune) FoldComplex128(a complex128, f func(v rune) complex128) complex128 {
	return f(s.v)
}

func (s someRune) FoldComplex128F(a func() complex128, f func(v rune) complex128) complex128 {
	return f(s.v)
}


func (s someRune) MapComplex64(f func(v rune) complex64) OptionComplex64 {
	return SomeComplex64(f(s.v))
}

func (s someRune) FoldComplex64(a complex64, f func(v rune) complex64) complex64 {
	return f(s.v)
}

func (s someRune) FoldComplex64F(a func() complex64, f func(v rune) complex64) complex64 {
	return f(s.v)
}


func (s someRune) MapFloat32(f func(v rune) float32) OptionFloat32 {
	return SomeFloat32(f(s.v))
}

func (s someRune) FoldFloat32(a float32, f func(v rune) float32) float32 {
	return f(s.v)
}

func (s someRune) FoldFloat32F(a func() float32, f func(v rune) float32) float32 {
	return f(s.v)
}


func (s someRune) MapFloat64(f func(v rune) float64) OptionFloat64 {
	return SomeFloat64(f(s.v))
}

func (s someRune) FoldFloat64(a float64, f func(v rune) float64) float64 {
	return f(s.v)
}

func (s someRune) FoldFloat64F(a func() float64, f func(v rune) float64) float64 {
	return f(s.v)
}


func (s someRune) MapInt(f func(v rune) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someRune) FoldInt(a int, f func(v rune) int) int {
	return f(s.v)
}

func (s someRune) FoldIntF(a func() int, f func(v rune) int) int {
	return f(s.v)
}


func (s someRune) MapInt16(f func(v rune) int16) OptionInt16 {
	return SomeInt16(f(s.v))
}

func (s someRune) FoldInt16(a int16, f func(v rune) int16) int16 {
	return f(s.v)
}

func (s someRune) FoldInt16F(a func() int16, f func(v rune) int16) int16 {
	return f(s.v)
}


func (s someRune) MapInt32(f func(v rune) int32) OptionInt32 {
	return SomeInt32(f(s.v))
}

func (s someRune) FoldInt32(a int32, f func(v rune) int32) int32 {
	return f(s.v)
}

func (s someRune) FoldInt32F(a func() int32, f func(v rune) int32) int32 {
	return f(s.v)
}


func (s someRune) MapInt64(f func(v rune) int64) OptionInt64 {
	return SomeInt64(f(s.v))
}

func (s someRune) FoldInt64(a int64, f func(v rune) int64) int64 {
	return f(s.v)
}

func (s someRune) FoldInt64F(a func() int64, f func(v rune) int64) int64 {
	return f(s.v)
}


func (s someRune) MapInt8(f func(v rune) int8) OptionInt8 {
	return SomeInt8(f(s.v))
}

func (s someRune) FoldInt8(a int8, f func(v rune) int8) int8 {
	return f(s.v)
}

func (s someRune) FoldInt8F(a func() int8, f func(v rune) int8) int8 {
	return f(s.v)
}


func (s someRune) MapRune(f func(v rune) rune) OptionRune {
	return SomeRune(f(s.v))
}

func (s someRune) FoldRune(a rune, f func(v rune) rune) rune {
	return f(s.v)
}

func (s someRune) FoldRuneF(a func() rune, f func(v rune) rune) rune {
	return f(s.v)
}


func (s someRune) MapString(f func(v rune) string) OptionString {
	return SomeString(f(s.v))
}

func (s someRune) FoldString(a string, f func(v rune) string) string {
	return f(s.v)
}

func (s someRune) FoldStringF(a func() string, f func(v rune) string) string {
	return f(s.v)
}


func (s someRune) MapUInt(f func(v rune) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someRune) FoldUInt(a uint, f func(v rune) uint) uint {
	return f(s.v)
}

func (s someRune) FoldUIntF(a func() uint, f func(v rune) uint) uint {
	return f(s.v)
}


func (s someRune) MapUInt16(f func(v rune) uint16) OptionUInt16 {
	return SomeUInt16(f(s.v))
}

func (s someRune) FoldUInt16(a uint16, f func(v rune) uint16) uint16 {
	return f(s.v)
}

func (s someRune) FoldUInt16F(a func() uint16, f func(v rune) uint16) uint16 {
	return f(s.v)
}


func (s someRune) MapUInt32(f func(v rune) uint32) OptionUInt32 {
	return SomeUInt32(f(s.v))
}

func (s someRune) FoldUInt32(a uint32, f func(v rune) uint32) uint32 {
	return f(s.v)
}

func (s someRune) FoldUInt32F(a func() uint32, f func(v rune) uint32) uint32 {
	return f(s.v)
}


func (s someRune) MapUInt64(f func(v rune) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someRune) FoldUInt64(a uint64, f func(v rune) uint64) uint64 {
	return f(s.v)
}

func (s someRune) FoldUInt64F(a func() uint64, f func(v rune) uint64) uint64 {
	return f(s.v)
}


func (s someRune) MapUInt8(f func(v rune) uint8) OptionUInt8 {
	return SomeUInt8(f(s.v))
}

func (s someRune) FoldUInt8(a uint8, f func(v rune) uint8) uint8 {
	return f(s.v)
}

func (s someRune) FoldUInt8F(a func() uint8, f func(v rune) uint8) uint8 {
	return f(s.v)
}


func (s someRune) MapUintPtr(f func(v rune) uintptr) OptionUintPtr {
	return SomeUintPtr(f(s.v))
}

func (s someRune) FoldUintPtr(a uintptr, f func(v rune) uintptr) uintptr {
	return f(s.v)
}

func (s someRune) FoldUintPtrF(a func() uintptr, f func(v rune) uintptr) uintptr {
	return f(s.v)
}




type noneString struct{}

func NoneString() OptionString {
	return noneString{}
}

func (n noneString) Map(f func(string)) {}

func (n noneString) FoldF(l func(), r func(string)) { l() }


func (n noneString) MapBool(f func(v string) bool) OptionBool {
	return noneBool{}
}

func (n noneString) FoldBool(a bool, f func(v string) bool) bool {
	return a
}

func (n noneString) FoldBoolF(a func() bool, f func(v string) bool) bool {
	return a()
}

func (n noneString) MapByte(f func(v string) byte) OptionByte {
	return noneByte{}
}

func (n noneString) FoldByte(a byte, f func(v string) byte) byte {
	return a
}

func (n noneString) FoldByteF(a func() byte, f func(v string) byte) byte {
	return a()
}

func (n noneString) MapComplex128(f func(v string) complex128) OptionComplex128 {
	return noneComplex128{}
}

func (n noneString) FoldComplex128(a complex128, f func(v string) complex128) complex128 {
	return a
}

func (n noneString) FoldComplex128F(a func() complex128, f func(v string) complex128) complex128 {
	return a()
}

func (n noneString) MapComplex64(f func(v string) complex64) OptionComplex64 {
	return noneComplex64{}
}

func (n noneString) FoldComplex64(a complex64, f func(v string) complex64) complex64 {
	return a
}

func (n noneString) FoldComplex64F(a func() complex64, f func(v string) complex64) complex64 {
	return a()
}

func (n noneString) MapFloat32(f func(v string) float32) OptionFloat32 {
	return noneFloat32{}
}

func (n noneString) FoldFloat32(a float32, f func(v string) float32) float32 {
	return a
}

func (n noneString) FoldFloat32F(a func() float32, f func(v string) float32) float32 {
	return a()
}

func (n noneString) MapFloat64(f func(v string) float64) OptionFloat64 {
	return noneFloat64{}
}

func (n noneString) FoldFloat64(a float64, f func(v string) float64) float64 {
	return a
}

func (n noneString) FoldFloat64F(a func() float64, f func(v string) float64) float64 {
	return a()
}

func (n noneString) MapInt(f func(v string) int) OptionInt {
	return noneInt{}
}

func (n noneString) FoldInt(a int, f func(v string) int) int {
	return a
}

func (n noneString) FoldIntF(a func() int, f func(v string) int) int {
	return a()
}

func (n noneString) MapInt16(f func(v string) int16) OptionInt16 {
	return noneInt16{}
}

func (n noneString) FoldInt16(a int16, f func(v string) int16) int16 {
	return a
}

func (n noneString) FoldInt16F(a func() int16, f func(v string) int16) int16 {
	return a()
}

func (n noneString) MapInt32(f func(v string) int32) OptionInt32 {
	return noneInt32{}
}

func (n noneString) FoldInt32(a int32, f func(v string) int32) int32 {
	return a
}

func (n noneString) FoldInt32F(a func() int32, f func(v string) int32) int32 {
	return a()
}

func (n noneString) MapInt64(f func(v string) int64) OptionInt64 {
	return noneInt64{}
}

func (n noneString) FoldInt64(a int64, f func(v string) int64) int64 {
	return a
}

func (n noneString) FoldInt64F(a func() int64, f func(v string) int64) int64 {
	return a()
}

func (n noneString) MapInt8(f func(v string) int8) OptionInt8 {
	return noneInt8{}
}

func (n noneString) FoldInt8(a int8, f func(v string) int8) int8 {
	return a
}

func (n noneString) FoldInt8F(a func() int8, f func(v string) int8) int8 {
	return a()
}

func (n noneString) MapRune(f func(v string) rune) OptionRune {
	return noneRune{}
}

func (n noneString) FoldRune(a rune, f func(v string) rune) rune {
	return a
}

func (n noneString) FoldRuneF(a func() rune, f func(v string) rune) rune {
	return a()
}

func (n noneString) MapString(f func(v string) string) OptionString {
	return noneString{}
}

func (n noneString) FoldString(a string, f func(v string) string) string {
	return a
}

func (n noneString) FoldStringF(a func() string, f func(v string) string) string {
	return a()
}

func (n noneString) MapUInt(f func(v string) uint) OptionUInt {
	return noneUInt{}
}

func (n noneString) FoldUInt(a uint, f func(v string) uint) uint {
	return a
}

func (n noneString) FoldUIntF(a func() uint, f func(v string) uint) uint {
	return a()
}

func (n noneString) MapUInt16(f func(v string) uint16) OptionUInt16 {
	return noneUInt16{}
}

func (n noneString) FoldUInt16(a uint16, f func(v string) uint16) uint16 {
	return a
}

func (n noneString) FoldUInt16F(a func() uint16, f func(v string) uint16) uint16 {
	return a()
}

func (n noneString) MapUInt32(f func(v string) uint32) OptionUInt32 {
	return noneUInt32{}
}

func (n noneString) FoldUInt32(a uint32, f func(v string) uint32) uint32 {
	return a
}

func (n noneString) FoldUInt32F(a func() uint32, f func(v string) uint32) uint32 {
	return a()
}

func (n noneString) MapUInt64(f func(v string) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneString) FoldUInt64(a uint64, f func(v string) uint64) uint64 {
	return a
}

func (n noneString) FoldUInt64F(a func() uint64, f func(v string) uint64) uint64 {
	return a()
}

func (n noneString) MapUInt8(f func(v string) uint8) OptionUInt8 {
	return noneUInt8{}
}

func (n noneString) FoldUInt8(a uint8, f func(v string) uint8) uint8 {
	return a
}

func (n noneString) FoldUInt8F(a func() uint8, f func(v string) uint8) uint8 {
	return a()
}

func (n noneString) MapUintPtr(f func(v string) uintptr) OptionUintPtr {
	return noneUintPtr{}
}

func (n noneString) FoldUintPtr(a uintptr, f func(v string) uintptr) uintptr {
	return a
}

func (n noneString) FoldUintPtrF(a func() uintptr, f func(v string) uintptr) uintptr {
	return a()
}



type someString struct {
	v string
}

func SomeString(v string) OptionString {
	return someString{v}
}

func (s someString) Map(f func(string)) { f(s.v) }

func (s someString) FoldF(l func(), r func(string)) { r(s.v) }


func (s someString) MapBool(f func(v string) bool) OptionBool {
	return SomeBool(f(s.v))
}

func (s someString) FoldBool(a bool, f func(v string) bool) bool {
	return f(s.v)
}

func (s someString) FoldBoolF(a func() bool, f func(v string) bool) bool {
	return f(s.v)
}


func (s someString) MapByte(f func(v string) byte) OptionByte {
	return SomeByte(f(s.v))
}

func (s someString) FoldByte(a byte, f func(v string) byte) byte {
	return f(s.v)
}

func (s someString) FoldByteF(a func() byte, f func(v string) byte) byte {
	return f(s.v)
}


func (s someString) MapComplex128(f func(v string) complex128) OptionComplex128 {
	return SomeComplex128(f(s.v))
}

func (s someString) FoldComplex128(a complex128, f func(v string) complex128) complex128 {
	return f(s.v)
}

func (s someString) FoldComplex128F(a func() complex128, f func(v string) complex128) complex128 {
	return f(s.v)
}


func (s someString) MapComplex64(f func(v string) complex64) OptionComplex64 {
	return SomeComplex64(f(s.v))
}

func (s someString) FoldComplex64(a complex64, f func(v string) complex64) complex64 {
	return f(s.v)
}

func (s someString) FoldComplex64F(a func() complex64, f func(v string) complex64) complex64 {
	return f(s.v)
}


func (s someString) MapFloat32(f func(v string) float32) OptionFloat32 {
	return SomeFloat32(f(s.v))
}

func (s someString) FoldFloat32(a float32, f func(v string) float32) float32 {
	return f(s.v)
}

func (s someString) FoldFloat32F(a func() float32, f func(v string) float32) float32 {
	return f(s.v)
}


func (s someString) MapFloat64(f func(v string) float64) OptionFloat64 {
	return SomeFloat64(f(s.v))
}

func (s someString) FoldFloat64(a float64, f func(v string) float64) float64 {
	return f(s.v)
}

func (s someString) FoldFloat64F(a func() float64, f func(v string) float64) float64 {
	return f(s.v)
}


func (s someString) MapInt(f func(v string) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someString) FoldInt(a int, f func(v string) int) int {
	return f(s.v)
}

func (s someString) FoldIntF(a func() int, f func(v string) int) int {
	return f(s.v)
}


func (s someString) MapInt16(f func(v string) int16) OptionInt16 {
	return SomeInt16(f(s.v))
}

func (s someString) FoldInt16(a int16, f func(v string) int16) int16 {
	return f(s.v)
}

func (s someString) FoldInt16F(a func() int16, f func(v string) int16) int16 {
	return f(s.v)
}


func (s someString) MapInt32(f func(v string) int32) OptionInt32 {
	return SomeInt32(f(s.v))
}

func (s someString) FoldInt32(a int32, f func(v string) int32) int32 {
	return f(s.v)
}

func (s someString) FoldInt32F(a func() int32, f func(v string) int32) int32 {
	return f(s.v)
}


func (s someString) MapInt64(f func(v string) int64) OptionInt64 {
	return SomeInt64(f(s.v))
}

func (s someString) FoldInt64(a int64, f func(v string) int64) int64 {
	return f(s.v)
}

func (s someString) FoldInt64F(a func() int64, f func(v string) int64) int64 {
	return f(s.v)
}


func (s someString) MapInt8(f func(v string) int8) OptionInt8 {
	return SomeInt8(f(s.v))
}

func (s someString) FoldInt8(a int8, f func(v string) int8) int8 {
	return f(s.v)
}

func (s someString) FoldInt8F(a func() int8, f func(v string) int8) int8 {
	return f(s.v)
}


func (s someString) MapRune(f func(v string) rune) OptionRune {
	return SomeRune(f(s.v))
}

func (s someString) FoldRune(a rune, f func(v string) rune) rune {
	return f(s.v)
}

func (s someString) FoldRuneF(a func() rune, f func(v string) rune) rune {
	return f(s.v)
}


func (s someString) MapString(f func(v string) string) OptionString {
	return SomeString(f(s.v))
}

func (s someString) FoldString(a string, f func(v string) string) string {
	return f(s.v)
}

func (s someString) FoldStringF(a func() string, f func(v string) string) string {
	return f(s.v)
}


func (s someString) MapUInt(f func(v string) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someString) FoldUInt(a uint, f func(v string) uint) uint {
	return f(s.v)
}

func (s someString) FoldUIntF(a func() uint, f func(v string) uint) uint {
	return f(s.v)
}


func (s someString) MapUInt16(f func(v string) uint16) OptionUInt16 {
	return SomeUInt16(f(s.v))
}

func (s someString) FoldUInt16(a uint16, f func(v string) uint16) uint16 {
	return f(s.v)
}

func (s someString) FoldUInt16F(a func() uint16, f func(v string) uint16) uint16 {
	return f(s.v)
}


func (s someString) MapUInt32(f func(v string) uint32) OptionUInt32 {
	return SomeUInt32(f(s.v))
}

func (s someString) FoldUInt32(a uint32, f func(v string) uint32) uint32 {
	return f(s.v)
}

func (s someString) FoldUInt32F(a func() uint32, f func(v string) uint32) uint32 {
	return f(s.v)
}


func (s someString) MapUInt64(f func(v string) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someString) FoldUInt64(a uint64, f func(v string) uint64) uint64 {
	return f(s.v)
}

func (s someString) FoldUInt64F(a func() uint64, f func(v string) uint64) uint64 {
	return f(s.v)
}


func (s someString) MapUInt8(f func(v string) uint8) OptionUInt8 {
	return SomeUInt8(f(s.v))
}

func (s someString) FoldUInt8(a uint8, f func(v string) uint8) uint8 {
	return f(s.v)
}

func (s someString) FoldUInt8F(a func() uint8, f func(v string) uint8) uint8 {
	return f(s.v)
}


func (s someString) MapUintPtr(f func(v string) uintptr) OptionUintPtr {
	return SomeUintPtr(f(s.v))
}

func (s someString) FoldUintPtr(a uintptr, f func(v string) uintptr) uintptr {
	return f(s.v)
}

func (s someString) FoldUintPtrF(a func() uintptr, f func(v string) uintptr) uintptr {
	return f(s.v)
}




type noneUInt struct{}

func NoneUInt() OptionUInt {
	return noneUInt{}
}

func (n noneUInt) Map(f func(uint)) {}

func (n noneUInt) FoldF(l func(), r func(uint)) { l() }


func (n noneUInt) MapBool(f func(v uint) bool) OptionBool {
	return noneBool{}
}

func (n noneUInt) FoldBool(a bool, f func(v uint) bool) bool {
	return a
}

func (n noneUInt) FoldBoolF(a func() bool, f func(v uint) bool) bool {
	return a()
}

func (n noneUInt) MapByte(f func(v uint) byte) OptionByte {
	return noneByte{}
}

func (n noneUInt) FoldByte(a byte, f func(v uint) byte) byte {
	return a
}

func (n noneUInt) FoldByteF(a func() byte, f func(v uint) byte) byte {
	return a()
}

func (n noneUInt) MapComplex128(f func(v uint) complex128) OptionComplex128 {
	return noneComplex128{}
}

func (n noneUInt) FoldComplex128(a complex128, f func(v uint) complex128) complex128 {
	return a
}

func (n noneUInt) FoldComplex128F(a func() complex128, f func(v uint) complex128) complex128 {
	return a()
}

func (n noneUInt) MapComplex64(f func(v uint) complex64) OptionComplex64 {
	return noneComplex64{}
}

func (n noneUInt) FoldComplex64(a complex64, f func(v uint) complex64) complex64 {
	return a
}

func (n noneUInt) FoldComplex64F(a func() complex64, f func(v uint) complex64) complex64 {
	return a()
}

func (n noneUInt) MapFloat32(f func(v uint) float32) OptionFloat32 {
	return noneFloat32{}
}

func (n noneUInt) FoldFloat32(a float32, f func(v uint) float32) float32 {
	return a
}

func (n noneUInt) FoldFloat32F(a func() float32, f func(v uint) float32) float32 {
	return a()
}

func (n noneUInt) MapFloat64(f func(v uint) float64) OptionFloat64 {
	return noneFloat64{}
}

func (n noneUInt) FoldFloat64(a float64, f func(v uint) float64) float64 {
	return a
}

func (n noneUInt) FoldFloat64F(a func() float64, f func(v uint) float64) float64 {
	return a()
}

func (n noneUInt) MapInt(f func(v uint) int) OptionInt {
	return noneInt{}
}

func (n noneUInt) FoldInt(a int, f func(v uint) int) int {
	return a
}

func (n noneUInt) FoldIntF(a func() int, f func(v uint) int) int {
	return a()
}

func (n noneUInt) MapInt16(f func(v uint) int16) OptionInt16 {
	return noneInt16{}
}

func (n noneUInt) FoldInt16(a int16, f func(v uint) int16) int16 {
	return a
}

func (n noneUInt) FoldInt16F(a func() int16, f func(v uint) int16) int16 {
	return a()
}

func (n noneUInt) MapInt32(f func(v uint) int32) OptionInt32 {
	return noneInt32{}
}

func (n noneUInt) FoldInt32(a int32, f func(v uint) int32) int32 {
	return a
}

func (n noneUInt) FoldInt32F(a func() int32, f func(v uint) int32) int32 {
	return a()
}

func (n noneUInt) MapInt64(f func(v uint) int64) OptionInt64 {
	return noneInt64{}
}

func (n noneUInt) FoldInt64(a int64, f func(v uint) int64) int64 {
	return a
}

func (n noneUInt) FoldInt64F(a func() int64, f func(v uint) int64) int64 {
	return a()
}

func (n noneUInt) MapInt8(f func(v uint) int8) OptionInt8 {
	return noneInt8{}
}

func (n noneUInt) FoldInt8(a int8, f func(v uint) int8) int8 {
	return a
}

func (n noneUInt) FoldInt8F(a func() int8, f func(v uint) int8) int8 {
	return a()
}

func (n noneUInt) MapRune(f func(v uint) rune) OptionRune {
	return noneRune{}
}

func (n noneUInt) FoldRune(a rune, f func(v uint) rune) rune {
	return a
}

func (n noneUInt) FoldRuneF(a func() rune, f func(v uint) rune) rune {
	return a()
}

func (n noneUInt) MapString(f func(v uint) string) OptionString {
	return noneString{}
}

func (n noneUInt) FoldString(a string, f func(v uint) string) string {
	return a
}

func (n noneUInt) FoldStringF(a func() string, f func(v uint) string) string {
	return a()
}

func (n noneUInt) MapUInt(f func(v uint) uint) OptionUInt {
	return noneUInt{}
}

func (n noneUInt) FoldUInt(a uint, f func(v uint) uint) uint {
	return a
}

func (n noneUInt) FoldUIntF(a func() uint, f func(v uint) uint) uint {
	return a()
}

func (n noneUInt) MapUInt16(f func(v uint) uint16) OptionUInt16 {
	return noneUInt16{}
}

func (n noneUInt) FoldUInt16(a uint16, f func(v uint) uint16) uint16 {
	return a
}

func (n noneUInt) FoldUInt16F(a func() uint16, f func(v uint) uint16) uint16 {
	return a()
}

func (n noneUInt) MapUInt32(f func(v uint) uint32) OptionUInt32 {
	return noneUInt32{}
}

func (n noneUInt) FoldUInt32(a uint32, f func(v uint) uint32) uint32 {
	return a
}

func (n noneUInt) FoldUInt32F(a func() uint32, f func(v uint) uint32) uint32 {
	return a()
}

func (n noneUInt) MapUInt64(f func(v uint) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneUInt) FoldUInt64(a uint64, f func(v uint) uint64) uint64 {
	return a
}

func (n noneUInt) FoldUInt64F(a func() uint64, f func(v uint) uint64) uint64 {
	return a()
}

func (n noneUInt) MapUInt8(f func(v uint) uint8) OptionUInt8 {
	return noneUInt8{}
}

func (n noneUInt) FoldUInt8(a uint8, f func(v uint) uint8) uint8 {
	return a
}

func (n noneUInt) FoldUInt8F(a func() uint8, f func(v uint) uint8) uint8 {
	return a()
}

func (n noneUInt) MapUintPtr(f func(v uint) uintptr) OptionUintPtr {
	return noneUintPtr{}
}

func (n noneUInt) FoldUintPtr(a uintptr, f func(v uint) uintptr) uintptr {
	return a
}

func (n noneUInt) FoldUintPtrF(a func() uintptr, f func(v uint) uintptr) uintptr {
	return a()
}



type someUInt struct {
	v uint
}

func SomeUInt(v uint) OptionUInt {
	return someUInt{v}
}

func (s someUInt) Map(f func(uint)) { f(s.v) }

func (s someUInt) FoldF(l func(), r func(uint)) { r(s.v) }


func (s someUInt) MapBool(f func(v uint) bool) OptionBool {
	return SomeBool(f(s.v))
}

func (s someUInt) FoldBool(a bool, f func(v uint) bool) bool {
	return f(s.v)
}

func (s someUInt) FoldBoolF(a func() bool, f func(v uint) bool) bool {
	return f(s.v)
}


func (s someUInt) MapByte(f func(v uint) byte) OptionByte {
	return SomeByte(f(s.v))
}

func (s someUInt) FoldByte(a byte, f func(v uint) byte) byte {
	return f(s.v)
}

func (s someUInt) FoldByteF(a func() byte, f func(v uint) byte) byte {
	return f(s.v)
}


func (s someUInt) MapComplex128(f func(v uint) complex128) OptionComplex128 {
	return SomeComplex128(f(s.v))
}

func (s someUInt) FoldComplex128(a complex128, f func(v uint) complex128) complex128 {
	return f(s.v)
}

func (s someUInt) FoldComplex128F(a func() complex128, f func(v uint) complex128) complex128 {
	return f(s.v)
}


func (s someUInt) MapComplex64(f func(v uint) complex64) OptionComplex64 {
	return SomeComplex64(f(s.v))
}

func (s someUInt) FoldComplex64(a complex64, f func(v uint) complex64) complex64 {
	return f(s.v)
}

func (s someUInt) FoldComplex64F(a func() complex64, f func(v uint) complex64) complex64 {
	return f(s.v)
}


func (s someUInt) MapFloat32(f func(v uint) float32) OptionFloat32 {
	return SomeFloat32(f(s.v))
}

func (s someUInt) FoldFloat32(a float32, f func(v uint) float32) float32 {
	return f(s.v)
}

func (s someUInt) FoldFloat32F(a func() float32, f func(v uint) float32) float32 {
	return f(s.v)
}


func (s someUInt) MapFloat64(f func(v uint) float64) OptionFloat64 {
	return SomeFloat64(f(s.v))
}

func (s someUInt) FoldFloat64(a float64, f func(v uint) float64) float64 {
	return f(s.v)
}

func (s someUInt) FoldFloat64F(a func() float64, f func(v uint) float64) float64 {
	return f(s.v)
}


func (s someUInt) MapInt(f func(v uint) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someUInt) FoldInt(a int, f func(v uint) int) int {
	return f(s.v)
}

func (s someUInt) FoldIntF(a func() int, f func(v uint) int) int {
	return f(s.v)
}


func (s someUInt) MapInt16(f func(v uint) int16) OptionInt16 {
	return SomeInt16(f(s.v))
}

func (s someUInt) FoldInt16(a int16, f func(v uint) int16) int16 {
	return f(s.v)
}

func (s someUInt) FoldInt16F(a func() int16, f func(v uint) int16) int16 {
	return f(s.v)
}


func (s someUInt) MapInt32(f func(v uint) int32) OptionInt32 {
	return SomeInt32(f(s.v))
}

func (s someUInt) FoldInt32(a int32, f func(v uint) int32) int32 {
	return f(s.v)
}

func (s someUInt) FoldInt32F(a func() int32, f func(v uint) int32) int32 {
	return f(s.v)
}


func (s someUInt) MapInt64(f func(v uint) int64) OptionInt64 {
	return SomeInt64(f(s.v))
}

func (s someUInt) FoldInt64(a int64, f func(v uint) int64) int64 {
	return f(s.v)
}

func (s someUInt) FoldInt64F(a func() int64, f func(v uint) int64) int64 {
	return f(s.v)
}


func (s someUInt) MapInt8(f func(v uint) int8) OptionInt8 {
	return SomeInt8(f(s.v))
}

func (s someUInt) FoldInt8(a int8, f func(v uint) int8) int8 {
	return f(s.v)
}

func (s someUInt) FoldInt8F(a func() int8, f func(v uint) int8) int8 {
	return f(s.v)
}


func (s someUInt) MapRune(f func(v uint) rune) OptionRune {
	return SomeRune(f(s.v))
}

func (s someUInt) FoldRune(a rune, f func(v uint) rune) rune {
	return f(s.v)
}

func (s someUInt) FoldRuneF(a func() rune, f func(v uint) rune) rune {
	return f(s.v)
}


func (s someUInt) MapString(f func(v uint) string) OptionString {
	return SomeString(f(s.v))
}

func (s someUInt) FoldString(a string, f func(v uint) string) string {
	return f(s.v)
}

func (s someUInt) FoldStringF(a func() string, f func(v uint) string) string {
	return f(s.v)
}


func (s someUInt) MapUInt(f func(v uint) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someUInt) FoldUInt(a uint, f func(v uint) uint) uint {
	return f(s.v)
}

func (s someUInt) FoldUIntF(a func() uint, f func(v uint) uint) uint {
	return f(s.v)
}


func (s someUInt) MapUInt16(f func(v uint) uint16) OptionUInt16 {
	return SomeUInt16(f(s.v))
}

func (s someUInt) FoldUInt16(a uint16, f func(v uint) uint16) uint16 {
	return f(s.v)
}

func (s someUInt) FoldUInt16F(a func() uint16, f func(v uint) uint16) uint16 {
	return f(s.v)
}


func (s someUInt) MapUInt32(f func(v uint) uint32) OptionUInt32 {
	return SomeUInt32(f(s.v))
}

func (s someUInt) FoldUInt32(a uint32, f func(v uint) uint32) uint32 {
	return f(s.v)
}

func (s someUInt) FoldUInt32F(a func() uint32, f func(v uint) uint32) uint32 {
	return f(s.v)
}


func (s someUInt) MapUInt64(f func(v uint) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someUInt) FoldUInt64(a uint64, f func(v uint) uint64) uint64 {
	return f(s.v)
}

func (s someUInt) FoldUInt64F(a func() uint64, f func(v uint) uint64) uint64 {
	return f(s.v)
}


func (s someUInt) MapUInt8(f func(v uint) uint8) OptionUInt8 {
	return SomeUInt8(f(s.v))
}

func (s someUInt) FoldUInt8(a uint8, f func(v uint) uint8) uint8 {
	return f(s.v)
}

func (s someUInt) FoldUInt8F(a func() uint8, f func(v uint) uint8) uint8 {
	return f(s.v)
}


func (s someUInt) MapUintPtr(f func(v uint) uintptr) OptionUintPtr {
	return SomeUintPtr(f(s.v))
}

func (s someUInt) FoldUintPtr(a uintptr, f func(v uint) uintptr) uintptr {
	return f(s.v)
}

func (s someUInt) FoldUintPtrF(a func() uintptr, f func(v uint) uintptr) uintptr {
	return f(s.v)
}




type noneUInt16 struct{}

func NoneUInt16() OptionUInt16 {
	return noneUInt16{}
}

func (n noneUInt16) Map(f func(uint16)) {}

func (n noneUInt16) FoldF(l func(), r func(uint16)) { l() }


func (n noneUInt16) MapBool(f func(v uint16) bool) OptionBool {
	return noneBool{}
}

func (n noneUInt16) FoldBool(a bool, f func(v uint16) bool) bool {
	return a
}

func (n noneUInt16) FoldBoolF(a func() bool, f func(v uint16) bool) bool {
	return a()
}

func (n noneUInt16) MapByte(f func(v uint16) byte) OptionByte {
	return noneByte{}
}

func (n noneUInt16) FoldByte(a byte, f func(v uint16) byte) byte {
	return a
}

func (n noneUInt16) FoldByteF(a func() byte, f func(v uint16) byte) byte {
	return a()
}

func (n noneUInt16) MapComplex128(f func(v uint16) complex128) OptionComplex128 {
	return noneComplex128{}
}

func (n noneUInt16) FoldComplex128(a complex128, f func(v uint16) complex128) complex128 {
	return a
}

func (n noneUInt16) FoldComplex128F(a func() complex128, f func(v uint16) complex128) complex128 {
	return a()
}

func (n noneUInt16) MapComplex64(f func(v uint16) complex64) OptionComplex64 {
	return noneComplex64{}
}

func (n noneUInt16) FoldComplex64(a complex64, f func(v uint16) complex64) complex64 {
	return a
}

func (n noneUInt16) FoldComplex64F(a func() complex64, f func(v uint16) complex64) complex64 {
	return a()
}

func (n noneUInt16) MapFloat32(f func(v uint16) float32) OptionFloat32 {
	return noneFloat32{}
}

func (n noneUInt16) FoldFloat32(a float32, f func(v uint16) float32) float32 {
	return a
}

func (n noneUInt16) FoldFloat32F(a func() float32, f func(v uint16) float32) float32 {
	return a()
}

func (n noneUInt16) MapFloat64(f func(v uint16) float64) OptionFloat64 {
	return noneFloat64{}
}

func (n noneUInt16) FoldFloat64(a float64, f func(v uint16) float64) float64 {
	return a
}

func (n noneUInt16) FoldFloat64F(a func() float64, f func(v uint16) float64) float64 {
	return a()
}

func (n noneUInt16) MapInt(f func(v uint16) int) OptionInt {
	return noneInt{}
}

func (n noneUInt16) FoldInt(a int, f func(v uint16) int) int {
	return a
}

func (n noneUInt16) FoldIntF(a func() int, f func(v uint16) int) int {
	return a()
}

func (n noneUInt16) MapInt16(f func(v uint16) int16) OptionInt16 {
	return noneInt16{}
}

func (n noneUInt16) FoldInt16(a int16, f func(v uint16) int16) int16 {
	return a
}

func (n noneUInt16) FoldInt16F(a func() int16, f func(v uint16) int16) int16 {
	return a()
}

func (n noneUInt16) MapInt32(f func(v uint16) int32) OptionInt32 {
	return noneInt32{}
}

func (n noneUInt16) FoldInt32(a int32, f func(v uint16) int32) int32 {
	return a
}

func (n noneUInt16) FoldInt32F(a func() int32, f func(v uint16) int32) int32 {
	return a()
}

func (n noneUInt16) MapInt64(f func(v uint16) int64) OptionInt64 {
	return noneInt64{}
}

func (n noneUInt16) FoldInt64(a int64, f func(v uint16) int64) int64 {
	return a
}

func (n noneUInt16) FoldInt64F(a func() int64, f func(v uint16) int64) int64 {
	return a()
}

func (n noneUInt16) MapInt8(f func(v uint16) int8) OptionInt8 {
	return noneInt8{}
}

func (n noneUInt16) FoldInt8(a int8, f func(v uint16) int8) int8 {
	return a
}

func (n noneUInt16) FoldInt8F(a func() int8, f func(v uint16) int8) int8 {
	return a()
}

func (n noneUInt16) MapRune(f func(v uint16) rune) OptionRune {
	return noneRune{}
}

func (n noneUInt16) FoldRune(a rune, f func(v uint16) rune) rune {
	return a
}

func (n noneUInt16) FoldRuneF(a func() rune, f func(v uint16) rune) rune {
	return a()
}

func (n noneUInt16) MapString(f func(v uint16) string) OptionString {
	return noneString{}
}

func (n noneUInt16) FoldString(a string, f func(v uint16) string) string {
	return a
}

func (n noneUInt16) FoldStringF(a func() string, f func(v uint16) string) string {
	return a()
}

func (n noneUInt16) MapUInt(f func(v uint16) uint) OptionUInt {
	return noneUInt{}
}

func (n noneUInt16) FoldUInt(a uint, f func(v uint16) uint) uint {
	return a
}

func (n noneUInt16) FoldUIntF(a func() uint, f func(v uint16) uint) uint {
	return a()
}

func (n noneUInt16) MapUInt16(f func(v uint16) uint16) OptionUInt16 {
	return noneUInt16{}
}

func (n noneUInt16) FoldUInt16(a uint16, f func(v uint16) uint16) uint16 {
	return a
}

func (n noneUInt16) FoldUInt16F(a func() uint16, f func(v uint16) uint16) uint16 {
	return a()
}

func (n noneUInt16) MapUInt32(f func(v uint16) uint32) OptionUInt32 {
	return noneUInt32{}
}

func (n noneUInt16) FoldUInt32(a uint32, f func(v uint16) uint32) uint32 {
	return a
}

func (n noneUInt16) FoldUInt32F(a func() uint32, f func(v uint16) uint32) uint32 {
	return a()
}

func (n noneUInt16) MapUInt64(f func(v uint16) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneUInt16) FoldUInt64(a uint64, f func(v uint16) uint64) uint64 {
	return a
}

func (n noneUInt16) FoldUInt64F(a func() uint64, f func(v uint16) uint64) uint64 {
	return a()
}

func (n noneUInt16) MapUInt8(f func(v uint16) uint8) OptionUInt8 {
	return noneUInt8{}
}

func (n noneUInt16) FoldUInt8(a uint8, f func(v uint16) uint8) uint8 {
	return a
}

func (n noneUInt16) FoldUInt8F(a func() uint8, f func(v uint16) uint8) uint8 {
	return a()
}

func (n noneUInt16) MapUintPtr(f func(v uint16) uintptr) OptionUintPtr {
	return noneUintPtr{}
}

func (n noneUInt16) FoldUintPtr(a uintptr, f func(v uint16) uintptr) uintptr {
	return a
}

func (n noneUInt16) FoldUintPtrF(a func() uintptr, f func(v uint16) uintptr) uintptr {
	return a()
}



type someUInt16 struct {
	v uint16
}

func SomeUInt16(v uint16) OptionUInt16 {
	return someUInt16{v}
}

func (s someUInt16) Map(f func(uint16)) { f(s.v) }

func (s someUInt16) FoldF(l func(), r func(uint16)) { r(s.v) }


func (s someUInt16) MapBool(f func(v uint16) bool) OptionBool {
	return SomeBool(f(s.v))
}

func (s someUInt16) FoldBool(a bool, f func(v uint16) bool) bool {
	return f(s.v)
}

func (s someUInt16) FoldBoolF(a func() bool, f func(v uint16) bool) bool {
	return f(s.v)
}


func (s someUInt16) MapByte(f func(v uint16) byte) OptionByte {
	return SomeByte(f(s.v))
}

func (s someUInt16) FoldByte(a byte, f func(v uint16) byte) byte {
	return f(s.v)
}

func (s someUInt16) FoldByteF(a func() byte, f func(v uint16) byte) byte {
	return f(s.v)
}


func (s someUInt16) MapComplex128(f func(v uint16) complex128) OptionComplex128 {
	return SomeComplex128(f(s.v))
}

func (s someUInt16) FoldComplex128(a complex128, f func(v uint16) complex128) complex128 {
	return f(s.v)
}

func (s someUInt16) FoldComplex128F(a func() complex128, f func(v uint16) complex128) complex128 {
	return f(s.v)
}


func (s someUInt16) MapComplex64(f func(v uint16) complex64) OptionComplex64 {
	return SomeComplex64(f(s.v))
}

func (s someUInt16) FoldComplex64(a complex64, f func(v uint16) complex64) complex64 {
	return f(s.v)
}

func (s someUInt16) FoldComplex64F(a func() complex64, f func(v uint16) complex64) complex64 {
	return f(s.v)
}


func (s someUInt16) MapFloat32(f func(v uint16) float32) OptionFloat32 {
	return SomeFloat32(f(s.v))
}

func (s someUInt16) FoldFloat32(a float32, f func(v uint16) float32) float32 {
	return f(s.v)
}

func (s someUInt16) FoldFloat32F(a func() float32, f func(v uint16) float32) float32 {
	return f(s.v)
}


func (s someUInt16) MapFloat64(f func(v uint16) float64) OptionFloat64 {
	return SomeFloat64(f(s.v))
}

func (s someUInt16) FoldFloat64(a float64, f func(v uint16) float64) float64 {
	return f(s.v)
}

func (s someUInt16) FoldFloat64F(a func() float64, f func(v uint16) float64) float64 {
	return f(s.v)
}


func (s someUInt16) MapInt(f func(v uint16) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someUInt16) FoldInt(a int, f func(v uint16) int) int {
	return f(s.v)
}

func (s someUInt16) FoldIntF(a func() int, f func(v uint16) int) int {
	return f(s.v)
}


func (s someUInt16) MapInt16(f func(v uint16) int16) OptionInt16 {
	return SomeInt16(f(s.v))
}

func (s someUInt16) FoldInt16(a int16, f func(v uint16) int16) int16 {
	return f(s.v)
}

func (s someUInt16) FoldInt16F(a func() int16, f func(v uint16) int16) int16 {
	return f(s.v)
}


func (s someUInt16) MapInt32(f func(v uint16) int32) OptionInt32 {
	return SomeInt32(f(s.v))
}

func (s someUInt16) FoldInt32(a int32, f func(v uint16) int32) int32 {
	return f(s.v)
}

func (s someUInt16) FoldInt32F(a func() int32, f func(v uint16) int32) int32 {
	return f(s.v)
}


func (s someUInt16) MapInt64(f func(v uint16) int64) OptionInt64 {
	return SomeInt64(f(s.v))
}

func (s someUInt16) FoldInt64(a int64, f func(v uint16) int64) int64 {
	return f(s.v)
}

func (s someUInt16) FoldInt64F(a func() int64, f func(v uint16) int64) int64 {
	return f(s.v)
}


func (s someUInt16) MapInt8(f func(v uint16) int8) OptionInt8 {
	return SomeInt8(f(s.v))
}

func (s someUInt16) FoldInt8(a int8, f func(v uint16) int8) int8 {
	return f(s.v)
}

func (s someUInt16) FoldInt8F(a func() int8, f func(v uint16) int8) int8 {
	return f(s.v)
}


func (s someUInt16) MapRune(f func(v uint16) rune) OptionRune {
	return SomeRune(f(s.v))
}

func (s someUInt16) FoldRune(a rune, f func(v uint16) rune) rune {
	return f(s.v)
}

func (s someUInt16) FoldRuneF(a func() rune, f func(v uint16) rune) rune {
	return f(s.v)
}


func (s someUInt16) MapString(f func(v uint16) string) OptionString {
	return SomeString(f(s.v))
}

func (s someUInt16) FoldString(a string, f func(v uint16) string) string {
	return f(s.v)
}

func (s someUInt16) FoldStringF(a func() string, f func(v uint16) string) string {
	return f(s.v)
}


func (s someUInt16) MapUInt(f func(v uint16) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someUInt16) FoldUInt(a uint, f func(v uint16) uint) uint {
	return f(s.v)
}

func (s someUInt16) FoldUIntF(a func() uint, f func(v uint16) uint) uint {
	return f(s.v)
}


func (s someUInt16) MapUInt16(f func(v uint16) uint16) OptionUInt16 {
	return SomeUInt16(f(s.v))
}

func (s someUInt16) FoldUInt16(a uint16, f func(v uint16) uint16) uint16 {
	return f(s.v)
}

func (s someUInt16) FoldUInt16F(a func() uint16, f func(v uint16) uint16) uint16 {
	return f(s.v)
}


func (s someUInt16) MapUInt32(f func(v uint16) uint32) OptionUInt32 {
	return SomeUInt32(f(s.v))
}

func (s someUInt16) FoldUInt32(a uint32, f func(v uint16) uint32) uint32 {
	return f(s.v)
}

func (s someUInt16) FoldUInt32F(a func() uint32, f func(v uint16) uint32) uint32 {
	return f(s.v)
}


func (s someUInt16) MapUInt64(f func(v uint16) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someUInt16) FoldUInt64(a uint64, f func(v uint16) uint64) uint64 {
	return f(s.v)
}

func (s someUInt16) FoldUInt64F(a func() uint64, f func(v uint16) uint64) uint64 {
	return f(s.v)
}


func (s someUInt16) MapUInt8(f func(v uint16) uint8) OptionUInt8 {
	return SomeUInt8(f(s.v))
}

func (s someUInt16) FoldUInt8(a uint8, f func(v uint16) uint8) uint8 {
	return f(s.v)
}

func (s someUInt16) FoldUInt8F(a func() uint8, f func(v uint16) uint8) uint8 {
	return f(s.v)
}


func (s someUInt16) MapUintPtr(f func(v uint16) uintptr) OptionUintPtr {
	return SomeUintPtr(f(s.v))
}

func (s someUInt16) FoldUintPtr(a uintptr, f func(v uint16) uintptr) uintptr {
	return f(s.v)
}

func (s someUInt16) FoldUintPtrF(a func() uintptr, f func(v uint16) uintptr) uintptr {
	return f(s.v)
}




type noneUInt32 struct{}

func NoneUInt32() OptionUInt32 {
	return noneUInt32{}
}

func (n noneUInt32) Map(f func(uint32)) {}

func (n noneUInt32) FoldF(l func(), r func(uint32)) { l() }


func (n noneUInt32) MapBool(f func(v uint32) bool) OptionBool {
	return noneBool{}
}

func (n noneUInt32) FoldBool(a bool, f func(v uint32) bool) bool {
	return a
}

func (n noneUInt32) FoldBoolF(a func() bool, f func(v uint32) bool) bool {
	return a()
}

func (n noneUInt32) MapByte(f func(v uint32) byte) OptionByte {
	return noneByte{}
}

func (n noneUInt32) FoldByte(a byte, f func(v uint32) byte) byte {
	return a
}

func (n noneUInt32) FoldByteF(a func() byte, f func(v uint32) byte) byte {
	return a()
}

func (n noneUInt32) MapComplex128(f func(v uint32) complex128) OptionComplex128 {
	return noneComplex128{}
}

func (n noneUInt32) FoldComplex128(a complex128, f func(v uint32) complex128) complex128 {
	return a
}

func (n noneUInt32) FoldComplex128F(a func() complex128, f func(v uint32) complex128) complex128 {
	return a()
}

func (n noneUInt32) MapComplex64(f func(v uint32) complex64) OptionComplex64 {
	return noneComplex64{}
}

func (n noneUInt32) FoldComplex64(a complex64, f func(v uint32) complex64) complex64 {
	return a
}

func (n noneUInt32) FoldComplex64F(a func() complex64, f func(v uint32) complex64) complex64 {
	return a()
}

func (n noneUInt32) MapFloat32(f func(v uint32) float32) OptionFloat32 {
	return noneFloat32{}
}

func (n noneUInt32) FoldFloat32(a float32, f func(v uint32) float32) float32 {
	return a
}

func (n noneUInt32) FoldFloat32F(a func() float32, f func(v uint32) float32) float32 {
	return a()
}

func (n noneUInt32) MapFloat64(f func(v uint32) float64) OptionFloat64 {
	return noneFloat64{}
}

func (n noneUInt32) FoldFloat64(a float64, f func(v uint32) float64) float64 {
	return a
}

func (n noneUInt32) FoldFloat64F(a func() float64, f func(v uint32) float64) float64 {
	return a()
}

func (n noneUInt32) MapInt(f func(v uint32) int) OptionInt {
	return noneInt{}
}

func (n noneUInt32) FoldInt(a int, f func(v uint32) int) int {
	return a
}

func (n noneUInt32) FoldIntF(a func() int, f func(v uint32) int) int {
	return a()
}

func (n noneUInt32) MapInt16(f func(v uint32) int16) OptionInt16 {
	return noneInt16{}
}

func (n noneUInt32) FoldInt16(a int16, f func(v uint32) int16) int16 {
	return a
}

func (n noneUInt32) FoldInt16F(a func() int16, f func(v uint32) int16) int16 {
	return a()
}

func (n noneUInt32) MapInt32(f func(v uint32) int32) OptionInt32 {
	return noneInt32{}
}

func (n noneUInt32) FoldInt32(a int32, f func(v uint32) int32) int32 {
	return a
}

func (n noneUInt32) FoldInt32F(a func() int32, f func(v uint32) int32) int32 {
	return a()
}

func (n noneUInt32) MapInt64(f func(v uint32) int64) OptionInt64 {
	return noneInt64{}
}

func (n noneUInt32) FoldInt64(a int64, f func(v uint32) int64) int64 {
	return a
}

func (n noneUInt32) FoldInt64F(a func() int64, f func(v uint32) int64) int64 {
	return a()
}

func (n noneUInt32) MapInt8(f func(v uint32) int8) OptionInt8 {
	return noneInt8{}
}

func (n noneUInt32) FoldInt8(a int8, f func(v uint32) int8) int8 {
	return a
}

func (n noneUInt32) FoldInt8F(a func() int8, f func(v uint32) int8) int8 {
	return a()
}

func (n noneUInt32) MapRune(f func(v uint32) rune) OptionRune {
	return noneRune{}
}

func (n noneUInt32) FoldRune(a rune, f func(v uint32) rune) rune {
	return a
}

func (n noneUInt32) FoldRuneF(a func() rune, f func(v uint32) rune) rune {
	return a()
}

func (n noneUInt32) MapString(f func(v uint32) string) OptionString {
	return noneString{}
}

func (n noneUInt32) FoldString(a string, f func(v uint32) string) string {
	return a
}

func (n noneUInt32) FoldStringF(a func() string, f func(v uint32) string) string {
	return a()
}

func (n noneUInt32) MapUInt(f func(v uint32) uint) OptionUInt {
	return noneUInt{}
}

func (n noneUInt32) FoldUInt(a uint, f func(v uint32) uint) uint {
	return a
}

func (n noneUInt32) FoldUIntF(a func() uint, f func(v uint32) uint) uint {
	return a()
}

func (n noneUInt32) MapUInt16(f func(v uint32) uint16) OptionUInt16 {
	return noneUInt16{}
}

func (n noneUInt32) FoldUInt16(a uint16, f func(v uint32) uint16) uint16 {
	return a
}

func (n noneUInt32) FoldUInt16F(a func() uint16, f func(v uint32) uint16) uint16 {
	return a()
}

func (n noneUInt32) MapUInt32(f func(v uint32) uint32) OptionUInt32 {
	return noneUInt32{}
}

func (n noneUInt32) FoldUInt32(a uint32, f func(v uint32) uint32) uint32 {
	return a
}

func (n noneUInt32) FoldUInt32F(a func() uint32, f func(v uint32) uint32) uint32 {
	return a()
}

func (n noneUInt32) MapUInt64(f func(v uint32) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneUInt32) FoldUInt64(a uint64, f func(v uint32) uint64) uint64 {
	return a
}

func (n noneUInt32) FoldUInt64F(a func() uint64, f func(v uint32) uint64) uint64 {
	return a()
}

func (n noneUInt32) MapUInt8(f func(v uint32) uint8) OptionUInt8 {
	return noneUInt8{}
}

func (n noneUInt32) FoldUInt8(a uint8, f func(v uint32) uint8) uint8 {
	return a
}

func (n noneUInt32) FoldUInt8F(a func() uint8, f func(v uint32) uint8) uint8 {
	return a()
}

func (n noneUInt32) MapUintPtr(f func(v uint32) uintptr) OptionUintPtr {
	return noneUintPtr{}
}

func (n noneUInt32) FoldUintPtr(a uintptr, f func(v uint32) uintptr) uintptr {
	return a
}

func (n noneUInt32) FoldUintPtrF(a func() uintptr, f func(v uint32) uintptr) uintptr {
	return a()
}



type someUInt32 struct {
	v uint32
}

func SomeUInt32(v uint32) OptionUInt32 {
	return someUInt32{v}
}

func (s someUInt32) Map(f func(uint32)) { f(s.v) }

func (s someUInt32) FoldF(l func(), r func(uint32)) { r(s.v) }


func (s someUInt32) MapBool(f func(v uint32) bool) OptionBool {
	return SomeBool(f(s.v))
}

func (s someUInt32) FoldBool(a bool, f func(v uint32) bool) bool {
	return f(s.v)
}

func (s someUInt32) FoldBoolF(a func() bool, f func(v uint32) bool) bool {
	return f(s.v)
}


func (s someUInt32) MapByte(f func(v uint32) byte) OptionByte {
	return SomeByte(f(s.v))
}

func (s someUInt32) FoldByte(a byte, f func(v uint32) byte) byte {
	return f(s.v)
}

func (s someUInt32) FoldByteF(a func() byte, f func(v uint32) byte) byte {
	return f(s.v)
}


func (s someUInt32) MapComplex128(f func(v uint32) complex128) OptionComplex128 {
	return SomeComplex128(f(s.v))
}

func (s someUInt32) FoldComplex128(a complex128, f func(v uint32) complex128) complex128 {
	return f(s.v)
}

func (s someUInt32) FoldComplex128F(a func() complex128, f func(v uint32) complex128) complex128 {
	return f(s.v)
}


func (s someUInt32) MapComplex64(f func(v uint32) complex64) OptionComplex64 {
	return SomeComplex64(f(s.v))
}

func (s someUInt32) FoldComplex64(a complex64, f func(v uint32) complex64) complex64 {
	return f(s.v)
}

func (s someUInt32) FoldComplex64F(a func() complex64, f func(v uint32) complex64) complex64 {
	return f(s.v)
}


func (s someUInt32) MapFloat32(f func(v uint32) float32) OptionFloat32 {
	return SomeFloat32(f(s.v))
}

func (s someUInt32) FoldFloat32(a float32, f func(v uint32) float32) float32 {
	return f(s.v)
}

func (s someUInt32) FoldFloat32F(a func() float32, f func(v uint32) float32) float32 {
	return f(s.v)
}


func (s someUInt32) MapFloat64(f func(v uint32) float64) OptionFloat64 {
	return SomeFloat64(f(s.v))
}

func (s someUInt32) FoldFloat64(a float64, f func(v uint32) float64) float64 {
	return f(s.v)
}

func (s someUInt32) FoldFloat64F(a func() float64, f func(v uint32) float64) float64 {
	return f(s.v)
}


func (s someUInt32) MapInt(f func(v uint32) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someUInt32) FoldInt(a int, f func(v uint32) int) int {
	return f(s.v)
}

func (s someUInt32) FoldIntF(a func() int, f func(v uint32) int) int {
	return f(s.v)
}


func (s someUInt32) MapInt16(f func(v uint32) int16) OptionInt16 {
	return SomeInt16(f(s.v))
}

func (s someUInt32) FoldInt16(a int16, f func(v uint32) int16) int16 {
	return f(s.v)
}

func (s someUInt32) FoldInt16F(a func() int16, f func(v uint32) int16) int16 {
	return f(s.v)
}


func (s someUInt32) MapInt32(f func(v uint32) int32) OptionInt32 {
	return SomeInt32(f(s.v))
}

func (s someUInt32) FoldInt32(a int32, f func(v uint32) int32) int32 {
	return f(s.v)
}

func (s someUInt32) FoldInt32F(a func() int32, f func(v uint32) int32) int32 {
	return f(s.v)
}


func (s someUInt32) MapInt64(f func(v uint32) int64) OptionInt64 {
	return SomeInt64(f(s.v))
}

func (s someUInt32) FoldInt64(a int64, f func(v uint32) int64) int64 {
	return f(s.v)
}

func (s someUInt32) FoldInt64F(a func() int64, f func(v uint32) int64) int64 {
	return f(s.v)
}


func (s someUInt32) MapInt8(f func(v uint32) int8) OptionInt8 {
	return SomeInt8(f(s.v))
}

func (s someUInt32) FoldInt8(a int8, f func(v uint32) int8) int8 {
	return f(s.v)
}

func (s someUInt32) FoldInt8F(a func() int8, f func(v uint32) int8) int8 {
	return f(s.v)
}


func (s someUInt32) MapRune(f func(v uint32) rune) OptionRune {
	return SomeRune(f(s.v))
}

func (s someUInt32) FoldRune(a rune, f func(v uint32) rune) rune {
	return f(s.v)
}

func (s someUInt32) FoldRuneF(a func() rune, f func(v uint32) rune) rune {
	return f(s.v)
}


func (s someUInt32) MapString(f func(v uint32) string) OptionString {
	return SomeString(f(s.v))
}

func (s someUInt32) FoldString(a string, f func(v uint32) string) string {
	return f(s.v)
}

func (s someUInt32) FoldStringF(a func() string, f func(v uint32) string) string {
	return f(s.v)
}


func (s someUInt32) MapUInt(f func(v uint32) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someUInt32) FoldUInt(a uint, f func(v uint32) uint) uint {
	return f(s.v)
}

func (s someUInt32) FoldUIntF(a func() uint, f func(v uint32) uint) uint {
	return f(s.v)
}


func (s someUInt32) MapUInt16(f func(v uint32) uint16) OptionUInt16 {
	return SomeUInt16(f(s.v))
}

func (s someUInt32) FoldUInt16(a uint16, f func(v uint32) uint16) uint16 {
	return f(s.v)
}

func (s someUInt32) FoldUInt16F(a func() uint16, f func(v uint32) uint16) uint16 {
	return f(s.v)
}


func (s someUInt32) MapUInt32(f func(v uint32) uint32) OptionUInt32 {
	return SomeUInt32(f(s.v))
}

func (s someUInt32) FoldUInt32(a uint32, f func(v uint32) uint32) uint32 {
	return f(s.v)
}

func (s someUInt32) FoldUInt32F(a func() uint32, f func(v uint32) uint32) uint32 {
	return f(s.v)
}


func (s someUInt32) MapUInt64(f func(v uint32) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someUInt32) FoldUInt64(a uint64, f func(v uint32) uint64) uint64 {
	return f(s.v)
}

func (s someUInt32) FoldUInt64F(a func() uint64, f func(v uint32) uint64) uint64 {
	return f(s.v)
}


func (s someUInt32) MapUInt8(f func(v uint32) uint8) OptionUInt8 {
	return SomeUInt8(f(s.v))
}

func (s someUInt32) FoldUInt8(a uint8, f func(v uint32) uint8) uint8 {
	return f(s.v)
}

func (s someUInt32) FoldUInt8F(a func() uint8, f func(v uint32) uint8) uint8 {
	return f(s.v)
}


func (s someUInt32) MapUintPtr(f func(v uint32) uintptr) OptionUintPtr {
	return SomeUintPtr(f(s.v))
}

func (s someUInt32) FoldUintPtr(a uintptr, f func(v uint32) uintptr) uintptr {
	return f(s.v)
}

func (s someUInt32) FoldUintPtrF(a func() uintptr, f func(v uint32) uintptr) uintptr {
	return f(s.v)
}




type noneUInt64 struct{}

func NoneUInt64() OptionUInt64 {
	return noneUInt64{}
}

func (n noneUInt64) Map(f func(uint64)) {}

func (n noneUInt64) FoldF(l func(), r func(uint64)) { l() }


func (n noneUInt64) MapBool(f func(v uint64) bool) OptionBool {
	return noneBool{}
}

func (n noneUInt64) FoldBool(a bool, f func(v uint64) bool) bool {
	return a
}

func (n noneUInt64) FoldBoolF(a func() bool, f func(v uint64) bool) bool {
	return a()
}

func (n noneUInt64) MapByte(f func(v uint64) byte) OptionByte {
	return noneByte{}
}

func (n noneUInt64) FoldByte(a byte, f func(v uint64) byte) byte {
	return a
}

func (n noneUInt64) FoldByteF(a func() byte, f func(v uint64) byte) byte {
	return a()
}

func (n noneUInt64) MapComplex128(f func(v uint64) complex128) OptionComplex128 {
	return noneComplex128{}
}

func (n noneUInt64) FoldComplex128(a complex128, f func(v uint64) complex128) complex128 {
	return a
}

func (n noneUInt64) FoldComplex128F(a func() complex128, f func(v uint64) complex128) complex128 {
	return a()
}

func (n noneUInt64) MapComplex64(f func(v uint64) complex64) OptionComplex64 {
	return noneComplex64{}
}

func (n noneUInt64) FoldComplex64(a complex64, f func(v uint64) complex64) complex64 {
	return a
}

func (n noneUInt64) FoldComplex64F(a func() complex64, f func(v uint64) complex64) complex64 {
	return a()
}

func (n noneUInt64) MapFloat32(f func(v uint64) float32) OptionFloat32 {
	return noneFloat32{}
}

func (n noneUInt64) FoldFloat32(a float32, f func(v uint64) float32) float32 {
	return a
}

func (n noneUInt64) FoldFloat32F(a func() float32, f func(v uint64) float32) float32 {
	return a()
}

func (n noneUInt64) MapFloat64(f func(v uint64) float64) OptionFloat64 {
	return noneFloat64{}
}

func (n noneUInt64) FoldFloat64(a float64, f func(v uint64) float64) float64 {
	return a
}

func (n noneUInt64) FoldFloat64F(a func() float64, f func(v uint64) float64) float64 {
	return a()
}

func (n noneUInt64) MapInt(f func(v uint64) int) OptionInt {
	return noneInt{}
}

func (n noneUInt64) FoldInt(a int, f func(v uint64) int) int {
	return a
}

func (n noneUInt64) FoldIntF(a func() int, f func(v uint64) int) int {
	return a()
}

func (n noneUInt64) MapInt16(f func(v uint64) int16) OptionInt16 {
	return noneInt16{}
}

func (n noneUInt64) FoldInt16(a int16, f func(v uint64) int16) int16 {
	return a
}

func (n noneUInt64) FoldInt16F(a func() int16, f func(v uint64) int16) int16 {
	return a()
}

func (n noneUInt64) MapInt32(f func(v uint64) int32) OptionInt32 {
	return noneInt32{}
}

func (n noneUInt64) FoldInt32(a int32, f func(v uint64) int32) int32 {
	return a
}

func (n noneUInt64) FoldInt32F(a func() int32, f func(v uint64) int32) int32 {
	return a()
}

func (n noneUInt64) MapInt64(f func(v uint64) int64) OptionInt64 {
	return noneInt64{}
}

func (n noneUInt64) FoldInt64(a int64, f func(v uint64) int64) int64 {
	return a
}

func (n noneUInt64) FoldInt64F(a func() int64, f func(v uint64) int64) int64 {
	return a()
}

func (n noneUInt64) MapInt8(f func(v uint64) int8) OptionInt8 {
	return noneInt8{}
}

func (n noneUInt64) FoldInt8(a int8, f func(v uint64) int8) int8 {
	return a
}

func (n noneUInt64) FoldInt8F(a func() int8, f func(v uint64) int8) int8 {
	return a()
}

func (n noneUInt64) MapRune(f func(v uint64) rune) OptionRune {
	return noneRune{}
}

func (n noneUInt64) FoldRune(a rune, f func(v uint64) rune) rune {
	return a
}

func (n noneUInt64) FoldRuneF(a func() rune, f func(v uint64) rune) rune {
	return a()
}

func (n noneUInt64) MapString(f func(v uint64) string) OptionString {
	return noneString{}
}

func (n noneUInt64) FoldString(a string, f func(v uint64) string) string {
	return a
}

func (n noneUInt64) FoldStringF(a func() string, f func(v uint64) string) string {
	return a()
}

func (n noneUInt64) MapUInt(f func(v uint64) uint) OptionUInt {
	return noneUInt{}
}

func (n noneUInt64) FoldUInt(a uint, f func(v uint64) uint) uint {
	return a
}

func (n noneUInt64) FoldUIntF(a func() uint, f func(v uint64) uint) uint {
	return a()
}

func (n noneUInt64) MapUInt16(f func(v uint64) uint16) OptionUInt16 {
	return noneUInt16{}
}

func (n noneUInt64) FoldUInt16(a uint16, f func(v uint64) uint16) uint16 {
	return a
}

func (n noneUInt64) FoldUInt16F(a func() uint16, f func(v uint64) uint16) uint16 {
	return a()
}

func (n noneUInt64) MapUInt32(f func(v uint64) uint32) OptionUInt32 {
	return noneUInt32{}
}

func (n noneUInt64) FoldUInt32(a uint32, f func(v uint64) uint32) uint32 {
	return a
}

func (n noneUInt64) FoldUInt32F(a func() uint32, f func(v uint64) uint32) uint32 {
	return a()
}

func (n noneUInt64) MapUInt64(f func(v uint64) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneUInt64) FoldUInt64(a uint64, f func(v uint64) uint64) uint64 {
	return a
}

func (n noneUInt64) FoldUInt64F(a func() uint64, f func(v uint64) uint64) uint64 {
	return a()
}

func (n noneUInt64) MapUInt8(f func(v uint64) uint8) OptionUInt8 {
	return noneUInt8{}
}

func (n noneUInt64) FoldUInt8(a uint8, f func(v uint64) uint8) uint8 {
	return a
}

func (n noneUInt64) FoldUInt8F(a func() uint8, f func(v uint64) uint8) uint8 {
	return a()
}

func (n noneUInt64) MapUintPtr(f func(v uint64) uintptr) OptionUintPtr {
	return noneUintPtr{}
}

func (n noneUInt64) FoldUintPtr(a uintptr, f func(v uint64) uintptr) uintptr {
	return a
}

func (n noneUInt64) FoldUintPtrF(a func() uintptr, f func(v uint64) uintptr) uintptr {
	return a()
}



type someUInt64 struct {
	v uint64
}

func SomeUInt64(v uint64) OptionUInt64 {
	return someUInt64{v}
}

func (s someUInt64) Map(f func(uint64)) { f(s.v) }

func (s someUInt64) FoldF(l func(), r func(uint64)) { r(s.v) }


func (s someUInt64) MapBool(f func(v uint64) bool) OptionBool {
	return SomeBool(f(s.v))
}

func (s someUInt64) FoldBool(a bool, f func(v uint64) bool) bool {
	return f(s.v)
}

func (s someUInt64) FoldBoolF(a func() bool, f func(v uint64) bool) bool {
	return f(s.v)
}


func (s someUInt64) MapByte(f func(v uint64) byte) OptionByte {
	return SomeByte(f(s.v))
}

func (s someUInt64) FoldByte(a byte, f func(v uint64) byte) byte {
	return f(s.v)
}

func (s someUInt64) FoldByteF(a func() byte, f func(v uint64) byte) byte {
	return f(s.v)
}


func (s someUInt64) MapComplex128(f func(v uint64) complex128) OptionComplex128 {
	return SomeComplex128(f(s.v))
}

func (s someUInt64) FoldComplex128(a complex128, f func(v uint64) complex128) complex128 {
	return f(s.v)
}

func (s someUInt64) FoldComplex128F(a func() complex128, f func(v uint64) complex128) complex128 {
	return f(s.v)
}


func (s someUInt64) MapComplex64(f func(v uint64) complex64) OptionComplex64 {
	return SomeComplex64(f(s.v))
}

func (s someUInt64) FoldComplex64(a complex64, f func(v uint64) complex64) complex64 {
	return f(s.v)
}

func (s someUInt64) FoldComplex64F(a func() complex64, f func(v uint64) complex64) complex64 {
	return f(s.v)
}


func (s someUInt64) MapFloat32(f func(v uint64) float32) OptionFloat32 {
	return SomeFloat32(f(s.v))
}

func (s someUInt64) FoldFloat32(a float32, f func(v uint64) float32) float32 {
	return f(s.v)
}

func (s someUInt64) FoldFloat32F(a func() float32, f func(v uint64) float32) float32 {
	return f(s.v)
}


func (s someUInt64) MapFloat64(f func(v uint64) float64) OptionFloat64 {
	return SomeFloat64(f(s.v))
}

func (s someUInt64) FoldFloat64(a float64, f func(v uint64) float64) float64 {
	return f(s.v)
}

func (s someUInt64) FoldFloat64F(a func() float64, f func(v uint64) float64) float64 {
	return f(s.v)
}


func (s someUInt64) MapInt(f func(v uint64) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someUInt64) FoldInt(a int, f func(v uint64) int) int {
	return f(s.v)
}

func (s someUInt64) FoldIntF(a func() int, f func(v uint64) int) int {
	return f(s.v)
}


func (s someUInt64) MapInt16(f func(v uint64) int16) OptionInt16 {
	return SomeInt16(f(s.v))
}

func (s someUInt64) FoldInt16(a int16, f func(v uint64) int16) int16 {
	return f(s.v)
}

func (s someUInt64) FoldInt16F(a func() int16, f func(v uint64) int16) int16 {
	return f(s.v)
}


func (s someUInt64) MapInt32(f func(v uint64) int32) OptionInt32 {
	return SomeInt32(f(s.v))
}

func (s someUInt64) FoldInt32(a int32, f func(v uint64) int32) int32 {
	return f(s.v)
}

func (s someUInt64) FoldInt32F(a func() int32, f func(v uint64) int32) int32 {
	return f(s.v)
}


func (s someUInt64) MapInt64(f func(v uint64) int64) OptionInt64 {
	return SomeInt64(f(s.v))
}

func (s someUInt64) FoldInt64(a int64, f func(v uint64) int64) int64 {
	return f(s.v)
}

func (s someUInt64) FoldInt64F(a func() int64, f func(v uint64) int64) int64 {
	return f(s.v)
}


func (s someUInt64) MapInt8(f func(v uint64) int8) OptionInt8 {
	return SomeInt8(f(s.v))
}

func (s someUInt64) FoldInt8(a int8, f func(v uint64) int8) int8 {
	return f(s.v)
}

func (s someUInt64) FoldInt8F(a func() int8, f func(v uint64) int8) int8 {
	return f(s.v)
}


func (s someUInt64) MapRune(f func(v uint64) rune) OptionRune {
	return SomeRune(f(s.v))
}

func (s someUInt64) FoldRune(a rune, f func(v uint64) rune) rune {
	return f(s.v)
}

func (s someUInt64) FoldRuneF(a func() rune, f func(v uint64) rune) rune {
	return f(s.v)
}


func (s someUInt64) MapString(f func(v uint64) string) OptionString {
	return SomeString(f(s.v))
}

func (s someUInt64) FoldString(a string, f func(v uint64) string) string {
	return f(s.v)
}

func (s someUInt64) FoldStringF(a func() string, f func(v uint64) string) string {
	return f(s.v)
}


func (s someUInt64) MapUInt(f func(v uint64) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someUInt64) FoldUInt(a uint, f func(v uint64) uint) uint {
	return f(s.v)
}

func (s someUInt64) FoldUIntF(a func() uint, f func(v uint64) uint) uint {
	return f(s.v)
}


func (s someUInt64) MapUInt16(f func(v uint64) uint16) OptionUInt16 {
	return SomeUInt16(f(s.v))
}

func (s someUInt64) FoldUInt16(a uint16, f func(v uint64) uint16) uint16 {
	return f(s.v)
}

func (s someUInt64) FoldUInt16F(a func() uint16, f func(v uint64) uint16) uint16 {
	return f(s.v)
}


func (s someUInt64) MapUInt32(f func(v uint64) uint32) OptionUInt32 {
	return SomeUInt32(f(s.v))
}

func (s someUInt64) FoldUInt32(a uint32, f func(v uint64) uint32) uint32 {
	return f(s.v)
}

func (s someUInt64) FoldUInt32F(a func() uint32, f func(v uint64) uint32) uint32 {
	return f(s.v)
}


func (s someUInt64) MapUInt64(f func(v uint64) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someUInt64) FoldUInt64(a uint64, f func(v uint64) uint64) uint64 {
	return f(s.v)
}

func (s someUInt64) FoldUInt64F(a func() uint64, f func(v uint64) uint64) uint64 {
	return f(s.v)
}


func (s someUInt64) MapUInt8(f func(v uint64) uint8) OptionUInt8 {
	return SomeUInt8(f(s.v))
}

func (s someUInt64) FoldUInt8(a uint8, f func(v uint64) uint8) uint8 {
	return f(s.v)
}

func (s someUInt64) FoldUInt8F(a func() uint8, f func(v uint64) uint8) uint8 {
	return f(s.v)
}


func (s someUInt64) MapUintPtr(f func(v uint64) uintptr) OptionUintPtr {
	return SomeUintPtr(f(s.v))
}

func (s someUInt64) FoldUintPtr(a uintptr, f func(v uint64) uintptr) uintptr {
	return f(s.v)
}

func (s someUInt64) FoldUintPtrF(a func() uintptr, f func(v uint64) uintptr) uintptr {
	return f(s.v)
}




type noneUInt8 struct{}

func NoneUInt8() OptionUInt8 {
	return noneUInt8{}
}

func (n noneUInt8) Map(f func(uint8)) {}

func (n noneUInt8) FoldF(l func(), r func(uint8)) { l() }


func (n noneUInt8) MapBool(f func(v uint8) bool) OptionBool {
	return noneBool{}
}

func (n noneUInt8) FoldBool(a bool, f func(v uint8) bool) bool {
	return a
}

func (n noneUInt8) FoldBoolF(a func() bool, f func(v uint8) bool) bool {
	return a()
}

func (n noneUInt8) MapByte(f func(v uint8) byte) OptionByte {
	return noneByte{}
}

func (n noneUInt8) FoldByte(a byte, f func(v uint8) byte) byte {
	return a
}

func (n noneUInt8) FoldByteF(a func() byte, f func(v uint8) byte) byte {
	return a()
}

func (n noneUInt8) MapComplex128(f func(v uint8) complex128) OptionComplex128 {
	return noneComplex128{}
}

func (n noneUInt8) FoldComplex128(a complex128, f func(v uint8) complex128) complex128 {
	return a
}

func (n noneUInt8) FoldComplex128F(a func() complex128, f func(v uint8) complex128) complex128 {
	return a()
}

func (n noneUInt8) MapComplex64(f func(v uint8) complex64) OptionComplex64 {
	return noneComplex64{}
}

func (n noneUInt8) FoldComplex64(a complex64, f func(v uint8) complex64) complex64 {
	return a
}

func (n noneUInt8) FoldComplex64F(a func() complex64, f func(v uint8) complex64) complex64 {
	return a()
}

func (n noneUInt8) MapFloat32(f func(v uint8) float32) OptionFloat32 {
	return noneFloat32{}
}

func (n noneUInt8) FoldFloat32(a float32, f func(v uint8) float32) float32 {
	return a
}

func (n noneUInt8) FoldFloat32F(a func() float32, f func(v uint8) float32) float32 {
	return a()
}

func (n noneUInt8) MapFloat64(f func(v uint8) float64) OptionFloat64 {
	return noneFloat64{}
}

func (n noneUInt8) FoldFloat64(a float64, f func(v uint8) float64) float64 {
	return a
}

func (n noneUInt8) FoldFloat64F(a func() float64, f func(v uint8) float64) float64 {
	return a()
}

func (n noneUInt8) MapInt(f func(v uint8) int) OptionInt {
	return noneInt{}
}

func (n noneUInt8) FoldInt(a int, f func(v uint8) int) int {
	return a
}

func (n noneUInt8) FoldIntF(a func() int, f func(v uint8) int) int {
	return a()
}

func (n noneUInt8) MapInt16(f func(v uint8) int16) OptionInt16 {
	return noneInt16{}
}

func (n noneUInt8) FoldInt16(a int16, f func(v uint8) int16) int16 {
	return a
}

func (n noneUInt8) FoldInt16F(a func() int16, f func(v uint8) int16) int16 {
	return a()
}

func (n noneUInt8) MapInt32(f func(v uint8) int32) OptionInt32 {
	return noneInt32{}
}

func (n noneUInt8) FoldInt32(a int32, f func(v uint8) int32) int32 {
	return a
}

func (n noneUInt8) FoldInt32F(a func() int32, f func(v uint8) int32) int32 {
	return a()
}

func (n noneUInt8) MapInt64(f func(v uint8) int64) OptionInt64 {
	return noneInt64{}
}

func (n noneUInt8) FoldInt64(a int64, f func(v uint8) int64) int64 {
	return a
}

func (n noneUInt8) FoldInt64F(a func() int64, f func(v uint8) int64) int64 {
	return a()
}

func (n noneUInt8) MapInt8(f func(v uint8) int8) OptionInt8 {
	return noneInt8{}
}

func (n noneUInt8) FoldInt8(a int8, f func(v uint8) int8) int8 {
	return a
}

func (n noneUInt8) FoldInt8F(a func() int8, f func(v uint8) int8) int8 {
	return a()
}

func (n noneUInt8) MapRune(f func(v uint8) rune) OptionRune {
	return noneRune{}
}

func (n noneUInt8) FoldRune(a rune, f func(v uint8) rune) rune {
	return a
}

func (n noneUInt8) FoldRuneF(a func() rune, f func(v uint8) rune) rune {
	return a()
}

func (n noneUInt8) MapString(f func(v uint8) string) OptionString {
	return noneString{}
}

func (n noneUInt8) FoldString(a string, f func(v uint8) string) string {
	return a
}

func (n noneUInt8) FoldStringF(a func() string, f func(v uint8) string) string {
	return a()
}

func (n noneUInt8) MapUInt(f func(v uint8) uint) OptionUInt {
	return noneUInt{}
}

func (n noneUInt8) FoldUInt(a uint, f func(v uint8) uint) uint {
	return a
}

func (n noneUInt8) FoldUIntF(a func() uint, f func(v uint8) uint) uint {
	return a()
}

func (n noneUInt8) MapUInt16(f func(v uint8) uint16) OptionUInt16 {
	return noneUInt16{}
}

func (n noneUInt8) FoldUInt16(a uint16, f func(v uint8) uint16) uint16 {
	return a
}

func (n noneUInt8) FoldUInt16F(a func() uint16, f func(v uint8) uint16) uint16 {
	return a()
}

func (n noneUInt8) MapUInt32(f func(v uint8) uint32) OptionUInt32 {
	return noneUInt32{}
}

func (n noneUInt8) FoldUInt32(a uint32, f func(v uint8) uint32) uint32 {
	return a
}

func (n noneUInt8) FoldUInt32F(a func() uint32, f func(v uint8) uint32) uint32 {
	return a()
}

func (n noneUInt8) MapUInt64(f func(v uint8) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneUInt8) FoldUInt64(a uint64, f func(v uint8) uint64) uint64 {
	return a
}

func (n noneUInt8) FoldUInt64F(a func() uint64, f func(v uint8) uint64) uint64 {
	return a()
}

func (n noneUInt8) MapUInt8(f func(v uint8) uint8) OptionUInt8 {
	return noneUInt8{}
}

func (n noneUInt8) FoldUInt8(a uint8, f func(v uint8) uint8) uint8 {
	return a
}

func (n noneUInt8) FoldUInt8F(a func() uint8, f func(v uint8) uint8) uint8 {
	return a()
}

func (n noneUInt8) MapUintPtr(f func(v uint8) uintptr) OptionUintPtr {
	return noneUintPtr{}
}

func (n noneUInt8) FoldUintPtr(a uintptr, f func(v uint8) uintptr) uintptr {
	return a
}

func (n noneUInt8) FoldUintPtrF(a func() uintptr, f func(v uint8) uintptr) uintptr {
	return a()
}



type someUInt8 struct {
	v uint8
}

func SomeUInt8(v uint8) OptionUInt8 {
	return someUInt8{v}
}

func (s someUInt8) Map(f func(uint8)) { f(s.v) }

func (s someUInt8) FoldF(l func(), r func(uint8)) { r(s.v) }


func (s someUInt8) MapBool(f func(v uint8) bool) OptionBool {
	return SomeBool(f(s.v))
}

func (s someUInt8) FoldBool(a bool, f func(v uint8) bool) bool {
	return f(s.v)
}

func (s someUInt8) FoldBoolF(a func() bool, f func(v uint8) bool) bool {
	return f(s.v)
}


func (s someUInt8) MapByte(f func(v uint8) byte) OptionByte {
	return SomeByte(f(s.v))
}

func (s someUInt8) FoldByte(a byte, f func(v uint8) byte) byte {
	return f(s.v)
}

func (s someUInt8) FoldByteF(a func() byte, f func(v uint8) byte) byte {
	return f(s.v)
}


func (s someUInt8) MapComplex128(f func(v uint8) complex128) OptionComplex128 {
	return SomeComplex128(f(s.v))
}

func (s someUInt8) FoldComplex128(a complex128, f func(v uint8) complex128) complex128 {
	return f(s.v)
}

func (s someUInt8) FoldComplex128F(a func() complex128, f func(v uint8) complex128) complex128 {
	return f(s.v)
}


func (s someUInt8) MapComplex64(f func(v uint8) complex64) OptionComplex64 {
	return SomeComplex64(f(s.v))
}

func (s someUInt8) FoldComplex64(a complex64, f func(v uint8) complex64) complex64 {
	return f(s.v)
}

func (s someUInt8) FoldComplex64F(a func() complex64, f func(v uint8) complex64) complex64 {
	return f(s.v)
}


func (s someUInt8) MapFloat32(f func(v uint8) float32) OptionFloat32 {
	return SomeFloat32(f(s.v))
}

func (s someUInt8) FoldFloat32(a float32, f func(v uint8) float32) float32 {
	return f(s.v)
}

func (s someUInt8) FoldFloat32F(a func() float32, f func(v uint8) float32) float32 {
	return f(s.v)
}


func (s someUInt8) MapFloat64(f func(v uint8) float64) OptionFloat64 {
	return SomeFloat64(f(s.v))
}

func (s someUInt8) FoldFloat64(a float64, f func(v uint8) float64) float64 {
	return f(s.v)
}

func (s someUInt8) FoldFloat64F(a func() float64, f func(v uint8) float64) float64 {
	return f(s.v)
}


func (s someUInt8) MapInt(f func(v uint8) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someUInt8) FoldInt(a int, f func(v uint8) int) int {
	return f(s.v)
}

func (s someUInt8) FoldIntF(a func() int, f func(v uint8) int) int {
	return f(s.v)
}


func (s someUInt8) MapInt16(f func(v uint8) int16) OptionInt16 {
	return SomeInt16(f(s.v))
}

func (s someUInt8) FoldInt16(a int16, f func(v uint8) int16) int16 {
	return f(s.v)
}

func (s someUInt8) FoldInt16F(a func() int16, f func(v uint8) int16) int16 {
	return f(s.v)
}


func (s someUInt8) MapInt32(f func(v uint8) int32) OptionInt32 {
	return SomeInt32(f(s.v))
}

func (s someUInt8) FoldInt32(a int32, f func(v uint8) int32) int32 {
	return f(s.v)
}

func (s someUInt8) FoldInt32F(a func() int32, f func(v uint8) int32) int32 {
	return f(s.v)
}


func (s someUInt8) MapInt64(f func(v uint8) int64) OptionInt64 {
	return SomeInt64(f(s.v))
}

func (s someUInt8) FoldInt64(a int64, f func(v uint8) int64) int64 {
	return f(s.v)
}

func (s someUInt8) FoldInt64F(a func() int64, f func(v uint8) int64) int64 {
	return f(s.v)
}


func (s someUInt8) MapInt8(f func(v uint8) int8) OptionInt8 {
	return SomeInt8(f(s.v))
}

func (s someUInt8) FoldInt8(a int8, f func(v uint8) int8) int8 {
	return f(s.v)
}

func (s someUInt8) FoldInt8F(a func() int8, f func(v uint8) int8) int8 {
	return f(s.v)
}


func (s someUInt8) MapRune(f func(v uint8) rune) OptionRune {
	return SomeRune(f(s.v))
}

func (s someUInt8) FoldRune(a rune, f func(v uint8) rune) rune {
	return f(s.v)
}

func (s someUInt8) FoldRuneF(a func() rune, f func(v uint8) rune) rune {
	return f(s.v)
}


func (s someUInt8) MapString(f func(v uint8) string) OptionString {
	return SomeString(f(s.v))
}

func (s someUInt8) FoldString(a string, f func(v uint8) string) string {
	return f(s.v)
}

func (s someUInt8) FoldStringF(a func() string, f func(v uint8) string) string {
	return f(s.v)
}


func (s someUInt8) MapUInt(f func(v uint8) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someUInt8) FoldUInt(a uint, f func(v uint8) uint) uint {
	return f(s.v)
}

func (s someUInt8) FoldUIntF(a func() uint, f func(v uint8) uint) uint {
	return f(s.v)
}


func (s someUInt8) MapUInt16(f func(v uint8) uint16) OptionUInt16 {
	return SomeUInt16(f(s.v))
}

func (s someUInt8) FoldUInt16(a uint16, f func(v uint8) uint16) uint16 {
	return f(s.v)
}

func (s someUInt8) FoldUInt16F(a func() uint16, f func(v uint8) uint16) uint16 {
	return f(s.v)
}


func (s someUInt8) MapUInt32(f func(v uint8) uint32) OptionUInt32 {
	return SomeUInt32(f(s.v))
}

func (s someUInt8) FoldUInt32(a uint32, f func(v uint8) uint32) uint32 {
	return f(s.v)
}

func (s someUInt8) FoldUInt32F(a func() uint32, f func(v uint8) uint32) uint32 {
	return f(s.v)
}


func (s someUInt8) MapUInt64(f func(v uint8) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someUInt8) FoldUInt64(a uint64, f func(v uint8) uint64) uint64 {
	return f(s.v)
}

func (s someUInt8) FoldUInt64F(a func() uint64, f func(v uint8) uint64) uint64 {
	return f(s.v)
}


func (s someUInt8) MapUInt8(f func(v uint8) uint8) OptionUInt8 {
	return SomeUInt8(f(s.v))
}

func (s someUInt8) FoldUInt8(a uint8, f func(v uint8) uint8) uint8 {
	return f(s.v)
}

func (s someUInt8) FoldUInt8F(a func() uint8, f func(v uint8) uint8) uint8 {
	return f(s.v)
}


func (s someUInt8) MapUintPtr(f func(v uint8) uintptr) OptionUintPtr {
	return SomeUintPtr(f(s.v))
}

func (s someUInt8) FoldUintPtr(a uintptr, f func(v uint8) uintptr) uintptr {
	return f(s.v)
}

func (s someUInt8) FoldUintPtrF(a func() uintptr, f func(v uint8) uintptr) uintptr {
	return f(s.v)
}




type noneUintPtr struct{}

func NoneUintPtr() OptionUintPtr {
	return noneUintPtr{}
}

func (n noneUintPtr) Map(f func(uintptr)) {}

func (n noneUintPtr) FoldF(l func(), r func(uintptr)) { l() }


func (n noneUintPtr) MapBool(f func(v uintptr) bool) OptionBool {
	return noneBool{}
}

func (n noneUintPtr) FoldBool(a bool, f func(v uintptr) bool) bool {
	return a
}

func (n noneUintPtr) FoldBoolF(a func() bool, f func(v uintptr) bool) bool {
	return a()
}

func (n noneUintPtr) MapByte(f func(v uintptr) byte) OptionByte {
	return noneByte{}
}

func (n noneUintPtr) FoldByte(a byte, f func(v uintptr) byte) byte {
	return a
}

func (n noneUintPtr) FoldByteF(a func() byte, f func(v uintptr) byte) byte {
	return a()
}

func (n noneUintPtr) MapComplex128(f func(v uintptr) complex128) OptionComplex128 {
	return noneComplex128{}
}

func (n noneUintPtr) FoldComplex128(a complex128, f func(v uintptr) complex128) complex128 {
	return a
}

func (n noneUintPtr) FoldComplex128F(a func() complex128, f func(v uintptr) complex128) complex128 {
	return a()
}

func (n noneUintPtr) MapComplex64(f func(v uintptr) complex64) OptionComplex64 {
	return noneComplex64{}
}

func (n noneUintPtr) FoldComplex64(a complex64, f func(v uintptr) complex64) complex64 {
	return a
}

func (n noneUintPtr) FoldComplex64F(a func() complex64, f func(v uintptr) complex64) complex64 {
	return a()
}

func (n noneUintPtr) MapFloat32(f func(v uintptr) float32) OptionFloat32 {
	return noneFloat32{}
}

func (n noneUintPtr) FoldFloat32(a float32, f func(v uintptr) float32) float32 {
	return a
}

func (n noneUintPtr) FoldFloat32F(a func() float32, f func(v uintptr) float32) float32 {
	return a()
}

func (n noneUintPtr) MapFloat64(f func(v uintptr) float64) OptionFloat64 {
	return noneFloat64{}
}

func (n noneUintPtr) FoldFloat64(a float64, f func(v uintptr) float64) float64 {
	return a
}

func (n noneUintPtr) FoldFloat64F(a func() float64, f func(v uintptr) float64) float64 {
	return a()
}

func (n noneUintPtr) MapInt(f func(v uintptr) int) OptionInt {
	return noneInt{}
}

func (n noneUintPtr) FoldInt(a int, f func(v uintptr) int) int {
	return a
}

func (n noneUintPtr) FoldIntF(a func() int, f func(v uintptr) int) int {
	return a()
}

func (n noneUintPtr) MapInt16(f func(v uintptr) int16) OptionInt16 {
	return noneInt16{}
}

func (n noneUintPtr) FoldInt16(a int16, f func(v uintptr) int16) int16 {
	return a
}

func (n noneUintPtr) FoldInt16F(a func() int16, f func(v uintptr) int16) int16 {
	return a()
}

func (n noneUintPtr) MapInt32(f func(v uintptr) int32) OptionInt32 {
	return noneInt32{}
}

func (n noneUintPtr) FoldInt32(a int32, f func(v uintptr) int32) int32 {
	return a
}

func (n noneUintPtr) FoldInt32F(a func() int32, f func(v uintptr) int32) int32 {
	return a()
}

func (n noneUintPtr) MapInt64(f func(v uintptr) int64) OptionInt64 {
	return noneInt64{}
}

func (n noneUintPtr) FoldInt64(a int64, f func(v uintptr) int64) int64 {
	return a
}

func (n noneUintPtr) FoldInt64F(a func() int64, f func(v uintptr) int64) int64 {
	return a()
}

func (n noneUintPtr) MapInt8(f func(v uintptr) int8) OptionInt8 {
	return noneInt8{}
}

func (n noneUintPtr) FoldInt8(a int8, f func(v uintptr) int8) int8 {
	return a
}

func (n noneUintPtr) FoldInt8F(a func() int8, f func(v uintptr) int8) int8 {
	return a()
}

func (n noneUintPtr) MapRune(f func(v uintptr) rune) OptionRune {
	return noneRune{}
}

func (n noneUintPtr) FoldRune(a rune, f func(v uintptr) rune) rune {
	return a
}

func (n noneUintPtr) FoldRuneF(a func() rune, f func(v uintptr) rune) rune {
	return a()
}

func (n noneUintPtr) MapString(f func(v uintptr) string) OptionString {
	return noneString{}
}

func (n noneUintPtr) FoldString(a string, f func(v uintptr) string) string {
	return a
}

func (n noneUintPtr) FoldStringF(a func() string, f func(v uintptr) string) string {
	return a()
}

func (n noneUintPtr) MapUInt(f func(v uintptr) uint) OptionUInt {
	return noneUInt{}
}

func (n noneUintPtr) FoldUInt(a uint, f func(v uintptr) uint) uint {
	return a
}

func (n noneUintPtr) FoldUIntF(a func() uint, f func(v uintptr) uint) uint {
	return a()
}

func (n noneUintPtr) MapUInt16(f func(v uintptr) uint16) OptionUInt16 {
	return noneUInt16{}
}

func (n noneUintPtr) FoldUInt16(a uint16, f func(v uintptr) uint16) uint16 {
	return a
}

func (n noneUintPtr) FoldUInt16F(a func() uint16, f func(v uintptr) uint16) uint16 {
	return a()
}

func (n noneUintPtr) MapUInt32(f func(v uintptr) uint32) OptionUInt32 {
	return noneUInt32{}
}

func (n noneUintPtr) FoldUInt32(a uint32, f func(v uintptr) uint32) uint32 {
	return a
}

func (n noneUintPtr) FoldUInt32F(a func() uint32, f func(v uintptr) uint32) uint32 {
	return a()
}

func (n noneUintPtr) MapUInt64(f func(v uintptr) uint64) OptionUInt64 {
	return noneUInt64{}
}

func (n noneUintPtr) FoldUInt64(a uint64, f func(v uintptr) uint64) uint64 {
	return a
}

func (n noneUintPtr) FoldUInt64F(a func() uint64, f func(v uintptr) uint64) uint64 {
	return a()
}

func (n noneUintPtr) MapUInt8(f func(v uintptr) uint8) OptionUInt8 {
	return noneUInt8{}
}

func (n noneUintPtr) FoldUInt8(a uint8, f func(v uintptr) uint8) uint8 {
	return a
}

func (n noneUintPtr) FoldUInt8F(a func() uint8, f func(v uintptr) uint8) uint8 {
	return a()
}

func (n noneUintPtr) MapUintPtr(f func(v uintptr) uintptr) OptionUintPtr {
	return noneUintPtr{}
}

func (n noneUintPtr) FoldUintPtr(a uintptr, f func(v uintptr) uintptr) uintptr {
	return a
}

func (n noneUintPtr) FoldUintPtrF(a func() uintptr, f func(v uintptr) uintptr) uintptr {
	return a()
}



type someUintPtr struct {
	v uintptr
}

func SomeUintPtr(v uintptr) OptionUintPtr {
	return someUintPtr{v}
}

func (s someUintPtr) Map(f func(uintptr)) { f(s.v) }

func (s someUintPtr) FoldF(l func(), r func(uintptr)) { r(s.v) }


func (s someUintPtr) MapBool(f func(v uintptr) bool) OptionBool {
	return SomeBool(f(s.v))
}

func (s someUintPtr) FoldBool(a bool, f func(v uintptr) bool) bool {
	return f(s.v)
}

func (s someUintPtr) FoldBoolF(a func() bool, f func(v uintptr) bool) bool {
	return f(s.v)
}


func (s someUintPtr) MapByte(f func(v uintptr) byte) OptionByte {
	return SomeByte(f(s.v))
}

func (s someUintPtr) FoldByte(a byte, f func(v uintptr) byte) byte {
	return f(s.v)
}

func (s someUintPtr) FoldByteF(a func() byte, f func(v uintptr) byte) byte {
	return f(s.v)
}


func (s someUintPtr) MapComplex128(f func(v uintptr) complex128) OptionComplex128 {
	return SomeComplex128(f(s.v))
}

func (s someUintPtr) FoldComplex128(a complex128, f func(v uintptr) complex128) complex128 {
	return f(s.v)
}

func (s someUintPtr) FoldComplex128F(a func() complex128, f func(v uintptr) complex128) complex128 {
	return f(s.v)
}


func (s someUintPtr) MapComplex64(f func(v uintptr) complex64) OptionComplex64 {
	return SomeComplex64(f(s.v))
}

func (s someUintPtr) FoldComplex64(a complex64, f func(v uintptr) complex64) complex64 {
	return f(s.v)
}

func (s someUintPtr) FoldComplex64F(a func() complex64, f func(v uintptr) complex64) complex64 {
	return f(s.v)
}


func (s someUintPtr) MapFloat32(f func(v uintptr) float32) OptionFloat32 {
	return SomeFloat32(f(s.v))
}

func (s someUintPtr) FoldFloat32(a float32, f func(v uintptr) float32) float32 {
	return f(s.v)
}

func (s someUintPtr) FoldFloat32F(a func() float32, f func(v uintptr) float32) float32 {
	return f(s.v)
}


func (s someUintPtr) MapFloat64(f func(v uintptr) float64) OptionFloat64 {
	return SomeFloat64(f(s.v))
}

func (s someUintPtr) FoldFloat64(a float64, f func(v uintptr) float64) float64 {
	return f(s.v)
}

func (s someUintPtr) FoldFloat64F(a func() float64, f func(v uintptr) float64) float64 {
	return f(s.v)
}


func (s someUintPtr) MapInt(f func(v uintptr) int) OptionInt {
	return SomeInt(f(s.v))
}

func (s someUintPtr) FoldInt(a int, f func(v uintptr) int) int {
	return f(s.v)
}

func (s someUintPtr) FoldIntF(a func() int, f func(v uintptr) int) int {
	return f(s.v)
}


func (s someUintPtr) MapInt16(f func(v uintptr) int16) OptionInt16 {
	return SomeInt16(f(s.v))
}

func (s someUintPtr) FoldInt16(a int16, f func(v uintptr) int16) int16 {
	return f(s.v)
}

func (s someUintPtr) FoldInt16F(a func() int16, f func(v uintptr) int16) int16 {
	return f(s.v)
}


func (s someUintPtr) MapInt32(f func(v uintptr) int32) OptionInt32 {
	return SomeInt32(f(s.v))
}

func (s someUintPtr) FoldInt32(a int32, f func(v uintptr) int32) int32 {
	return f(s.v)
}

func (s someUintPtr) FoldInt32F(a func() int32, f func(v uintptr) int32) int32 {
	return f(s.v)
}


func (s someUintPtr) MapInt64(f func(v uintptr) int64) OptionInt64 {
	return SomeInt64(f(s.v))
}

func (s someUintPtr) FoldInt64(a int64, f func(v uintptr) int64) int64 {
	return f(s.v)
}

func (s someUintPtr) FoldInt64F(a func() int64, f func(v uintptr) int64) int64 {
	return f(s.v)
}


func (s someUintPtr) MapInt8(f func(v uintptr) int8) OptionInt8 {
	return SomeInt8(f(s.v))
}

func (s someUintPtr) FoldInt8(a int8, f func(v uintptr) int8) int8 {
	return f(s.v)
}

func (s someUintPtr) FoldInt8F(a func() int8, f func(v uintptr) int8) int8 {
	return f(s.v)
}


func (s someUintPtr) MapRune(f func(v uintptr) rune) OptionRune {
	return SomeRune(f(s.v))
}

func (s someUintPtr) FoldRune(a rune, f func(v uintptr) rune) rune {
	return f(s.v)
}

func (s someUintPtr) FoldRuneF(a func() rune, f func(v uintptr) rune) rune {
	return f(s.v)
}


func (s someUintPtr) MapString(f func(v uintptr) string) OptionString {
	return SomeString(f(s.v))
}

func (s someUintPtr) FoldString(a string, f func(v uintptr) string) string {
	return f(s.v)
}

func (s someUintPtr) FoldStringF(a func() string, f func(v uintptr) string) string {
	return f(s.v)
}


func (s someUintPtr) MapUInt(f func(v uintptr) uint) OptionUInt {
	return SomeUInt(f(s.v))
}

func (s someUintPtr) FoldUInt(a uint, f func(v uintptr) uint) uint {
	return f(s.v)
}

func (s someUintPtr) FoldUIntF(a func() uint, f func(v uintptr) uint) uint {
	return f(s.v)
}


func (s someUintPtr) MapUInt16(f func(v uintptr) uint16) OptionUInt16 {
	return SomeUInt16(f(s.v))
}

func (s someUintPtr) FoldUInt16(a uint16, f func(v uintptr) uint16) uint16 {
	return f(s.v)
}

func (s someUintPtr) FoldUInt16F(a func() uint16, f func(v uintptr) uint16) uint16 {
	return f(s.v)
}


func (s someUintPtr) MapUInt32(f func(v uintptr) uint32) OptionUInt32 {
	return SomeUInt32(f(s.v))
}

func (s someUintPtr) FoldUInt32(a uint32, f func(v uintptr) uint32) uint32 {
	return f(s.v)
}

func (s someUintPtr) FoldUInt32F(a func() uint32, f func(v uintptr) uint32) uint32 {
	return f(s.v)
}


func (s someUintPtr) MapUInt64(f func(v uintptr) uint64) OptionUInt64 {
	return SomeUInt64(f(s.v))
}

func (s someUintPtr) FoldUInt64(a uint64, f func(v uintptr) uint64) uint64 {
	return f(s.v)
}

func (s someUintPtr) FoldUInt64F(a func() uint64, f func(v uintptr) uint64) uint64 {
	return f(s.v)
}


func (s someUintPtr) MapUInt8(f func(v uintptr) uint8) OptionUInt8 {
	return SomeUInt8(f(s.v))
}

func (s someUintPtr) FoldUInt8(a uint8, f func(v uintptr) uint8) uint8 {
	return f(s.v)
}

func (s someUintPtr) FoldUInt8F(a func() uint8, f func(v uintptr) uint8) uint8 {
	return f(s.v)
}


func (s someUintPtr) MapUintPtr(f func(v uintptr) uintptr) OptionUintPtr {
	return SomeUintPtr(f(s.v))
}

func (s someUintPtr) FoldUintPtr(a uintptr, f func(v uintptr) uintptr) uintptr {
	return f(s.v)
}

func (s someUintPtr) FoldUintPtrF(a func() uintptr, f func(v uintptr) uintptr) uintptr {
	return f(s.v)
}




