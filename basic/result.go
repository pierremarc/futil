// Code generated by go generate on 2018-04-10 05:59:54.838550456 +0000 UTC
package basic


import (
	"errors"
 )



// ResultBool
type ResultBool interface {
	Map(func(bool))
	FoldF(func(error), func(bool))

	MapBool(func(bool) bool) ResultBool
	FoldBool(bool, func(bool) bool) bool
	FoldBoolF(func(error) bool, func(bool) bool) bool

	MapByte(func(bool) byte) ResultByte
	FoldByte(byte, func(bool) byte) byte
	FoldByteF(func(error) byte, func(bool) byte) byte

	MapComplex128(func(bool) complex128) ResultComplex128
	FoldComplex128(complex128, func(bool) complex128) complex128
	FoldComplex128F(func(error) complex128, func(bool) complex128) complex128

	MapComplex64(func(bool) complex64) ResultComplex64
	FoldComplex64(complex64, func(bool) complex64) complex64
	FoldComplex64F(func(error) complex64, func(bool) complex64) complex64

	MapFloat32(func(bool) float32) ResultFloat32
	FoldFloat32(float32, func(bool) float32) float32
	FoldFloat32F(func(error) float32, func(bool) float32) float32

	MapFloat64(func(bool) float64) ResultFloat64
	FoldFloat64(float64, func(bool) float64) float64
	FoldFloat64F(func(error) float64, func(bool) float64) float64

	MapInt(func(bool) int) ResultInt
	FoldInt(int, func(bool) int) int
	FoldIntF(func(error) int, func(bool) int) int

	MapInt16(func(bool) int16) ResultInt16
	FoldInt16(int16, func(bool) int16) int16
	FoldInt16F(func(error) int16, func(bool) int16) int16

	MapInt32(func(bool) int32) ResultInt32
	FoldInt32(int32, func(bool) int32) int32
	FoldInt32F(func(error) int32, func(bool) int32) int32

	MapInt64(func(bool) int64) ResultInt64
	FoldInt64(int64, func(bool) int64) int64
	FoldInt64F(func(error) int64, func(bool) int64) int64

	MapInt8(func(bool) int8) ResultInt8
	FoldInt8(int8, func(bool) int8) int8
	FoldInt8F(func(error) int8, func(bool) int8) int8

	MapRune(func(bool) rune) ResultRune
	FoldRune(rune, func(bool) rune) rune
	FoldRuneF(func(error) rune, func(bool) rune) rune

	MapString(func(bool) string) ResultString
	FoldString(string, func(bool) string) string
	FoldStringF(func(error) string, func(bool) string) string

	MapUInt(func(bool) uint) ResultUInt
	FoldUInt(uint, func(bool) uint) uint
	FoldUIntF(func(error) uint, func(bool) uint) uint

	MapUInt16(func(bool) uint16) ResultUInt16
	FoldUInt16(uint16, func(bool) uint16) uint16
	FoldUInt16F(func(error) uint16, func(bool) uint16) uint16

	MapUInt32(func(bool) uint32) ResultUInt32
	FoldUInt32(uint32, func(bool) uint32) uint32
	FoldUInt32F(func(error) uint32, func(bool) uint32) uint32

	MapUInt64(func(bool) uint64) ResultUInt64
	FoldUInt64(uint64, func(bool) uint64) uint64
	FoldUInt64F(func(error) uint64, func(bool) uint64) uint64

	MapUInt8(func(bool) uint8) ResultUInt8
	FoldUInt8(uint8, func(bool) uint8) uint8
	FoldUInt8F(func(error) uint8, func(bool) uint8) uint8

	MapUintPtr(func(bool) uintptr) ResultUintPtr
	FoldUintPtr(uintptr, func(bool) uintptr) uintptr
	FoldUintPtrF(func(error) uintptr, func(bool) uintptr) uintptr
 
}

// ResultByte
type ResultByte interface {
	Map(func(byte))
	FoldF(func(error), func(byte))

	MapBool(func(byte) bool) ResultBool
	FoldBool(bool, func(byte) bool) bool
	FoldBoolF(func(error) bool, func(byte) bool) bool

	MapByte(func(byte) byte) ResultByte
	FoldByte(byte, func(byte) byte) byte
	FoldByteF(func(error) byte, func(byte) byte) byte

	MapComplex128(func(byte) complex128) ResultComplex128
	FoldComplex128(complex128, func(byte) complex128) complex128
	FoldComplex128F(func(error) complex128, func(byte) complex128) complex128

	MapComplex64(func(byte) complex64) ResultComplex64
	FoldComplex64(complex64, func(byte) complex64) complex64
	FoldComplex64F(func(error) complex64, func(byte) complex64) complex64

	MapFloat32(func(byte) float32) ResultFloat32
	FoldFloat32(float32, func(byte) float32) float32
	FoldFloat32F(func(error) float32, func(byte) float32) float32

	MapFloat64(func(byte) float64) ResultFloat64
	FoldFloat64(float64, func(byte) float64) float64
	FoldFloat64F(func(error) float64, func(byte) float64) float64

	MapInt(func(byte) int) ResultInt
	FoldInt(int, func(byte) int) int
	FoldIntF(func(error) int, func(byte) int) int

	MapInt16(func(byte) int16) ResultInt16
	FoldInt16(int16, func(byte) int16) int16
	FoldInt16F(func(error) int16, func(byte) int16) int16

	MapInt32(func(byte) int32) ResultInt32
	FoldInt32(int32, func(byte) int32) int32
	FoldInt32F(func(error) int32, func(byte) int32) int32

	MapInt64(func(byte) int64) ResultInt64
	FoldInt64(int64, func(byte) int64) int64
	FoldInt64F(func(error) int64, func(byte) int64) int64

	MapInt8(func(byte) int8) ResultInt8
	FoldInt8(int8, func(byte) int8) int8
	FoldInt8F(func(error) int8, func(byte) int8) int8

	MapRune(func(byte) rune) ResultRune
	FoldRune(rune, func(byte) rune) rune
	FoldRuneF(func(error) rune, func(byte) rune) rune

	MapString(func(byte) string) ResultString
	FoldString(string, func(byte) string) string
	FoldStringF(func(error) string, func(byte) string) string

	MapUInt(func(byte) uint) ResultUInt
	FoldUInt(uint, func(byte) uint) uint
	FoldUIntF(func(error) uint, func(byte) uint) uint

	MapUInt16(func(byte) uint16) ResultUInt16
	FoldUInt16(uint16, func(byte) uint16) uint16
	FoldUInt16F(func(error) uint16, func(byte) uint16) uint16

	MapUInt32(func(byte) uint32) ResultUInt32
	FoldUInt32(uint32, func(byte) uint32) uint32
	FoldUInt32F(func(error) uint32, func(byte) uint32) uint32

	MapUInt64(func(byte) uint64) ResultUInt64
	FoldUInt64(uint64, func(byte) uint64) uint64
	FoldUInt64F(func(error) uint64, func(byte) uint64) uint64

	MapUInt8(func(byte) uint8) ResultUInt8
	FoldUInt8(uint8, func(byte) uint8) uint8
	FoldUInt8F(func(error) uint8, func(byte) uint8) uint8

	MapUintPtr(func(byte) uintptr) ResultUintPtr
	FoldUintPtr(uintptr, func(byte) uintptr) uintptr
	FoldUintPtrF(func(error) uintptr, func(byte) uintptr) uintptr
 
}

// ResultComplex128
type ResultComplex128 interface {
	Map(func(complex128))
	FoldF(func(error), func(complex128))

	MapBool(func(complex128) bool) ResultBool
	FoldBool(bool, func(complex128) bool) bool
	FoldBoolF(func(error) bool, func(complex128) bool) bool

	MapByte(func(complex128) byte) ResultByte
	FoldByte(byte, func(complex128) byte) byte
	FoldByteF(func(error) byte, func(complex128) byte) byte

	MapComplex128(func(complex128) complex128) ResultComplex128
	FoldComplex128(complex128, func(complex128) complex128) complex128
	FoldComplex128F(func(error) complex128, func(complex128) complex128) complex128

	MapComplex64(func(complex128) complex64) ResultComplex64
	FoldComplex64(complex64, func(complex128) complex64) complex64
	FoldComplex64F(func(error) complex64, func(complex128) complex64) complex64

	MapFloat32(func(complex128) float32) ResultFloat32
	FoldFloat32(float32, func(complex128) float32) float32
	FoldFloat32F(func(error) float32, func(complex128) float32) float32

	MapFloat64(func(complex128) float64) ResultFloat64
	FoldFloat64(float64, func(complex128) float64) float64
	FoldFloat64F(func(error) float64, func(complex128) float64) float64

	MapInt(func(complex128) int) ResultInt
	FoldInt(int, func(complex128) int) int
	FoldIntF(func(error) int, func(complex128) int) int

	MapInt16(func(complex128) int16) ResultInt16
	FoldInt16(int16, func(complex128) int16) int16
	FoldInt16F(func(error) int16, func(complex128) int16) int16

	MapInt32(func(complex128) int32) ResultInt32
	FoldInt32(int32, func(complex128) int32) int32
	FoldInt32F(func(error) int32, func(complex128) int32) int32

	MapInt64(func(complex128) int64) ResultInt64
	FoldInt64(int64, func(complex128) int64) int64
	FoldInt64F(func(error) int64, func(complex128) int64) int64

	MapInt8(func(complex128) int8) ResultInt8
	FoldInt8(int8, func(complex128) int8) int8
	FoldInt8F(func(error) int8, func(complex128) int8) int8

	MapRune(func(complex128) rune) ResultRune
	FoldRune(rune, func(complex128) rune) rune
	FoldRuneF(func(error) rune, func(complex128) rune) rune

	MapString(func(complex128) string) ResultString
	FoldString(string, func(complex128) string) string
	FoldStringF(func(error) string, func(complex128) string) string

	MapUInt(func(complex128) uint) ResultUInt
	FoldUInt(uint, func(complex128) uint) uint
	FoldUIntF(func(error) uint, func(complex128) uint) uint

	MapUInt16(func(complex128) uint16) ResultUInt16
	FoldUInt16(uint16, func(complex128) uint16) uint16
	FoldUInt16F(func(error) uint16, func(complex128) uint16) uint16

	MapUInt32(func(complex128) uint32) ResultUInt32
	FoldUInt32(uint32, func(complex128) uint32) uint32
	FoldUInt32F(func(error) uint32, func(complex128) uint32) uint32

	MapUInt64(func(complex128) uint64) ResultUInt64
	FoldUInt64(uint64, func(complex128) uint64) uint64
	FoldUInt64F(func(error) uint64, func(complex128) uint64) uint64

	MapUInt8(func(complex128) uint8) ResultUInt8
	FoldUInt8(uint8, func(complex128) uint8) uint8
	FoldUInt8F(func(error) uint8, func(complex128) uint8) uint8

	MapUintPtr(func(complex128) uintptr) ResultUintPtr
	FoldUintPtr(uintptr, func(complex128) uintptr) uintptr
	FoldUintPtrF(func(error) uintptr, func(complex128) uintptr) uintptr
 
}

// ResultComplex64
type ResultComplex64 interface {
	Map(func(complex64))
	FoldF(func(error), func(complex64))

	MapBool(func(complex64) bool) ResultBool
	FoldBool(bool, func(complex64) bool) bool
	FoldBoolF(func(error) bool, func(complex64) bool) bool

	MapByte(func(complex64) byte) ResultByte
	FoldByte(byte, func(complex64) byte) byte
	FoldByteF(func(error) byte, func(complex64) byte) byte

	MapComplex128(func(complex64) complex128) ResultComplex128
	FoldComplex128(complex128, func(complex64) complex128) complex128
	FoldComplex128F(func(error) complex128, func(complex64) complex128) complex128

	MapComplex64(func(complex64) complex64) ResultComplex64
	FoldComplex64(complex64, func(complex64) complex64) complex64
	FoldComplex64F(func(error) complex64, func(complex64) complex64) complex64

	MapFloat32(func(complex64) float32) ResultFloat32
	FoldFloat32(float32, func(complex64) float32) float32
	FoldFloat32F(func(error) float32, func(complex64) float32) float32

	MapFloat64(func(complex64) float64) ResultFloat64
	FoldFloat64(float64, func(complex64) float64) float64
	FoldFloat64F(func(error) float64, func(complex64) float64) float64

	MapInt(func(complex64) int) ResultInt
	FoldInt(int, func(complex64) int) int
	FoldIntF(func(error) int, func(complex64) int) int

	MapInt16(func(complex64) int16) ResultInt16
	FoldInt16(int16, func(complex64) int16) int16
	FoldInt16F(func(error) int16, func(complex64) int16) int16

	MapInt32(func(complex64) int32) ResultInt32
	FoldInt32(int32, func(complex64) int32) int32
	FoldInt32F(func(error) int32, func(complex64) int32) int32

	MapInt64(func(complex64) int64) ResultInt64
	FoldInt64(int64, func(complex64) int64) int64
	FoldInt64F(func(error) int64, func(complex64) int64) int64

	MapInt8(func(complex64) int8) ResultInt8
	FoldInt8(int8, func(complex64) int8) int8
	FoldInt8F(func(error) int8, func(complex64) int8) int8

	MapRune(func(complex64) rune) ResultRune
	FoldRune(rune, func(complex64) rune) rune
	FoldRuneF(func(error) rune, func(complex64) rune) rune

	MapString(func(complex64) string) ResultString
	FoldString(string, func(complex64) string) string
	FoldStringF(func(error) string, func(complex64) string) string

	MapUInt(func(complex64) uint) ResultUInt
	FoldUInt(uint, func(complex64) uint) uint
	FoldUIntF(func(error) uint, func(complex64) uint) uint

	MapUInt16(func(complex64) uint16) ResultUInt16
	FoldUInt16(uint16, func(complex64) uint16) uint16
	FoldUInt16F(func(error) uint16, func(complex64) uint16) uint16

	MapUInt32(func(complex64) uint32) ResultUInt32
	FoldUInt32(uint32, func(complex64) uint32) uint32
	FoldUInt32F(func(error) uint32, func(complex64) uint32) uint32

	MapUInt64(func(complex64) uint64) ResultUInt64
	FoldUInt64(uint64, func(complex64) uint64) uint64
	FoldUInt64F(func(error) uint64, func(complex64) uint64) uint64

	MapUInt8(func(complex64) uint8) ResultUInt8
	FoldUInt8(uint8, func(complex64) uint8) uint8
	FoldUInt8F(func(error) uint8, func(complex64) uint8) uint8

	MapUintPtr(func(complex64) uintptr) ResultUintPtr
	FoldUintPtr(uintptr, func(complex64) uintptr) uintptr
	FoldUintPtrF(func(error) uintptr, func(complex64) uintptr) uintptr
 
}

// ResultFloat32
type ResultFloat32 interface {
	Map(func(float32))
	FoldF(func(error), func(float32))

	MapBool(func(float32) bool) ResultBool
	FoldBool(bool, func(float32) bool) bool
	FoldBoolF(func(error) bool, func(float32) bool) bool

	MapByte(func(float32) byte) ResultByte
	FoldByte(byte, func(float32) byte) byte
	FoldByteF(func(error) byte, func(float32) byte) byte

	MapComplex128(func(float32) complex128) ResultComplex128
	FoldComplex128(complex128, func(float32) complex128) complex128
	FoldComplex128F(func(error) complex128, func(float32) complex128) complex128

	MapComplex64(func(float32) complex64) ResultComplex64
	FoldComplex64(complex64, func(float32) complex64) complex64
	FoldComplex64F(func(error) complex64, func(float32) complex64) complex64

	MapFloat32(func(float32) float32) ResultFloat32
	FoldFloat32(float32, func(float32) float32) float32
	FoldFloat32F(func(error) float32, func(float32) float32) float32

	MapFloat64(func(float32) float64) ResultFloat64
	FoldFloat64(float64, func(float32) float64) float64
	FoldFloat64F(func(error) float64, func(float32) float64) float64

	MapInt(func(float32) int) ResultInt
	FoldInt(int, func(float32) int) int
	FoldIntF(func(error) int, func(float32) int) int

	MapInt16(func(float32) int16) ResultInt16
	FoldInt16(int16, func(float32) int16) int16
	FoldInt16F(func(error) int16, func(float32) int16) int16

	MapInt32(func(float32) int32) ResultInt32
	FoldInt32(int32, func(float32) int32) int32
	FoldInt32F(func(error) int32, func(float32) int32) int32

	MapInt64(func(float32) int64) ResultInt64
	FoldInt64(int64, func(float32) int64) int64
	FoldInt64F(func(error) int64, func(float32) int64) int64

	MapInt8(func(float32) int8) ResultInt8
	FoldInt8(int8, func(float32) int8) int8
	FoldInt8F(func(error) int8, func(float32) int8) int8

	MapRune(func(float32) rune) ResultRune
	FoldRune(rune, func(float32) rune) rune
	FoldRuneF(func(error) rune, func(float32) rune) rune

	MapString(func(float32) string) ResultString
	FoldString(string, func(float32) string) string
	FoldStringF(func(error) string, func(float32) string) string

	MapUInt(func(float32) uint) ResultUInt
	FoldUInt(uint, func(float32) uint) uint
	FoldUIntF(func(error) uint, func(float32) uint) uint

	MapUInt16(func(float32) uint16) ResultUInt16
	FoldUInt16(uint16, func(float32) uint16) uint16
	FoldUInt16F(func(error) uint16, func(float32) uint16) uint16

	MapUInt32(func(float32) uint32) ResultUInt32
	FoldUInt32(uint32, func(float32) uint32) uint32
	FoldUInt32F(func(error) uint32, func(float32) uint32) uint32

	MapUInt64(func(float32) uint64) ResultUInt64
	FoldUInt64(uint64, func(float32) uint64) uint64
	FoldUInt64F(func(error) uint64, func(float32) uint64) uint64

	MapUInt8(func(float32) uint8) ResultUInt8
	FoldUInt8(uint8, func(float32) uint8) uint8
	FoldUInt8F(func(error) uint8, func(float32) uint8) uint8

	MapUintPtr(func(float32) uintptr) ResultUintPtr
	FoldUintPtr(uintptr, func(float32) uintptr) uintptr
	FoldUintPtrF(func(error) uintptr, func(float32) uintptr) uintptr
 
}

// ResultFloat64
type ResultFloat64 interface {
	Map(func(float64))
	FoldF(func(error), func(float64))

	MapBool(func(float64) bool) ResultBool
	FoldBool(bool, func(float64) bool) bool
	FoldBoolF(func(error) bool, func(float64) bool) bool

	MapByte(func(float64) byte) ResultByte
	FoldByte(byte, func(float64) byte) byte
	FoldByteF(func(error) byte, func(float64) byte) byte

	MapComplex128(func(float64) complex128) ResultComplex128
	FoldComplex128(complex128, func(float64) complex128) complex128
	FoldComplex128F(func(error) complex128, func(float64) complex128) complex128

	MapComplex64(func(float64) complex64) ResultComplex64
	FoldComplex64(complex64, func(float64) complex64) complex64
	FoldComplex64F(func(error) complex64, func(float64) complex64) complex64

	MapFloat32(func(float64) float32) ResultFloat32
	FoldFloat32(float32, func(float64) float32) float32
	FoldFloat32F(func(error) float32, func(float64) float32) float32

	MapFloat64(func(float64) float64) ResultFloat64
	FoldFloat64(float64, func(float64) float64) float64
	FoldFloat64F(func(error) float64, func(float64) float64) float64

	MapInt(func(float64) int) ResultInt
	FoldInt(int, func(float64) int) int
	FoldIntF(func(error) int, func(float64) int) int

	MapInt16(func(float64) int16) ResultInt16
	FoldInt16(int16, func(float64) int16) int16
	FoldInt16F(func(error) int16, func(float64) int16) int16

	MapInt32(func(float64) int32) ResultInt32
	FoldInt32(int32, func(float64) int32) int32
	FoldInt32F(func(error) int32, func(float64) int32) int32

	MapInt64(func(float64) int64) ResultInt64
	FoldInt64(int64, func(float64) int64) int64
	FoldInt64F(func(error) int64, func(float64) int64) int64

	MapInt8(func(float64) int8) ResultInt8
	FoldInt8(int8, func(float64) int8) int8
	FoldInt8F(func(error) int8, func(float64) int8) int8

	MapRune(func(float64) rune) ResultRune
	FoldRune(rune, func(float64) rune) rune
	FoldRuneF(func(error) rune, func(float64) rune) rune

	MapString(func(float64) string) ResultString
	FoldString(string, func(float64) string) string
	FoldStringF(func(error) string, func(float64) string) string

	MapUInt(func(float64) uint) ResultUInt
	FoldUInt(uint, func(float64) uint) uint
	FoldUIntF(func(error) uint, func(float64) uint) uint

	MapUInt16(func(float64) uint16) ResultUInt16
	FoldUInt16(uint16, func(float64) uint16) uint16
	FoldUInt16F(func(error) uint16, func(float64) uint16) uint16

	MapUInt32(func(float64) uint32) ResultUInt32
	FoldUInt32(uint32, func(float64) uint32) uint32
	FoldUInt32F(func(error) uint32, func(float64) uint32) uint32

	MapUInt64(func(float64) uint64) ResultUInt64
	FoldUInt64(uint64, func(float64) uint64) uint64
	FoldUInt64F(func(error) uint64, func(float64) uint64) uint64

	MapUInt8(func(float64) uint8) ResultUInt8
	FoldUInt8(uint8, func(float64) uint8) uint8
	FoldUInt8F(func(error) uint8, func(float64) uint8) uint8

	MapUintPtr(func(float64) uintptr) ResultUintPtr
	FoldUintPtr(uintptr, func(float64) uintptr) uintptr
	FoldUintPtrF(func(error) uintptr, func(float64) uintptr) uintptr
 
}

// ResultInt
type ResultInt interface {
	Map(func(int))
	FoldF(func(error), func(int))

	MapBool(func(int) bool) ResultBool
	FoldBool(bool, func(int) bool) bool
	FoldBoolF(func(error) bool, func(int) bool) bool

	MapByte(func(int) byte) ResultByte
	FoldByte(byte, func(int) byte) byte
	FoldByteF(func(error) byte, func(int) byte) byte

	MapComplex128(func(int) complex128) ResultComplex128
	FoldComplex128(complex128, func(int) complex128) complex128
	FoldComplex128F(func(error) complex128, func(int) complex128) complex128

	MapComplex64(func(int) complex64) ResultComplex64
	FoldComplex64(complex64, func(int) complex64) complex64
	FoldComplex64F(func(error) complex64, func(int) complex64) complex64

	MapFloat32(func(int) float32) ResultFloat32
	FoldFloat32(float32, func(int) float32) float32
	FoldFloat32F(func(error) float32, func(int) float32) float32

	MapFloat64(func(int) float64) ResultFloat64
	FoldFloat64(float64, func(int) float64) float64
	FoldFloat64F(func(error) float64, func(int) float64) float64

	MapInt(func(int) int) ResultInt
	FoldInt(int, func(int) int) int
	FoldIntF(func(error) int, func(int) int) int

	MapInt16(func(int) int16) ResultInt16
	FoldInt16(int16, func(int) int16) int16
	FoldInt16F(func(error) int16, func(int) int16) int16

	MapInt32(func(int) int32) ResultInt32
	FoldInt32(int32, func(int) int32) int32
	FoldInt32F(func(error) int32, func(int) int32) int32

	MapInt64(func(int) int64) ResultInt64
	FoldInt64(int64, func(int) int64) int64
	FoldInt64F(func(error) int64, func(int) int64) int64

	MapInt8(func(int) int8) ResultInt8
	FoldInt8(int8, func(int) int8) int8
	FoldInt8F(func(error) int8, func(int) int8) int8

	MapRune(func(int) rune) ResultRune
	FoldRune(rune, func(int) rune) rune
	FoldRuneF(func(error) rune, func(int) rune) rune

	MapString(func(int) string) ResultString
	FoldString(string, func(int) string) string
	FoldStringF(func(error) string, func(int) string) string

	MapUInt(func(int) uint) ResultUInt
	FoldUInt(uint, func(int) uint) uint
	FoldUIntF(func(error) uint, func(int) uint) uint

	MapUInt16(func(int) uint16) ResultUInt16
	FoldUInt16(uint16, func(int) uint16) uint16
	FoldUInt16F(func(error) uint16, func(int) uint16) uint16

	MapUInt32(func(int) uint32) ResultUInt32
	FoldUInt32(uint32, func(int) uint32) uint32
	FoldUInt32F(func(error) uint32, func(int) uint32) uint32

	MapUInt64(func(int) uint64) ResultUInt64
	FoldUInt64(uint64, func(int) uint64) uint64
	FoldUInt64F(func(error) uint64, func(int) uint64) uint64

	MapUInt8(func(int) uint8) ResultUInt8
	FoldUInt8(uint8, func(int) uint8) uint8
	FoldUInt8F(func(error) uint8, func(int) uint8) uint8

	MapUintPtr(func(int) uintptr) ResultUintPtr
	FoldUintPtr(uintptr, func(int) uintptr) uintptr
	FoldUintPtrF(func(error) uintptr, func(int) uintptr) uintptr
 
}

// ResultInt16
type ResultInt16 interface {
	Map(func(int16))
	FoldF(func(error), func(int16))

	MapBool(func(int16) bool) ResultBool
	FoldBool(bool, func(int16) bool) bool
	FoldBoolF(func(error) bool, func(int16) bool) bool

	MapByte(func(int16) byte) ResultByte
	FoldByte(byte, func(int16) byte) byte
	FoldByteF(func(error) byte, func(int16) byte) byte

	MapComplex128(func(int16) complex128) ResultComplex128
	FoldComplex128(complex128, func(int16) complex128) complex128
	FoldComplex128F(func(error) complex128, func(int16) complex128) complex128

	MapComplex64(func(int16) complex64) ResultComplex64
	FoldComplex64(complex64, func(int16) complex64) complex64
	FoldComplex64F(func(error) complex64, func(int16) complex64) complex64

	MapFloat32(func(int16) float32) ResultFloat32
	FoldFloat32(float32, func(int16) float32) float32
	FoldFloat32F(func(error) float32, func(int16) float32) float32

	MapFloat64(func(int16) float64) ResultFloat64
	FoldFloat64(float64, func(int16) float64) float64
	FoldFloat64F(func(error) float64, func(int16) float64) float64

	MapInt(func(int16) int) ResultInt
	FoldInt(int, func(int16) int) int
	FoldIntF(func(error) int, func(int16) int) int

	MapInt16(func(int16) int16) ResultInt16
	FoldInt16(int16, func(int16) int16) int16
	FoldInt16F(func(error) int16, func(int16) int16) int16

	MapInt32(func(int16) int32) ResultInt32
	FoldInt32(int32, func(int16) int32) int32
	FoldInt32F(func(error) int32, func(int16) int32) int32

	MapInt64(func(int16) int64) ResultInt64
	FoldInt64(int64, func(int16) int64) int64
	FoldInt64F(func(error) int64, func(int16) int64) int64

	MapInt8(func(int16) int8) ResultInt8
	FoldInt8(int8, func(int16) int8) int8
	FoldInt8F(func(error) int8, func(int16) int8) int8

	MapRune(func(int16) rune) ResultRune
	FoldRune(rune, func(int16) rune) rune
	FoldRuneF(func(error) rune, func(int16) rune) rune

	MapString(func(int16) string) ResultString
	FoldString(string, func(int16) string) string
	FoldStringF(func(error) string, func(int16) string) string

	MapUInt(func(int16) uint) ResultUInt
	FoldUInt(uint, func(int16) uint) uint
	FoldUIntF(func(error) uint, func(int16) uint) uint

	MapUInt16(func(int16) uint16) ResultUInt16
	FoldUInt16(uint16, func(int16) uint16) uint16
	FoldUInt16F(func(error) uint16, func(int16) uint16) uint16

	MapUInt32(func(int16) uint32) ResultUInt32
	FoldUInt32(uint32, func(int16) uint32) uint32
	FoldUInt32F(func(error) uint32, func(int16) uint32) uint32

	MapUInt64(func(int16) uint64) ResultUInt64
	FoldUInt64(uint64, func(int16) uint64) uint64
	FoldUInt64F(func(error) uint64, func(int16) uint64) uint64

	MapUInt8(func(int16) uint8) ResultUInt8
	FoldUInt8(uint8, func(int16) uint8) uint8
	FoldUInt8F(func(error) uint8, func(int16) uint8) uint8

	MapUintPtr(func(int16) uintptr) ResultUintPtr
	FoldUintPtr(uintptr, func(int16) uintptr) uintptr
	FoldUintPtrF(func(error) uintptr, func(int16) uintptr) uintptr
 
}

// ResultInt32
type ResultInt32 interface {
	Map(func(int32))
	FoldF(func(error), func(int32))

	MapBool(func(int32) bool) ResultBool
	FoldBool(bool, func(int32) bool) bool
	FoldBoolF(func(error) bool, func(int32) bool) bool

	MapByte(func(int32) byte) ResultByte
	FoldByte(byte, func(int32) byte) byte
	FoldByteF(func(error) byte, func(int32) byte) byte

	MapComplex128(func(int32) complex128) ResultComplex128
	FoldComplex128(complex128, func(int32) complex128) complex128
	FoldComplex128F(func(error) complex128, func(int32) complex128) complex128

	MapComplex64(func(int32) complex64) ResultComplex64
	FoldComplex64(complex64, func(int32) complex64) complex64
	FoldComplex64F(func(error) complex64, func(int32) complex64) complex64

	MapFloat32(func(int32) float32) ResultFloat32
	FoldFloat32(float32, func(int32) float32) float32
	FoldFloat32F(func(error) float32, func(int32) float32) float32

	MapFloat64(func(int32) float64) ResultFloat64
	FoldFloat64(float64, func(int32) float64) float64
	FoldFloat64F(func(error) float64, func(int32) float64) float64

	MapInt(func(int32) int) ResultInt
	FoldInt(int, func(int32) int) int
	FoldIntF(func(error) int, func(int32) int) int

	MapInt16(func(int32) int16) ResultInt16
	FoldInt16(int16, func(int32) int16) int16
	FoldInt16F(func(error) int16, func(int32) int16) int16

	MapInt32(func(int32) int32) ResultInt32
	FoldInt32(int32, func(int32) int32) int32
	FoldInt32F(func(error) int32, func(int32) int32) int32

	MapInt64(func(int32) int64) ResultInt64
	FoldInt64(int64, func(int32) int64) int64
	FoldInt64F(func(error) int64, func(int32) int64) int64

	MapInt8(func(int32) int8) ResultInt8
	FoldInt8(int8, func(int32) int8) int8
	FoldInt8F(func(error) int8, func(int32) int8) int8

	MapRune(func(int32) rune) ResultRune
	FoldRune(rune, func(int32) rune) rune
	FoldRuneF(func(error) rune, func(int32) rune) rune

	MapString(func(int32) string) ResultString
	FoldString(string, func(int32) string) string
	FoldStringF(func(error) string, func(int32) string) string

	MapUInt(func(int32) uint) ResultUInt
	FoldUInt(uint, func(int32) uint) uint
	FoldUIntF(func(error) uint, func(int32) uint) uint

	MapUInt16(func(int32) uint16) ResultUInt16
	FoldUInt16(uint16, func(int32) uint16) uint16
	FoldUInt16F(func(error) uint16, func(int32) uint16) uint16

	MapUInt32(func(int32) uint32) ResultUInt32
	FoldUInt32(uint32, func(int32) uint32) uint32
	FoldUInt32F(func(error) uint32, func(int32) uint32) uint32

	MapUInt64(func(int32) uint64) ResultUInt64
	FoldUInt64(uint64, func(int32) uint64) uint64
	FoldUInt64F(func(error) uint64, func(int32) uint64) uint64

	MapUInt8(func(int32) uint8) ResultUInt8
	FoldUInt8(uint8, func(int32) uint8) uint8
	FoldUInt8F(func(error) uint8, func(int32) uint8) uint8

	MapUintPtr(func(int32) uintptr) ResultUintPtr
	FoldUintPtr(uintptr, func(int32) uintptr) uintptr
	FoldUintPtrF(func(error) uintptr, func(int32) uintptr) uintptr
 
}

// ResultInt64
type ResultInt64 interface {
	Map(func(int64))
	FoldF(func(error), func(int64))

	MapBool(func(int64) bool) ResultBool
	FoldBool(bool, func(int64) bool) bool
	FoldBoolF(func(error) bool, func(int64) bool) bool

	MapByte(func(int64) byte) ResultByte
	FoldByte(byte, func(int64) byte) byte
	FoldByteF(func(error) byte, func(int64) byte) byte

	MapComplex128(func(int64) complex128) ResultComplex128
	FoldComplex128(complex128, func(int64) complex128) complex128
	FoldComplex128F(func(error) complex128, func(int64) complex128) complex128

	MapComplex64(func(int64) complex64) ResultComplex64
	FoldComplex64(complex64, func(int64) complex64) complex64
	FoldComplex64F(func(error) complex64, func(int64) complex64) complex64

	MapFloat32(func(int64) float32) ResultFloat32
	FoldFloat32(float32, func(int64) float32) float32
	FoldFloat32F(func(error) float32, func(int64) float32) float32

	MapFloat64(func(int64) float64) ResultFloat64
	FoldFloat64(float64, func(int64) float64) float64
	FoldFloat64F(func(error) float64, func(int64) float64) float64

	MapInt(func(int64) int) ResultInt
	FoldInt(int, func(int64) int) int
	FoldIntF(func(error) int, func(int64) int) int

	MapInt16(func(int64) int16) ResultInt16
	FoldInt16(int16, func(int64) int16) int16
	FoldInt16F(func(error) int16, func(int64) int16) int16

	MapInt32(func(int64) int32) ResultInt32
	FoldInt32(int32, func(int64) int32) int32
	FoldInt32F(func(error) int32, func(int64) int32) int32

	MapInt64(func(int64) int64) ResultInt64
	FoldInt64(int64, func(int64) int64) int64
	FoldInt64F(func(error) int64, func(int64) int64) int64

	MapInt8(func(int64) int8) ResultInt8
	FoldInt8(int8, func(int64) int8) int8
	FoldInt8F(func(error) int8, func(int64) int8) int8

	MapRune(func(int64) rune) ResultRune
	FoldRune(rune, func(int64) rune) rune
	FoldRuneF(func(error) rune, func(int64) rune) rune

	MapString(func(int64) string) ResultString
	FoldString(string, func(int64) string) string
	FoldStringF(func(error) string, func(int64) string) string

	MapUInt(func(int64) uint) ResultUInt
	FoldUInt(uint, func(int64) uint) uint
	FoldUIntF(func(error) uint, func(int64) uint) uint

	MapUInt16(func(int64) uint16) ResultUInt16
	FoldUInt16(uint16, func(int64) uint16) uint16
	FoldUInt16F(func(error) uint16, func(int64) uint16) uint16

	MapUInt32(func(int64) uint32) ResultUInt32
	FoldUInt32(uint32, func(int64) uint32) uint32
	FoldUInt32F(func(error) uint32, func(int64) uint32) uint32

	MapUInt64(func(int64) uint64) ResultUInt64
	FoldUInt64(uint64, func(int64) uint64) uint64
	FoldUInt64F(func(error) uint64, func(int64) uint64) uint64

	MapUInt8(func(int64) uint8) ResultUInt8
	FoldUInt8(uint8, func(int64) uint8) uint8
	FoldUInt8F(func(error) uint8, func(int64) uint8) uint8

	MapUintPtr(func(int64) uintptr) ResultUintPtr
	FoldUintPtr(uintptr, func(int64) uintptr) uintptr
	FoldUintPtrF(func(error) uintptr, func(int64) uintptr) uintptr
 
}

// ResultInt8
type ResultInt8 interface {
	Map(func(int8))
	FoldF(func(error), func(int8))

	MapBool(func(int8) bool) ResultBool
	FoldBool(bool, func(int8) bool) bool
	FoldBoolF(func(error) bool, func(int8) bool) bool

	MapByte(func(int8) byte) ResultByte
	FoldByte(byte, func(int8) byte) byte
	FoldByteF(func(error) byte, func(int8) byte) byte

	MapComplex128(func(int8) complex128) ResultComplex128
	FoldComplex128(complex128, func(int8) complex128) complex128
	FoldComplex128F(func(error) complex128, func(int8) complex128) complex128

	MapComplex64(func(int8) complex64) ResultComplex64
	FoldComplex64(complex64, func(int8) complex64) complex64
	FoldComplex64F(func(error) complex64, func(int8) complex64) complex64

	MapFloat32(func(int8) float32) ResultFloat32
	FoldFloat32(float32, func(int8) float32) float32
	FoldFloat32F(func(error) float32, func(int8) float32) float32

	MapFloat64(func(int8) float64) ResultFloat64
	FoldFloat64(float64, func(int8) float64) float64
	FoldFloat64F(func(error) float64, func(int8) float64) float64

	MapInt(func(int8) int) ResultInt
	FoldInt(int, func(int8) int) int
	FoldIntF(func(error) int, func(int8) int) int

	MapInt16(func(int8) int16) ResultInt16
	FoldInt16(int16, func(int8) int16) int16
	FoldInt16F(func(error) int16, func(int8) int16) int16

	MapInt32(func(int8) int32) ResultInt32
	FoldInt32(int32, func(int8) int32) int32
	FoldInt32F(func(error) int32, func(int8) int32) int32

	MapInt64(func(int8) int64) ResultInt64
	FoldInt64(int64, func(int8) int64) int64
	FoldInt64F(func(error) int64, func(int8) int64) int64

	MapInt8(func(int8) int8) ResultInt8
	FoldInt8(int8, func(int8) int8) int8
	FoldInt8F(func(error) int8, func(int8) int8) int8

	MapRune(func(int8) rune) ResultRune
	FoldRune(rune, func(int8) rune) rune
	FoldRuneF(func(error) rune, func(int8) rune) rune

	MapString(func(int8) string) ResultString
	FoldString(string, func(int8) string) string
	FoldStringF(func(error) string, func(int8) string) string

	MapUInt(func(int8) uint) ResultUInt
	FoldUInt(uint, func(int8) uint) uint
	FoldUIntF(func(error) uint, func(int8) uint) uint

	MapUInt16(func(int8) uint16) ResultUInt16
	FoldUInt16(uint16, func(int8) uint16) uint16
	FoldUInt16F(func(error) uint16, func(int8) uint16) uint16

	MapUInt32(func(int8) uint32) ResultUInt32
	FoldUInt32(uint32, func(int8) uint32) uint32
	FoldUInt32F(func(error) uint32, func(int8) uint32) uint32

	MapUInt64(func(int8) uint64) ResultUInt64
	FoldUInt64(uint64, func(int8) uint64) uint64
	FoldUInt64F(func(error) uint64, func(int8) uint64) uint64

	MapUInt8(func(int8) uint8) ResultUInt8
	FoldUInt8(uint8, func(int8) uint8) uint8
	FoldUInt8F(func(error) uint8, func(int8) uint8) uint8

	MapUintPtr(func(int8) uintptr) ResultUintPtr
	FoldUintPtr(uintptr, func(int8) uintptr) uintptr
	FoldUintPtrF(func(error) uintptr, func(int8) uintptr) uintptr
 
}

// ResultRune
type ResultRune interface {
	Map(func(rune))
	FoldF(func(error), func(rune))

	MapBool(func(rune) bool) ResultBool
	FoldBool(bool, func(rune) bool) bool
	FoldBoolF(func(error) bool, func(rune) bool) bool

	MapByte(func(rune) byte) ResultByte
	FoldByte(byte, func(rune) byte) byte
	FoldByteF(func(error) byte, func(rune) byte) byte

	MapComplex128(func(rune) complex128) ResultComplex128
	FoldComplex128(complex128, func(rune) complex128) complex128
	FoldComplex128F(func(error) complex128, func(rune) complex128) complex128

	MapComplex64(func(rune) complex64) ResultComplex64
	FoldComplex64(complex64, func(rune) complex64) complex64
	FoldComplex64F(func(error) complex64, func(rune) complex64) complex64

	MapFloat32(func(rune) float32) ResultFloat32
	FoldFloat32(float32, func(rune) float32) float32
	FoldFloat32F(func(error) float32, func(rune) float32) float32

	MapFloat64(func(rune) float64) ResultFloat64
	FoldFloat64(float64, func(rune) float64) float64
	FoldFloat64F(func(error) float64, func(rune) float64) float64

	MapInt(func(rune) int) ResultInt
	FoldInt(int, func(rune) int) int
	FoldIntF(func(error) int, func(rune) int) int

	MapInt16(func(rune) int16) ResultInt16
	FoldInt16(int16, func(rune) int16) int16
	FoldInt16F(func(error) int16, func(rune) int16) int16

	MapInt32(func(rune) int32) ResultInt32
	FoldInt32(int32, func(rune) int32) int32
	FoldInt32F(func(error) int32, func(rune) int32) int32

	MapInt64(func(rune) int64) ResultInt64
	FoldInt64(int64, func(rune) int64) int64
	FoldInt64F(func(error) int64, func(rune) int64) int64

	MapInt8(func(rune) int8) ResultInt8
	FoldInt8(int8, func(rune) int8) int8
	FoldInt8F(func(error) int8, func(rune) int8) int8

	MapRune(func(rune) rune) ResultRune
	FoldRune(rune, func(rune) rune) rune
	FoldRuneF(func(error) rune, func(rune) rune) rune

	MapString(func(rune) string) ResultString
	FoldString(string, func(rune) string) string
	FoldStringF(func(error) string, func(rune) string) string

	MapUInt(func(rune) uint) ResultUInt
	FoldUInt(uint, func(rune) uint) uint
	FoldUIntF(func(error) uint, func(rune) uint) uint

	MapUInt16(func(rune) uint16) ResultUInt16
	FoldUInt16(uint16, func(rune) uint16) uint16
	FoldUInt16F(func(error) uint16, func(rune) uint16) uint16

	MapUInt32(func(rune) uint32) ResultUInt32
	FoldUInt32(uint32, func(rune) uint32) uint32
	FoldUInt32F(func(error) uint32, func(rune) uint32) uint32

	MapUInt64(func(rune) uint64) ResultUInt64
	FoldUInt64(uint64, func(rune) uint64) uint64
	FoldUInt64F(func(error) uint64, func(rune) uint64) uint64

	MapUInt8(func(rune) uint8) ResultUInt8
	FoldUInt8(uint8, func(rune) uint8) uint8
	FoldUInt8F(func(error) uint8, func(rune) uint8) uint8

	MapUintPtr(func(rune) uintptr) ResultUintPtr
	FoldUintPtr(uintptr, func(rune) uintptr) uintptr
	FoldUintPtrF(func(error) uintptr, func(rune) uintptr) uintptr
 
}

// ResultString
type ResultString interface {
	Map(func(string))
	FoldF(func(error), func(string))

	MapBool(func(string) bool) ResultBool
	FoldBool(bool, func(string) bool) bool
	FoldBoolF(func(error) bool, func(string) bool) bool

	MapByte(func(string) byte) ResultByte
	FoldByte(byte, func(string) byte) byte
	FoldByteF(func(error) byte, func(string) byte) byte

	MapComplex128(func(string) complex128) ResultComplex128
	FoldComplex128(complex128, func(string) complex128) complex128
	FoldComplex128F(func(error) complex128, func(string) complex128) complex128

	MapComplex64(func(string) complex64) ResultComplex64
	FoldComplex64(complex64, func(string) complex64) complex64
	FoldComplex64F(func(error) complex64, func(string) complex64) complex64

	MapFloat32(func(string) float32) ResultFloat32
	FoldFloat32(float32, func(string) float32) float32
	FoldFloat32F(func(error) float32, func(string) float32) float32

	MapFloat64(func(string) float64) ResultFloat64
	FoldFloat64(float64, func(string) float64) float64
	FoldFloat64F(func(error) float64, func(string) float64) float64

	MapInt(func(string) int) ResultInt
	FoldInt(int, func(string) int) int
	FoldIntF(func(error) int, func(string) int) int

	MapInt16(func(string) int16) ResultInt16
	FoldInt16(int16, func(string) int16) int16
	FoldInt16F(func(error) int16, func(string) int16) int16

	MapInt32(func(string) int32) ResultInt32
	FoldInt32(int32, func(string) int32) int32
	FoldInt32F(func(error) int32, func(string) int32) int32

	MapInt64(func(string) int64) ResultInt64
	FoldInt64(int64, func(string) int64) int64
	FoldInt64F(func(error) int64, func(string) int64) int64

	MapInt8(func(string) int8) ResultInt8
	FoldInt8(int8, func(string) int8) int8
	FoldInt8F(func(error) int8, func(string) int8) int8

	MapRune(func(string) rune) ResultRune
	FoldRune(rune, func(string) rune) rune
	FoldRuneF(func(error) rune, func(string) rune) rune

	MapString(func(string) string) ResultString
	FoldString(string, func(string) string) string
	FoldStringF(func(error) string, func(string) string) string

	MapUInt(func(string) uint) ResultUInt
	FoldUInt(uint, func(string) uint) uint
	FoldUIntF(func(error) uint, func(string) uint) uint

	MapUInt16(func(string) uint16) ResultUInt16
	FoldUInt16(uint16, func(string) uint16) uint16
	FoldUInt16F(func(error) uint16, func(string) uint16) uint16

	MapUInt32(func(string) uint32) ResultUInt32
	FoldUInt32(uint32, func(string) uint32) uint32
	FoldUInt32F(func(error) uint32, func(string) uint32) uint32

	MapUInt64(func(string) uint64) ResultUInt64
	FoldUInt64(uint64, func(string) uint64) uint64
	FoldUInt64F(func(error) uint64, func(string) uint64) uint64

	MapUInt8(func(string) uint8) ResultUInt8
	FoldUInt8(uint8, func(string) uint8) uint8
	FoldUInt8F(func(error) uint8, func(string) uint8) uint8

	MapUintPtr(func(string) uintptr) ResultUintPtr
	FoldUintPtr(uintptr, func(string) uintptr) uintptr
	FoldUintPtrF(func(error) uintptr, func(string) uintptr) uintptr
 
}

// ResultUInt
type ResultUInt interface {
	Map(func(uint))
	FoldF(func(error), func(uint))

	MapBool(func(uint) bool) ResultBool
	FoldBool(bool, func(uint) bool) bool
	FoldBoolF(func(error) bool, func(uint) bool) bool

	MapByte(func(uint) byte) ResultByte
	FoldByte(byte, func(uint) byte) byte
	FoldByteF(func(error) byte, func(uint) byte) byte

	MapComplex128(func(uint) complex128) ResultComplex128
	FoldComplex128(complex128, func(uint) complex128) complex128
	FoldComplex128F(func(error) complex128, func(uint) complex128) complex128

	MapComplex64(func(uint) complex64) ResultComplex64
	FoldComplex64(complex64, func(uint) complex64) complex64
	FoldComplex64F(func(error) complex64, func(uint) complex64) complex64

	MapFloat32(func(uint) float32) ResultFloat32
	FoldFloat32(float32, func(uint) float32) float32
	FoldFloat32F(func(error) float32, func(uint) float32) float32

	MapFloat64(func(uint) float64) ResultFloat64
	FoldFloat64(float64, func(uint) float64) float64
	FoldFloat64F(func(error) float64, func(uint) float64) float64

	MapInt(func(uint) int) ResultInt
	FoldInt(int, func(uint) int) int
	FoldIntF(func(error) int, func(uint) int) int

	MapInt16(func(uint) int16) ResultInt16
	FoldInt16(int16, func(uint) int16) int16
	FoldInt16F(func(error) int16, func(uint) int16) int16

	MapInt32(func(uint) int32) ResultInt32
	FoldInt32(int32, func(uint) int32) int32
	FoldInt32F(func(error) int32, func(uint) int32) int32

	MapInt64(func(uint) int64) ResultInt64
	FoldInt64(int64, func(uint) int64) int64
	FoldInt64F(func(error) int64, func(uint) int64) int64

	MapInt8(func(uint) int8) ResultInt8
	FoldInt8(int8, func(uint) int8) int8
	FoldInt8F(func(error) int8, func(uint) int8) int8

	MapRune(func(uint) rune) ResultRune
	FoldRune(rune, func(uint) rune) rune
	FoldRuneF(func(error) rune, func(uint) rune) rune

	MapString(func(uint) string) ResultString
	FoldString(string, func(uint) string) string
	FoldStringF(func(error) string, func(uint) string) string

	MapUInt(func(uint) uint) ResultUInt
	FoldUInt(uint, func(uint) uint) uint
	FoldUIntF(func(error) uint, func(uint) uint) uint

	MapUInt16(func(uint) uint16) ResultUInt16
	FoldUInt16(uint16, func(uint) uint16) uint16
	FoldUInt16F(func(error) uint16, func(uint) uint16) uint16

	MapUInt32(func(uint) uint32) ResultUInt32
	FoldUInt32(uint32, func(uint) uint32) uint32
	FoldUInt32F(func(error) uint32, func(uint) uint32) uint32

	MapUInt64(func(uint) uint64) ResultUInt64
	FoldUInt64(uint64, func(uint) uint64) uint64
	FoldUInt64F(func(error) uint64, func(uint) uint64) uint64

	MapUInt8(func(uint) uint8) ResultUInt8
	FoldUInt8(uint8, func(uint) uint8) uint8
	FoldUInt8F(func(error) uint8, func(uint) uint8) uint8

	MapUintPtr(func(uint) uintptr) ResultUintPtr
	FoldUintPtr(uintptr, func(uint) uintptr) uintptr
	FoldUintPtrF(func(error) uintptr, func(uint) uintptr) uintptr
 
}

// ResultUInt16
type ResultUInt16 interface {
	Map(func(uint16))
	FoldF(func(error), func(uint16))

	MapBool(func(uint16) bool) ResultBool
	FoldBool(bool, func(uint16) bool) bool
	FoldBoolF(func(error) bool, func(uint16) bool) bool

	MapByte(func(uint16) byte) ResultByte
	FoldByte(byte, func(uint16) byte) byte
	FoldByteF(func(error) byte, func(uint16) byte) byte

	MapComplex128(func(uint16) complex128) ResultComplex128
	FoldComplex128(complex128, func(uint16) complex128) complex128
	FoldComplex128F(func(error) complex128, func(uint16) complex128) complex128

	MapComplex64(func(uint16) complex64) ResultComplex64
	FoldComplex64(complex64, func(uint16) complex64) complex64
	FoldComplex64F(func(error) complex64, func(uint16) complex64) complex64

	MapFloat32(func(uint16) float32) ResultFloat32
	FoldFloat32(float32, func(uint16) float32) float32
	FoldFloat32F(func(error) float32, func(uint16) float32) float32

	MapFloat64(func(uint16) float64) ResultFloat64
	FoldFloat64(float64, func(uint16) float64) float64
	FoldFloat64F(func(error) float64, func(uint16) float64) float64

	MapInt(func(uint16) int) ResultInt
	FoldInt(int, func(uint16) int) int
	FoldIntF(func(error) int, func(uint16) int) int

	MapInt16(func(uint16) int16) ResultInt16
	FoldInt16(int16, func(uint16) int16) int16
	FoldInt16F(func(error) int16, func(uint16) int16) int16

	MapInt32(func(uint16) int32) ResultInt32
	FoldInt32(int32, func(uint16) int32) int32
	FoldInt32F(func(error) int32, func(uint16) int32) int32

	MapInt64(func(uint16) int64) ResultInt64
	FoldInt64(int64, func(uint16) int64) int64
	FoldInt64F(func(error) int64, func(uint16) int64) int64

	MapInt8(func(uint16) int8) ResultInt8
	FoldInt8(int8, func(uint16) int8) int8
	FoldInt8F(func(error) int8, func(uint16) int8) int8

	MapRune(func(uint16) rune) ResultRune
	FoldRune(rune, func(uint16) rune) rune
	FoldRuneF(func(error) rune, func(uint16) rune) rune

	MapString(func(uint16) string) ResultString
	FoldString(string, func(uint16) string) string
	FoldStringF(func(error) string, func(uint16) string) string

	MapUInt(func(uint16) uint) ResultUInt
	FoldUInt(uint, func(uint16) uint) uint
	FoldUIntF(func(error) uint, func(uint16) uint) uint

	MapUInt16(func(uint16) uint16) ResultUInt16
	FoldUInt16(uint16, func(uint16) uint16) uint16
	FoldUInt16F(func(error) uint16, func(uint16) uint16) uint16

	MapUInt32(func(uint16) uint32) ResultUInt32
	FoldUInt32(uint32, func(uint16) uint32) uint32
	FoldUInt32F(func(error) uint32, func(uint16) uint32) uint32

	MapUInt64(func(uint16) uint64) ResultUInt64
	FoldUInt64(uint64, func(uint16) uint64) uint64
	FoldUInt64F(func(error) uint64, func(uint16) uint64) uint64

	MapUInt8(func(uint16) uint8) ResultUInt8
	FoldUInt8(uint8, func(uint16) uint8) uint8
	FoldUInt8F(func(error) uint8, func(uint16) uint8) uint8

	MapUintPtr(func(uint16) uintptr) ResultUintPtr
	FoldUintPtr(uintptr, func(uint16) uintptr) uintptr
	FoldUintPtrF(func(error) uintptr, func(uint16) uintptr) uintptr
 
}

// ResultUInt32
type ResultUInt32 interface {
	Map(func(uint32))
	FoldF(func(error), func(uint32))

	MapBool(func(uint32) bool) ResultBool
	FoldBool(bool, func(uint32) bool) bool
	FoldBoolF(func(error) bool, func(uint32) bool) bool

	MapByte(func(uint32) byte) ResultByte
	FoldByte(byte, func(uint32) byte) byte
	FoldByteF(func(error) byte, func(uint32) byte) byte

	MapComplex128(func(uint32) complex128) ResultComplex128
	FoldComplex128(complex128, func(uint32) complex128) complex128
	FoldComplex128F(func(error) complex128, func(uint32) complex128) complex128

	MapComplex64(func(uint32) complex64) ResultComplex64
	FoldComplex64(complex64, func(uint32) complex64) complex64
	FoldComplex64F(func(error) complex64, func(uint32) complex64) complex64

	MapFloat32(func(uint32) float32) ResultFloat32
	FoldFloat32(float32, func(uint32) float32) float32
	FoldFloat32F(func(error) float32, func(uint32) float32) float32

	MapFloat64(func(uint32) float64) ResultFloat64
	FoldFloat64(float64, func(uint32) float64) float64
	FoldFloat64F(func(error) float64, func(uint32) float64) float64

	MapInt(func(uint32) int) ResultInt
	FoldInt(int, func(uint32) int) int
	FoldIntF(func(error) int, func(uint32) int) int

	MapInt16(func(uint32) int16) ResultInt16
	FoldInt16(int16, func(uint32) int16) int16
	FoldInt16F(func(error) int16, func(uint32) int16) int16

	MapInt32(func(uint32) int32) ResultInt32
	FoldInt32(int32, func(uint32) int32) int32
	FoldInt32F(func(error) int32, func(uint32) int32) int32

	MapInt64(func(uint32) int64) ResultInt64
	FoldInt64(int64, func(uint32) int64) int64
	FoldInt64F(func(error) int64, func(uint32) int64) int64

	MapInt8(func(uint32) int8) ResultInt8
	FoldInt8(int8, func(uint32) int8) int8
	FoldInt8F(func(error) int8, func(uint32) int8) int8

	MapRune(func(uint32) rune) ResultRune
	FoldRune(rune, func(uint32) rune) rune
	FoldRuneF(func(error) rune, func(uint32) rune) rune

	MapString(func(uint32) string) ResultString
	FoldString(string, func(uint32) string) string
	FoldStringF(func(error) string, func(uint32) string) string

	MapUInt(func(uint32) uint) ResultUInt
	FoldUInt(uint, func(uint32) uint) uint
	FoldUIntF(func(error) uint, func(uint32) uint) uint

	MapUInt16(func(uint32) uint16) ResultUInt16
	FoldUInt16(uint16, func(uint32) uint16) uint16
	FoldUInt16F(func(error) uint16, func(uint32) uint16) uint16

	MapUInt32(func(uint32) uint32) ResultUInt32
	FoldUInt32(uint32, func(uint32) uint32) uint32
	FoldUInt32F(func(error) uint32, func(uint32) uint32) uint32

	MapUInt64(func(uint32) uint64) ResultUInt64
	FoldUInt64(uint64, func(uint32) uint64) uint64
	FoldUInt64F(func(error) uint64, func(uint32) uint64) uint64

	MapUInt8(func(uint32) uint8) ResultUInt8
	FoldUInt8(uint8, func(uint32) uint8) uint8
	FoldUInt8F(func(error) uint8, func(uint32) uint8) uint8

	MapUintPtr(func(uint32) uintptr) ResultUintPtr
	FoldUintPtr(uintptr, func(uint32) uintptr) uintptr
	FoldUintPtrF(func(error) uintptr, func(uint32) uintptr) uintptr
 
}

// ResultUInt64
type ResultUInt64 interface {
	Map(func(uint64))
	FoldF(func(error), func(uint64))

	MapBool(func(uint64) bool) ResultBool
	FoldBool(bool, func(uint64) bool) bool
	FoldBoolF(func(error) bool, func(uint64) bool) bool

	MapByte(func(uint64) byte) ResultByte
	FoldByte(byte, func(uint64) byte) byte
	FoldByteF(func(error) byte, func(uint64) byte) byte

	MapComplex128(func(uint64) complex128) ResultComplex128
	FoldComplex128(complex128, func(uint64) complex128) complex128
	FoldComplex128F(func(error) complex128, func(uint64) complex128) complex128

	MapComplex64(func(uint64) complex64) ResultComplex64
	FoldComplex64(complex64, func(uint64) complex64) complex64
	FoldComplex64F(func(error) complex64, func(uint64) complex64) complex64

	MapFloat32(func(uint64) float32) ResultFloat32
	FoldFloat32(float32, func(uint64) float32) float32
	FoldFloat32F(func(error) float32, func(uint64) float32) float32

	MapFloat64(func(uint64) float64) ResultFloat64
	FoldFloat64(float64, func(uint64) float64) float64
	FoldFloat64F(func(error) float64, func(uint64) float64) float64

	MapInt(func(uint64) int) ResultInt
	FoldInt(int, func(uint64) int) int
	FoldIntF(func(error) int, func(uint64) int) int

	MapInt16(func(uint64) int16) ResultInt16
	FoldInt16(int16, func(uint64) int16) int16
	FoldInt16F(func(error) int16, func(uint64) int16) int16

	MapInt32(func(uint64) int32) ResultInt32
	FoldInt32(int32, func(uint64) int32) int32
	FoldInt32F(func(error) int32, func(uint64) int32) int32

	MapInt64(func(uint64) int64) ResultInt64
	FoldInt64(int64, func(uint64) int64) int64
	FoldInt64F(func(error) int64, func(uint64) int64) int64

	MapInt8(func(uint64) int8) ResultInt8
	FoldInt8(int8, func(uint64) int8) int8
	FoldInt8F(func(error) int8, func(uint64) int8) int8

	MapRune(func(uint64) rune) ResultRune
	FoldRune(rune, func(uint64) rune) rune
	FoldRuneF(func(error) rune, func(uint64) rune) rune

	MapString(func(uint64) string) ResultString
	FoldString(string, func(uint64) string) string
	FoldStringF(func(error) string, func(uint64) string) string

	MapUInt(func(uint64) uint) ResultUInt
	FoldUInt(uint, func(uint64) uint) uint
	FoldUIntF(func(error) uint, func(uint64) uint) uint

	MapUInt16(func(uint64) uint16) ResultUInt16
	FoldUInt16(uint16, func(uint64) uint16) uint16
	FoldUInt16F(func(error) uint16, func(uint64) uint16) uint16

	MapUInt32(func(uint64) uint32) ResultUInt32
	FoldUInt32(uint32, func(uint64) uint32) uint32
	FoldUInt32F(func(error) uint32, func(uint64) uint32) uint32

	MapUInt64(func(uint64) uint64) ResultUInt64
	FoldUInt64(uint64, func(uint64) uint64) uint64
	FoldUInt64F(func(error) uint64, func(uint64) uint64) uint64

	MapUInt8(func(uint64) uint8) ResultUInt8
	FoldUInt8(uint8, func(uint64) uint8) uint8
	FoldUInt8F(func(error) uint8, func(uint64) uint8) uint8

	MapUintPtr(func(uint64) uintptr) ResultUintPtr
	FoldUintPtr(uintptr, func(uint64) uintptr) uintptr
	FoldUintPtrF(func(error) uintptr, func(uint64) uintptr) uintptr
 
}

// ResultUInt8
type ResultUInt8 interface {
	Map(func(uint8))
	FoldF(func(error), func(uint8))

	MapBool(func(uint8) bool) ResultBool
	FoldBool(bool, func(uint8) bool) bool
	FoldBoolF(func(error) bool, func(uint8) bool) bool

	MapByte(func(uint8) byte) ResultByte
	FoldByte(byte, func(uint8) byte) byte
	FoldByteF(func(error) byte, func(uint8) byte) byte

	MapComplex128(func(uint8) complex128) ResultComplex128
	FoldComplex128(complex128, func(uint8) complex128) complex128
	FoldComplex128F(func(error) complex128, func(uint8) complex128) complex128

	MapComplex64(func(uint8) complex64) ResultComplex64
	FoldComplex64(complex64, func(uint8) complex64) complex64
	FoldComplex64F(func(error) complex64, func(uint8) complex64) complex64

	MapFloat32(func(uint8) float32) ResultFloat32
	FoldFloat32(float32, func(uint8) float32) float32
	FoldFloat32F(func(error) float32, func(uint8) float32) float32

	MapFloat64(func(uint8) float64) ResultFloat64
	FoldFloat64(float64, func(uint8) float64) float64
	FoldFloat64F(func(error) float64, func(uint8) float64) float64

	MapInt(func(uint8) int) ResultInt
	FoldInt(int, func(uint8) int) int
	FoldIntF(func(error) int, func(uint8) int) int

	MapInt16(func(uint8) int16) ResultInt16
	FoldInt16(int16, func(uint8) int16) int16
	FoldInt16F(func(error) int16, func(uint8) int16) int16

	MapInt32(func(uint8) int32) ResultInt32
	FoldInt32(int32, func(uint8) int32) int32
	FoldInt32F(func(error) int32, func(uint8) int32) int32

	MapInt64(func(uint8) int64) ResultInt64
	FoldInt64(int64, func(uint8) int64) int64
	FoldInt64F(func(error) int64, func(uint8) int64) int64

	MapInt8(func(uint8) int8) ResultInt8
	FoldInt8(int8, func(uint8) int8) int8
	FoldInt8F(func(error) int8, func(uint8) int8) int8

	MapRune(func(uint8) rune) ResultRune
	FoldRune(rune, func(uint8) rune) rune
	FoldRuneF(func(error) rune, func(uint8) rune) rune

	MapString(func(uint8) string) ResultString
	FoldString(string, func(uint8) string) string
	FoldStringF(func(error) string, func(uint8) string) string

	MapUInt(func(uint8) uint) ResultUInt
	FoldUInt(uint, func(uint8) uint) uint
	FoldUIntF(func(error) uint, func(uint8) uint) uint

	MapUInt16(func(uint8) uint16) ResultUInt16
	FoldUInt16(uint16, func(uint8) uint16) uint16
	FoldUInt16F(func(error) uint16, func(uint8) uint16) uint16

	MapUInt32(func(uint8) uint32) ResultUInt32
	FoldUInt32(uint32, func(uint8) uint32) uint32
	FoldUInt32F(func(error) uint32, func(uint8) uint32) uint32

	MapUInt64(func(uint8) uint64) ResultUInt64
	FoldUInt64(uint64, func(uint8) uint64) uint64
	FoldUInt64F(func(error) uint64, func(uint8) uint64) uint64

	MapUInt8(func(uint8) uint8) ResultUInt8
	FoldUInt8(uint8, func(uint8) uint8) uint8
	FoldUInt8F(func(error) uint8, func(uint8) uint8) uint8

	MapUintPtr(func(uint8) uintptr) ResultUintPtr
	FoldUintPtr(uintptr, func(uint8) uintptr) uintptr
	FoldUintPtrF(func(error) uintptr, func(uint8) uintptr) uintptr
 
}

// ResultUintPtr
type ResultUintPtr interface {
	Map(func(uintptr))
	FoldF(func(error), func(uintptr))

	MapBool(func(uintptr) bool) ResultBool
	FoldBool(bool, func(uintptr) bool) bool
	FoldBoolF(func(error) bool, func(uintptr) bool) bool

	MapByte(func(uintptr) byte) ResultByte
	FoldByte(byte, func(uintptr) byte) byte
	FoldByteF(func(error) byte, func(uintptr) byte) byte

	MapComplex128(func(uintptr) complex128) ResultComplex128
	FoldComplex128(complex128, func(uintptr) complex128) complex128
	FoldComplex128F(func(error) complex128, func(uintptr) complex128) complex128

	MapComplex64(func(uintptr) complex64) ResultComplex64
	FoldComplex64(complex64, func(uintptr) complex64) complex64
	FoldComplex64F(func(error) complex64, func(uintptr) complex64) complex64

	MapFloat32(func(uintptr) float32) ResultFloat32
	FoldFloat32(float32, func(uintptr) float32) float32
	FoldFloat32F(func(error) float32, func(uintptr) float32) float32

	MapFloat64(func(uintptr) float64) ResultFloat64
	FoldFloat64(float64, func(uintptr) float64) float64
	FoldFloat64F(func(error) float64, func(uintptr) float64) float64

	MapInt(func(uintptr) int) ResultInt
	FoldInt(int, func(uintptr) int) int
	FoldIntF(func(error) int, func(uintptr) int) int

	MapInt16(func(uintptr) int16) ResultInt16
	FoldInt16(int16, func(uintptr) int16) int16
	FoldInt16F(func(error) int16, func(uintptr) int16) int16

	MapInt32(func(uintptr) int32) ResultInt32
	FoldInt32(int32, func(uintptr) int32) int32
	FoldInt32F(func(error) int32, func(uintptr) int32) int32

	MapInt64(func(uintptr) int64) ResultInt64
	FoldInt64(int64, func(uintptr) int64) int64
	FoldInt64F(func(error) int64, func(uintptr) int64) int64

	MapInt8(func(uintptr) int8) ResultInt8
	FoldInt8(int8, func(uintptr) int8) int8
	FoldInt8F(func(error) int8, func(uintptr) int8) int8

	MapRune(func(uintptr) rune) ResultRune
	FoldRune(rune, func(uintptr) rune) rune
	FoldRuneF(func(error) rune, func(uintptr) rune) rune

	MapString(func(uintptr) string) ResultString
	FoldString(string, func(uintptr) string) string
	FoldStringF(func(error) string, func(uintptr) string) string

	MapUInt(func(uintptr) uint) ResultUInt
	FoldUInt(uint, func(uintptr) uint) uint
	FoldUIntF(func(error) uint, func(uintptr) uint) uint

	MapUInt16(func(uintptr) uint16) ResultUInt16
	FoldUInt16(uint16, func(uintptr) uint16) uint16
	FoldUInt16F(func(error) uint16, func(uintptr) uint16) uint16

	MapUInt32(func(uintptr) uint32) ResultUInt32
	FoldUInt32(uint32, func(uintptr) uint32) uint32
	FoldUInt32F(func(error) uint32, func(uintptr) uint32) uint32

	MapUInt64(func(uintptr) uint64) ResultUInt64
	FoldUInt64(uint64, func(uintptr) uint64) uint64
	FoldUInt64F(func(error) uint64, func(uintptr) uint64) uint64

	MapUInt8(func(uintptr) uint8) ResultUInt8
	FoldUInt8(uint8, func(uintptr) uint8) uint8
	FoldUInt8F(func(error) uint8, func(uintptr) uint8) uint8

	MapUintPtr(func(uintptr) uintptr) ResultUintPtr
	FoldUintPtr(uintptr, func(uintptr) uintptr) uintptr
	FoldUintPtrF(func(error) uintptr, func(uintptr) uintptr) uintptr
 
}




// ResultBoolFrom builds a result type from a function returning
// (bool, err)
// e.g.: r :=  ResultBoolFrom(myfunc(args))
func ResultBoolFrom(v bool, err error) ResultBool {
	if err != nil {
		return ErrBool(err)
	}
	return OkBool(v)
}

// ResultByteFrom builds a result type from a function returning
// (byte, err)
// e.g.: r :=  ResultByteFrom(myfunc(args))
func ResultByteFrom(v byte, err error) ResultByte {
	if err != nil {
		return ErrByte(err)
	}
	return OkByte(v)
}

// ResultComplex128From builds a result type from a function returning
// (complex128, err)
// e.g.: r :=  ResultComplex128From(myfunc(args))
func ResultComplex128From(v complex128, err error) ResultComplex128 {
	if err != nil {
		return ErrComplex128(err)
	}
	return OkComplex128(v)
}

// ResultComplex64From builds a result type from a function returning
// (complex64, err)
// e.g.: r :=  ResultComplex64From(myfunc(args))
func ResultComplex64From(v complex64, err error) ResultComplex64 {
	if err != nil {
		return ErrComplex64(err)
	}
	return OkComplex64(v)
}

// ResultFloat32From builds a result type from a function returning
// (float32, err)
// e.g.: r :=  ResultFloat32From(myfunc(args))
func ResultFloat32From(v float32, err error) ResultFloat32 {
	if err != nil {
		return ErrFloat32(err)
	}
	return OkFloat32(v)
}

// ResultFloat64From builds a result type from a function returning
// (float64, err)
// e.g.: r :=  ResultFloat64From(myfunc(args))
func ResultFloat64From(v float64, err error) ResultFloat64 {
	if err != nil {
		return ErrFloat64(err)
	}
	return OkFloat64(v)
}

// ResultIntFrom builds a result type from a function returning
// (int, err)
// e.g.: r :=  ResultIntFrom(myfunc(args))
func ResultIntFrom(v int, err error) ResultInt {
	if err != nil {
		return ErrInt(err)
	}
	return OkInt(v)
}

// ResultInt16From builds a result type from a function returning
// (int16, err)
// e.g.: r :=  ResultInt16From(myfunc(args))
func ResultInt16From(v int16, err error) ResultInt16 {
	if err != nil {
		return ErrInt16(err)
	}
	return OkInt16(v)
}

// ResultInt32From builds a result type from a function returning
// (int32, err)
// e.g.: r :=  ResultInt32From(myfunc(args))
func ResultInt32From(v int32, err error) ResultInt32 {
	if err != nil {
		return ErrInt32(err)
	}
	return OkInt32(v)
}

// ResultInt64From builds a result type from a function returning
// (int64, err)
// e.g.: r :=  ResultInt64From(myfunc(args))
func ResultInt64From(v int64, err error) ResultInt64 {
	if err != nil {
		return ErrInt64(err)
	}
	return OkInt64(v)
}

// ResultInt8From builds a result type from a function returning
// (int8, err)
// e.g.: r :=  ResultInt8From(myfunc(args))
func ResultInt8From(v int8, err error) ResultInt8 {
	if err != nil {
		return ErrInt8(err)
	}
	return OkInt8(v)
}

// ResultRuneFrom builds a result type from a function returning
// (rune, err)
// e.g.: r :=  ResultRuneFrom(myfunc(args))
func ResultRuneFrom(v rune, err error) ResultRune {
	if err != nil {
		return ErrRune(err)
	}
	return OkRune(v)
}

// ResultStringFrom builds a result type from a function returning
// (string, err)
// e.g.: r :=  ResultStringFrom(myfunc(args))
func ResultStringFrom(v string, err error) ResultString {
	if err != nil {
		return ErrString(err)
	}
	return OkString(v)
}

// ResultUIntFrom builds a result type from a function returning
// (uint, err)
// e.g.: r :=  ResultUIntFrom(myfunc(args))
func ResultUIntFrom(v uint, err error) ResultUInt {
	if err != nil {
		return ErrUInt(err)
	}
	return OkUInt(v)
}

// ResultUInt16From builds a result type from a function returning
// (uint16, err)
// e.g.: r :=  ResultUInt16From(myfunc(args))
func ResultUInt16From(v uint16, err error) ResultUInt16 {
	if err != nil {
		return ErrUInt16(err)
	}
	return OkUInt16(v)
}

// ResultUInt32From builds a result type from a function returning
// (uint32, err)
// e.g.: r :=  ResultUInt32From(myfunc(args))
func ResultUInt32From(v uint32, err error) ResultUInt32 {
	if err != nil {
		return ErrUInt32(err)
	}
	return OkUInt32(v)
}

// ResultUInt64From builds a result type from a function returning
// (uint64, err)
// e.g.: r :=  ResultUInt64From(myfunc(args))
func ResultUInt64From(v uint64, err error) ResultUInt64 {
	if err != nil {
		return ErrUInt64(err)
	}
	return OkUInt64(v)
}

// ResultUInt8From builds a result type from a function returning
// (uint8, err)
// e.g.: r :=  ResultUInt8From(myfunc(args))
func ResultUInt8From(v uint8, err error) ResultUInt8 {
	if err != nil {
		return ErrUInt8(err)
	}
	return OkUInt8(v)
}

// ResultUintPtrFrom builds a result type from a function returning
// (uintptr, err)
// e.g.: r :=  ResultUintPtrFrom(myfunc(args))
func ResultUintPtrFrom(v uintptr, err error) ResultUintPtr {
	if err != nil {
		return ErrUintPtr(err)
	}
	return OkUintPtr(v)
}




// errBool implements ResultBool for a failed result
type errBool struct{
	left error
}

// ErrBool(error  | string) makes a new errBool
// from an error or a string.
func ErrBool(err interface{}) errBool {
	switch err.(type) {
		case string : return errBool{errors.New(err.(string))}
		case error : return errBool{err.(error)}
	} 
	return errBool{errors.New("ErrBool called with something else than string or error")}
}

// Map with errBool receiver is a noop
func (e errBool) Map(f func(bool)) {}

// FoldF with errBool applies it's first argument
// function on its error state
func (e errBool) FoldF(l func(e error), r func(bool)) { l(e.left) }


// MapBool with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapBool(f func(v bool) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errBool receiver
// returns its first argument.
func (e errBool) FoldBool(a bool, f func(v bool) bool) bool {
	return a
}
// FoldBoolF with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldBoolF(a func(error) bool, f func(bool) bool) bool {
	return a(e.left)
}

// MapByte with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapByte(f func(v bool) byte) ResultByte {
	return ErrByte(e.left)
}
// FoldByte with errBool receiver
// returns its first argument.
func (e errBool) FoldByte(a byte, f func(v bool) byte) byte {
	return a
}
// FoldByteF with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldByteF(a func(error) byte, f func(bool) byte) byte {
	return a(e.left)
}

// MapComplex128 with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapComplex128(f func(v bool) complex128) ResultComplex128 {
	return ErrComplex128(e.left)
}
// FoldComplex128 with errBool receiver
// returns its first argument.
func (e errBool) FoldComplex128(a complex128, f func(v bool) complex128) complex128 {
	return a
}
// FoldComplex128F with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldComplex128F(a func(error) complex128, f func(bool) complex128) complex128 {
	return a(e.left)
}

// MapComplex64 with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapComplex64(f func(v bool) complex64) ResultComplex64 {
	return ErrComplex64(e.left)
}
// FoldComplex64 with errBool receiver
// returns its first argument.
func (e errBool) FoldComplex64(a complex64, f func(v bool) complex64) complex64 {
	return a
}
// FoldComplex64F with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldComplex64F(a func(error) complex64, f func(bool) complex64) complex64 {
	return a(e.left)
}

// MapFloat32 with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapFloat32(f func(v bool) float32) ResultFloat32 {
	return ErrFloat32(e.left)
}
// FoldFloat32 with errBool receiver
// returns its first argument.
func (e errBool) FoldFloat32(a float32, f func(v bool) float32) float32 {
	return a
}
// FoldFloat32F with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldFloat32F(a func(error) float32, f func(bool) float32) float32 {
	return a(e.left)
}

// MapFloat64 with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapFloat64(f func(v bool) float64) ResultFloat64 {
	return ErrFloat64(e.left)
}
// FoldFloat64 with errBool receiver
// returns its first argument.
func (e errBool) FoldFloat64(a float64, f func(v bool) float64) float64 {
	return a
}
// FoldFloat64F with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldFloat64F(a func(error) float64, f func(bool) float64) float64 {
	return a(e.left)
}

// MapInt with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapInt(f func(v bool) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errBool receiver
// returns its first argument.
func (e errBool) FoldInt(a int, f func(v bool) int) int {
	return a
}
// FoldIntF with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldIntF(a func(error) int, f func(bool) int) int {
	return a(e.left)
}

// MapInt16 with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapInt16(f func(v bool) int16) ResultInt16 {
	return ErrInt16(e.left)
}
// FoldInt16 with errBool receiver
// returns its first argument.
func (e errBool) FoldInt16(a int16, f func(v bool) int16) int16 {
	return a
}
// FoldInt16F with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldInt16F(a func(error) int16, f func(bool) int16) int16 {
	return a(e.left)
}

// MapInt32 with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapInt32(f func(v bool) int32) ResultInt32 {
	return ErrInt32(e.left)
}
// FoldInt32 with errBool receiver
// returns its first argument.
func (e errBool) FoldInt32(a int32, f func(v bool) int32) int32 {
	return a
}
// FoldInt32F with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldInt32F(a func(error) int32, f func(bool) int32) int32 {
	return a(e.left)
}

// MapInt64 with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapInt64(f func(v bool) int64) ResultInt64 {
	return ErrInt64(e.left)
}
// FoldInt64 with errBool receiver
// returns its first argument.
func (e errBool) FoldInt64(a int64, f func(v bool) int64) int64 {
	return a
}
// FoldInt64F with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldInt64F(a func(error) int64, f func(bool) int64) int64 {
	return a(e.left)
}

// MapInt8 with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapInt8(f func(v bool) int8) ResultInt8 {
	return ErrInt8(e.left)
}
// FoldInt8 with errBool receiver
// returns its first argument.
func (e errBool) FoldInt8(a int8, f func(v bool) int8) int8 {
	return a
}
// FoldInt8F with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldInt8F(a func(error) int8, f func(bool) int8) int8 {
	return a(e.left)
}

// MapRune with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapRune(f func(v bool) rune) ResultRune {
	return ErrRune(e.left)
}
// FoldRune with errBool receiver
// returns its first argument.
func (e errBool) FoldRune(a rune, f func(v bool) rune) rune {
	return a
}
// FoldRuneF with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldRuneF(a func(error) rune, f func(bool) rune) rune {
	return a(e.left)
}

// MapString with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapString(f func(v bool) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errBool receiver
// returns its first argument.
func (e errBool) FoldString(a string, f func(v bool) string) string {
	return a
}
// FoldStringF with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldStringF(a func(error) string, f func(bool) string) string {
	return a(e.left)
}

// MapUInt with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapUInt(f func(v bool) uint) ResultUInt {
	return ErrUInt(e.left)
}
// FoldUInt with errBool receiver
// returns its first argument.
func (e errBool) FoldUInt(a uint, f func(v bool) uint) uint {
	return a
}
// FoldUIntF with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldUIntF(a func(error) uint, f func(bool) uint) uint {
	return a(e.left)
}

// MapUInt16 with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapUInt16(f func(v bool) uint16) ResultUInt16 {
	return ErrUInt16(e.left)
}
// FoldUInt16 with errBool receiver
// returns its first argument.
func (e errBool) FoldUInt16(a uint16, f func(v bool) uint16) uint16 {
	return a
}
// FoldUInt16F with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldUInt16F(a func(error) uint16, f func(bool) uint16) uint16 {
	return a(e.left)
}

// MapUInt32 with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapUInt32(f func(v bool) uint32) ResultUInt32 {
	return ErrUInt32(e.left)
}
// FoldUInt32 with errBool receiver
// returns its first argument.
func (e errBool) FoldUInt32(a uint32, f func(v bool) uint32) uint32 {
	return a
}
// FoldUInt32F with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldUInt32F(a func(error) uint32, f func(bool) uint32) uint32 {
	return a(e.left)
}

// MapUInt64 with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapUInt64(f func(v bool) uint64) ResultUInt64 {
	return ErrUInt64(e.left)
}
// FoldUInt64 with errBool receiver
// returns its first argument.
func (e errBool) FoldUInt64(a uint64, f func(v bool) uint64) uint64 {
	return a
}
// FoldUInt64F with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldUInt64F(a func(error) uint64, f func(bool) uint64) uint64 {
	return a(e.left)
}

// MapUInt8 with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapUInt8(f func(v bool) uint8) ResultUInt8 {
	return ErrUInt8(e.left)
}
// FoldUInt8 with errBool receiver
// returns its first argument.
func (e errBool) FoldUInt8(a uint8, f func(v bool) uint8) uint8 {
	return a
}
// FoldUInt8F with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldUInt8F(a func(error) uint8, f func(bool) uint8) uint8 {
	return a(e.left)
}

// MapUintPtr with errBool receiver
// returns a newly built errBool with same error.
func (e errBool) MapUintPtr(f func(v bool) uintptr) ResultUintPtr {
	return ErrUintPtr(e.left)
}
// FoldUintPtr with errBool receiver
// returns its first argument.
func (e errBool) FoldUintPtr(a uintptr, f func(v bool) uintptr) uintptr {
	return a
}
// FoldUintPtrF with errBool receiver
// returns the result of its first argument applied to the result error state.
func (e errBool) FoldUintPtrF(a func(error) uintptr, f func(bool) uintptr) uintptr {
	return a(e.left)
}
 // end of nones

// okBool implements ResultBool for a successful result
type okBool struct {
	right bool
}

// OkBool returns a successful result with value v of type bool 
func OkBool(v bool) okBool {
	return okBool{v}
}
// MapBool with okBool receiver
// applies its function argument on hold value 
func (s okBool) Map(f func(bool)) { f(s.right) }

// FoldFBool with okBool receiver
// applies its second function argument on hold value 
func (s okBool) FoldF(l func(error), r func(bool)) { r(s.right) }


// MapBool on okBool receiver
// applies its function arguments on hold value and returns an okBool
func (s okBool) MapBool(f func(bool) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldBool(a bool, f func(bool) bool) bool {
	return f(s.right)
}

// FoldBoolF on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldBoolF(a func(error) bool, f func(bool) bool) bool {
	return f(s.right)
}

// MapByte on okBool receiver
// applies its function arguments on hold value and returns an okByte
func (s okBool) MapByte(f func(bool) byte) ResultByte {
	return OkByte(f(s.right))
}

// FoldByte on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldByte(a byte, f func(bool) byte) byte {
	return f(s.right)
}

// FoldByteF on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldByteF(a func(error) byte, f func(bool) byte) byte {
	return f(s.right)
}

// MapComplex128 on okBool receiver
// applies its function arguments on hold value and returns an okComplex128
func (s okBool) MapComplex128(f func(bool) complex128) ResultComplex128 {
	return OkComplex128(f(s.right))
}

// FoldComplex128 on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldComplex128(a complex128, f func(bool) complex128) complex128 {
	return f(s.right)
}

// FoldComplex128F on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldComplex128F(a func(error) complex128, f func(bool) complex128) complex128 {
	return f(s.right)
}

// MapComplex64 on okBool receiver
// applies its function arguments on hold value and returns an okComplex64
func (s okBool) MapComplex64(f func(bool) complex64) ResultComplex64 {
	return OkComplex64(f(s.right))
}

// FoldComplex64 on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldComplex64(a complex64, f func(bool) complex64) complex64 {
	return f(s.right)
}

// FoldComplex64F on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldComplex64F(a func(error) complex64, f func(bool) complex64) complex64 {
	return f(s.right)
}

// MapFloat32 on okBool receiver
// applies its function arguments on hold value and returns an okFloat32
func (s okBool) MapFloat32(f func(bool) float32) ResultFloat32 {
	return OkFloat32(f(s.right))
}

// FoldFloat32 on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldFloat32(a float32, f func(bool) float32) float32 {
	return f(s.right)
}

// FoldFloat32F on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldFloat32F(a func(error) float32, f func(bool) float32) float32 {
	return f(s.right)
}

// MapFloat64 on okBool receiver
// applies its function arguments on hold value and returns an okFloat64
func (s okBool) MapFloat64(f func(bool) float64) ResultFloat64 {
	return OkFloat64(f(s.right))
}

// FoldFloat64 on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldFloat64(a float64, f func(bool) float64) float64 {
	return f(s.right)
}

// FoldFloat64F on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldFloat64F(a func(error) float64, f func(bool) float64) float64 {
	return f(s.right)
}

// MapInt on okBool receiver
// applies its function arguments on hold value and returns an okInt
func (s okBool) MapInt(f func(bool) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldInt(a int, f func(bool) int) int {
	return f(s.right)
}

// FoldIntF on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldIntF(a func(error) int, f func(bool) int) int {
	return f(s.right)
}

// MapInt16 on okBool receiver
// applies its function arguments on hold value and returns an okInt16
func (s okBool) MapInt16(f func(bool) int16) ResultInt16 {
	return OkInt16(f(s.right))
}

// FoldInt16 on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldInt16(a int16, f func(bool) int16) int16 {
	return f(s.right)
}

// FoldInt16F on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldInt16F(a func(error) int16, f func(bool) int16) int16 {
	return f(s.right)
}

// MapInt32 on okBool receiver
// applies its function arguments on hold value and returns an okInt32
func (s okBool) MapInt32(f func(bool) int32) ResultInt32 {
	return OkInt32(f(s.right))
}

// FoldInt32 on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldInt32(a int32, f func(bool) int32) int32 {
	return f(s.right)
}

// FoldInt32F on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldInt32F(a func(error) int32, f func(bool) int32) int32 {
	return f(s.right)
}

// MapInt64 on okBool receiver
// applies its function arguments on hold value and returns an okInt64
func (s okBool) MapInt64(f func(bool) int64) ResultInt64 {
	return OkInt64(f(s.right))
}

// FoldInt64 on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldInt64(a int64, f func(bool) int64) int64 {
	return f(s.right)
}

// FoldInt64F on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldInt64F(a func(error) int64, f func(bool) int64) int64 {
	return f(s.right)
}

// MapInt8 on okBool receiver
// applies its function arguments on hold value and returns an okInt8
func (s okBool) MapInt8(f func(bool) int8) ResultInt8 {
	return OkInt8(f(s.right))
}

// FoldInt8 on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldInt8(a int8, f func(bool) int8) int8 {
	return f(s.right)
}

// FoldInt8F on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldInt8F(a func(error) int8, f func(bool) int8) int8 {
	return f(s.right)
}

// MapRune on okBool receiver
// applies its function arguments on hold value and returns an okRune
func (s okBool) MapRune(f func(bool) rune) ResultRune {
	return OkRune(f(s.right))
}

// FoldRune on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldRune(a rune, f func(bool) rune) rune {
	return f(s.right)
}

// FoldRuneF on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldRuneF(a func(error) rune, f func(bool) rune) rune {
	return f(s.right)
}

// MapString on okBool receiver
// applies its function arguments on hold value and returns an okString
func (s okBool) MapString(f func(bool) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldString(a string, f func(bool) string) string {
	return f(s.right)
}

// FoldStringF on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldStringF(a func(error) string, f func(bool) string) string {
	return f(s.right)
}

// MapUInt on okBool receiver
// applies its function arguments on hold value and returns an okUInt
func (s okBool) MapUInt(f func(bool) uint) ResultUInt {
	return OkUInt(f(s.right))
}

// FoldUInt on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldUInt(a uint, f func(bool) uint) uint {
	return f(s.right)
}

// FoldUIntF on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldUIntF(a func(error) uint, f func(bool) uint) uint {
	return f(s.right)
}

// MapUInt16 on okBool receiver
// applies its function arguments on hold value and returns an okUInt16
func (s okBool) MapUInt16(f func(bool) uint16) ResultUInt16 {
	return OkUInt16(f(s.right))
}

// FoldUInt16 on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldUInt16(a uint16, f func(bool) uint16) uint16 {
	return f(s.right)
}

// FoldUInt16F on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldUInt16F(a func(error) uint16, f func(bool) uint16) uint16 {
	return f(s.right)
}

// MapUInt32 on okBool receiver
// applies its function arguments on hold value and returns an okUInt32
func (s okBool) MapUInt32(f func(bool) uint32) ResultUInt32 {
	return OkUInt32(f(s.right))
}

// FoldUInt32 on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldUInt32(a uint32, f func(bool) uint32) uint32 {
	return f(s.right)
}

// FoldUInt32F on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldUInt32F(a func(error) uint32, f func(bool) uint32) uint32 {
	return f(s.right)
}

// MapUInt64 on okBool receiver
// applies its function arguments on hold value and returns an okUInt64
func (s okBool) MapUInt64(f func(bool) uint64) ResultUInt64 {
	return OkUInt64(f(s.right))
}

// FoldUInt64 on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldUInt64(a uint64, f func(bool) uint64) uint64 {
	return f(s.right)
}

// FoldUInt64F on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldUInt64F(a func(error) uint64, f func(bool) uint64) uint64 {
	return f(s.right)
}

// MapUInt8 on okBool receiver
// applies its function arguments on hold value and returns an okUInt8
func (s okBool) MapUInt8(f func(bool) uint8) ResultUInt8 {
	return OkUInt8(f(s.right))
}

// FoldUInt8 on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldUInt8(a uint8, f func(bool) uint8) uint8 {
	return f(s.right)
}

// FoldUInt8F on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldUInt8F(a func(error) uint8, f func(bool) uint8) uint8 {
	return f(s.right)
}

// MapUintPtr on okBool receiver
// applies its function arguments on hold value and returns an okUintPtr
func (s okBool) MapUintPtr(f func(bool) uintptr) ResultUintPtr {
	return OkUintPtr(f(s.right))
}

// FoldUintPtr on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldUintPtr(a uintptr, f func(bool) uintptr) uintptr {
	return f(s.right)
}

// FoldUintPtrF on okBool receiver
// applies its second function arguments on hold value and returns an bool
func (s okBool) FoldUintPtrF(a func(error) uintptr, f func(bool) uintptr) uintptr {
	return f(s.right)
}
 // end of oks



// errByte implements ResultByte for a failed result
type errByte struct{
	left error
}

// ErrByte(error  | string) makes a new errByte
// from an error or a string.
func ErrByte(err interface{}) errByte {
	switch err.(type) {
		case string : return errByte{errors.New(err.(string))}
		case error : return errByte{err.(error)}
	} 
	return errByte{errors.New("ErrByte called with something else than string or error")}
}

// Map with errByte receiver is a noop
func (e errByte) Map(f func(byte)) {}

// FoldF with errByte applies it's first argument
// function on its error state
func (e errByte) FoldF(l func(e error), r func(byte)) { l(e.left) }


// MapBool with errByte receiver
// returns a newly built errByte with same error.
func (e errByte) MapBool(f func(v byte) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errByte receiver
// returns its first argument.
func (e errByte) FoldBool(a bool, f func(v byte) bool) bool {
	return a
}
// FoldBoolF with errByte receiver
// returns the result of its first argument applied to the result error state.
func (e errByte) FoldBoolF(a func(error) bool, f func(byte) bool) bool {
	return a(e.left)
}

// MapByte with errByte receiver
// returns a newly built errByte with same error.
func (e errByte) MapByte(f func(v byte) byte) ResultByte {
	return ErrByte(e.left)
}
// FoldByte with errByte receiver
// returns its first argument.
func (e errByte) FoldByte(a byte, f func(v byte) byte) byte {
	return a
}
// FoldByteF with errByte receiver
// returns the result of its first argument applied to the result error state.
func (e errByte) FoldByteF(a func(error) byte, f func(byte) byte) byte {
	return a(e.left)
}

// MapComplex128 with errByte receiver
// returns a newly built errByte with same error.
func (e errByte) MapComplex128(f func(v byte) complex128) ResultComplex128 {
	return ErrComplex128(e.left)
}
// FoldComplex128 with errByte receiver
// returns its first argument.
func (e errByte) FoldComplex128(a complex128, f func(v byte) complex128) complex128 {
	return a
}
// FoldComplex128F with errByte receiver
// returns the result of its first argument applied to the result error state.
func (e errByte) FoldComplex128F(a func(error) complex128, f func(byte) complex128) complex128 {
	return a(e.left)
}

// MapComplex64 with errByte receiver
// returns a newly built errByte with same error.
func (e errByte) MapComplex64(f func(v byte) complex64) ResultComplex64 {
	return ErrComplex64(e.left)
}
// FoldComplex64 with errByte receiver
// returns its first argument.
func (e errByte) FoldComplex64(a complex64, f func(v byte) complex64) complex64 {
	return a
}
// FoldComplex64F with errByte receiver
// returns the result of its first argument applied to the result error state.
func (e errByte) FoldComplex64F(a func(error) complex64, f func(byte) complex64) complex64 {
	return a(e.left)
}

// MapFloat32 with errByte receiver
// returns a newly built errByte with same error.
func (e errByte) MapFloat32(f func(v byte) float32) ResultFloat32 {
	return ErrFloat32(e.left)
}
// FoldFloat32 with errByte receiver
// returns its first argument.
func (e errByte) FoldFloat32(a float32, f func(v byte) float32) float32 {
	return a
}
// FoldFloat32F with errByte receiver
// returns the result of its first argument applied to the result error state.
func (e errByte) FoldFloat32F(a func(error) float32, f func(byte) float32) float32 {
	return a(e.left)
}

// MapFloat64 with errByte receiver
// returns a newly built errByte with same error.
func (e errByte) MapFloat64(f func(v byte) float64) ResultFloat64 {
	return ErrFloat64(e.left)
}
// FoldFloat64 with errByte receiver
// returns its first argument.
func (e errByte) FoldFloat64(a float64, f func(v byte) float64) float64 {
	return a
}
// FoldFloat64F with errByte receiver
// returns the result of its first argument applied to the result error state.
func (e errByte) FoldFloat64F(a func(error) float64, f func(byte) float64) float64 {
	return a(e.left)
}

// MapInt with errByte receiver
// returns a newly built errByte with same error.
func (e errByte) MapInt(f func(v byte) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errByte receiver
// returns its first argument.
func (e errByte) FoldInt(a int, f func(v byte) int) int {
	return a
}
// FoldIntF with errByte receiver
// returns the result of its first argument applied to the result error state.
func (e errByte) FoldIntF(a func(error) int, f func(byte) int) int {
	return a(e.left)
}

// MapInt16 with errByte receiver
// returns a newly built errByte with same error.
func (e errByte) MapInt16(f func(v byte) int16) ResultInt16 {
	return ErrInt16(e.left)
}
// FoldInt16 with errByte receiver
// returns its first argument.
func (e errByte) FoldInt16(a int16, f func(v byte) int16) int16 {
	return a
}
// FoldInt16F with errByte receiver
// returns the result of its first argument applied to the result error state.
func (e errByte) FoldInt16F(a func(error) int16, f func(byte) int16) int16 {
	return a(e.left)
}

// MapInt32 with errByte receiver
// returns a newly built errByte with same error.
func (e errByte) MapInt32(f func(v byte) int32) ResultInt32 {
	return ErrInt32(e.left)
}
// FoldInt32 with errByte receiver
// returns its first argument.
func (e errByte) FoldInt32(a int32, f func(v byte) int32) int32 {
	return a
}
// FoldInt32F with errByte receiver
// returns the result of its first argument applied to the result error state.
func (e errByte) FoldInt32F(a func(error) int32, f func(byte) int32) int32 {
	return a(e.left)
}

// MapInt64 with errByte receiver
// returns a newly built errByte with same error.
func (e errByte) MapInt64(f func(v byte) int64) ResultInt64 {
	return ErrInt64(e.left)
}
// FoldInt64 with errByte receiver
// returns its first argument.
func (e errByte) FoldInt64(a int64, f func(v byte) int64) int64 {
	return a
}
// FoldInt64F with errByte receiver
// returns the result of its first argument applied to the result error state.
func (e errByte) FoldInt64F(a func(error) int64, f func(byte) int64) int64 {
	return a(e.left)
}

// MapInt8 with errByte receiver
// returns a newly built errByte with same error.
func (e errByte) MapInt8(f func(v byte) int8) ResultInt8 {
	return ErrInt8(e.left)
}
// FoldInt8 with errByte receiver
// returns its first argument.
func (e errByte) FoldInt8(a int8, f func(v byte) int8) int8 {
	return a
}
// FoldInt8F with errByte receiver
// returns the result of its first argument applied to the result error state.
func (e errByte) FoldInt8F(a func(error) int8, f func(byte) int8) int8 {
	return a(e.left)
}

// MapRune with errByte receiver
// returns a newly built errByte with same error.
func (e errByte) MapRune(f func(v byte) rune) ResultRune {
	return ErrRune(e.left)
}
// FoldRune with errByte receiver
// returns its first argument.
func (e errByte) FoldRune(a rune, f func(v byte) rune) rune {
	return a
}
// FoldRuneF with errByte receiver
// returns the result of its first argument applied to the result error state.
func (e errByte) FoldRuneF(a func(error) rune, f func(byte) rune) rune {
	return a(e.left)
}

// MapString with errByte receiver
// returns a newly built errByte with same error.
func (e errByte) MapString(f func(v byte) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errByte receiver
// returns its first argument.
func (e errByte) FoldString(a string, f func(v byte) string) string {
	return a
}
// FoldStringF with errByte receiver
// returns the result of its first argument applied to the result error state.
func (e errByte) FoldStringF(a func(error) string, f func(byte) string) string {
	return a(e.left)
}

// MapUInt with errByte receiver
// returns a newly built errByte with same error.
func (e errByte) MapUInt(f func(v byte) uint) ResultUInt {
	return ErrUInt(e.left)
}
// FoldUInt with errByte receiver
// returns its first argument.
func (e errByte) FoldUInt(a uint, f func(v byte) uint) uint {
	return a
}
// FoldUIntF with errByte receiver
// returns the result of its first argument applied to the result error state.
func (e errByte) FoldUIntF(a func(error) uint, f func(byte) uint) uint {
	return a(e.left)
}

// MapUInt16 with errByte receiver
// returns a newly built errByte with same error.
func (e errByte) MapUInt16(f func(v byte) uint16) ResultUInt16 {
	return ErrUInt16(e.left)
}
// FoldUInt16 with errByte receiver
// returns its first argument.
func (e errByte) FoldUInt16(a uint16, f func(v byte) uint16) uint16 {
	return a
}
// FoldUInt16F with errByte receiver
// returns the result of its first argument applied to the result error state.
func (e errByte) FoldUInt16F(a func(error) uint16, f func(byte) uint16) uint16 {
	return a(e.left)
}

// MapUInt32 with errByte receiver
// returns a newly built errByte with same error.
func (e errByte) MapUInt32(f func(v byte) uint32) ResultUInt32 {
	return ErrUInt32(e.left)
}
// FoldUInt32 with errByte receiver
// returns its first argument.
func (e errByte) FoldUInt32(a uint32, f func(v byte) uint32) uint32 {
	return a
}
// FoldUInt32F with errByte receiver
// returns the result of its first argument applied to the result error state.
func (e errByte) FoldUInt32F(a func(error) uint32, f func(byte) uint32) uint32 {
	return a(e.left)
}

// MapUInt64 with errByte receiver
// returns a newly built errByte with same error.
func (e errByte) MapUInt64(f func(v byte) uint64) ResultUInt64 {
	return ErrUInt64(e.left)
}
// FoldUInt64 with errByte receiver
// returns its first argument.
func (e errByte) FoldUInt64(a uint64, f func(v byte) uint64) uint64 {
	return a
}
// FoldUInt64F with errByte receiver
// returns the result of its first argument applied to the result error state.
func (e errByte) FoldUInt64F(a func(error) uint64, f func(byte) uint64) uint64 {
	return a(e.left)
}

// MapUInt8 with errByte receiver
// returns a newly built errByte with same error.
func (e errByte) MapUInt8(f func(v byte) uint8) ResultUInt8 {
	return ErrUInt8(e.left)
}
// FoldUInt8 with errByte receiver
// returns its first argument.
func (e errByte) FoldUInt8(a uint8, f func(v byte) uint8) uint8 {
	return a
}
// FoldUInt8F with errByte receiver
// returns the result of its first argument applied to the result error state.
func (e errByte) FoldUInt8F(a func(error) uint8, f func(byte) uint8) uint8 {
	return a(e.left)
}

// MapUintPtr with errByte receiver
// returns a newly built errByte with same error.
func (e errByte) MapUintPtr(f func(v byte) uintptr) ResultUintPtr {
	return ErrUintPtr(e.left)
}
// FoldUintPtr with errByte receiver
// returns its first argument.
func (e errByte) FoldUintPtr(a uintptr, f func(v byte) uintptr) uintptr {
	return a
}
// FoldUintPtrF with errByte receiver
// returns the result of its first argument applied to the result error state.
func (e errByte) FoldUintPtrF(a func(error) uintptr, f func(byte) uintptr) uintptr {
	return a(e.left)
}
 // end of nones

// okByte implements ResultByte for a successful result
type okByte struct {
	right byte
}

// OkByte returns a successful result with value v of type byte 
func OkByte(v byte) okByte {
	return okByte{v}
}
// MapByte with okByte receiver
// applies its function argument on hold value 
func (s okByte) Map(f func(byte)) { f(s.right) }

// FoldFByte with okByte receiver
// applies its second function argument on hold value 
func (s okByte) FoldF(l func(error), r func(byte)) { r(s.right) }


// MapBool on okByte receiver
// applies its function arguments on hold value and returns an okBool
func (s okByte) MapBool(f func(byte) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldBool(a bool, f func(byte) bool) bool {
	return f(s.right)
}

// FoldBoolF on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldBoolF(a func(error) bool, f func(byte) bool) bool {
	return f(s.right)
}

// MapByte on okByte receiver
// applies its function arguments on hold value and returns an okByte
func (s okByte) MapByte(f func(byte) byte) ResultByte {
	return OkByte(f(s.right))
}

// FoldByte on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldByte(a byte, f func(byte) byte) byte {
	return f(s.right)
}

// FoldByteF on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldByteF(a func(error) byte, f func(byte) byte) byte {
	return f(s.right)
}

// MapComplex128 on okByte receiver
// applies its function arguments on hold value and returns an okComplex128
func (s okByte) MapComplex128(f func(byte) complex128) ResultComplex128 {
	return OkComplex128(f(s.right))
}

// FoldComplex128 on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldComplex128(a complex128, f func(byte) complex128) complex128 {
	return f(s.right)
}

// FoldComplex128F on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldComplex128F(a func(error) complex128, f func(byte) complex128) complex128 {
	return f(s.right)
}

// MapComplex64 on okByte receiver
// applies its function arguments on hold value and returns an okComplex64
func (s okByte) MapComplex64(f func(byte) complex64) ResultComplex64 {
	return OkComplex64(f(s.right))
}

// FoldComplex64 on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldComplex64(a complex64, f func(byte) complex64) complex64 {
	return f(s.right)
}

// FoldComplex64F on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldComplex64F(a func(error) complex64, f func(byte) complex64) complex64 {
	return f(s.right)
}

// MapFloat32 on okByte receiver
// applies its function arguments on hold value and returns an okFloat32
func (s okByte) MapFloat32(f func(byte) float32) ResultFloat32 {
	return OkFloat32(f(s.right))
}

// FoldFloat32 on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldFloat32(a float32, f func(byte) float32) float32 {
	return f(s.right)
}

// FoldFloat32F on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldFloat32F(a func(error) float32, f func(byte) float32) float32 {
	return f(s.right)
}

// MapFloat64 on okByte receiver
// applies its function arguments on hold value and returns an okFloat64
func (s okByte) MapFloat64(f func(byte) float64) ResultFloat64 {
	return OkFloat64(f(s.right))
}

// FoldFloat64 on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldFloat64(a float64, f func(byte) float64) float64 {
	return f(s.right)
}

// FoldFloat64F on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldFloat64F(a func(error) float64, f func(byte) float64) float64 {
	return f(s.right)
}

// MapInt on okByte receiver
// applies its function arguments on hold value and returns an okInt
func (s okByte) MapInt(f func(byte) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldInt(a int, f func(byte) int) int {
	return f(s.right)
}

// FoldIntF on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldIntF(a func(error) int, f func(byte) int) int {
	return f(s.right)
}

// MapInt16 on okByte receiver
// applies its function arguments on hold value and returns an okInt16
func (s okByte) MapInt16(f func(byte) int16) ResultInt16 {
	return OkInt16(f(s.right))
}

// FoldInt16 on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldInt16(a int16, f func(byte) int16) int16 {
	return f(s.right)
}

// FoldInt16F on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldInt16F(a func(error) int16, f func(byte) int16) int16 {
	return f(s.right)
}

// MapInt32 on okByte receiver
// applies its function arguments on hold value and returns an okInt32
func (s okByte) MapInt32(f func(byte) int32) ResultInt32 {
	return OkInt32(f(s.right))
}

// FoldInt32 on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldInt32(a int32, f func(byte) int32) int32 {
	return f(s.right)
}

// FoldInt32F on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldInt32F(a func(error) int32, f func(byte) int32) int32 {
	return f(s.right)
}

// MapInt64 on okByte receiver
// applies its function arguments on hold value and returns an okInt64
func (s okByte) MapInt64(f func(byte) int64) ResultInt64 {
	return OkInt64(f(s.right))
}

// FoldInt64 on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldInt64(a int64, f func(byte) int64) int64 {
	return f(s.right)
}

// FoldInt64F on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldInt64F(a func(error) int64, f func(byte) int64) int64 {
	return f(s.right)
}

// MapInt8 on okByte receiver
// applies its function arguments on hold value and returns an okInt8
func (s okByte) MapInt8(f func(byte) int8) ResultInt8 {
	return OkInt8(f(s.right))
}

// FoldInt8 on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldInt8(a int8, f func(byte) int8) int8 {
	return f(s.right)
}

// FoldInt8F on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldInt8F(a func(error) int8, f func(byte) int8) int8 {
	return f(s.right)
}

// MapRune on okByte receiver
// applies its function arguments on hold value and returns an okRune
func (s okByte) MapRune(f func(byte) rune) ResultRune {
	return OkRune(f(s.right))
}

// FoldRune on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldRune(a rune, f func(byte) rune) rune {
	return f(s.right)
}

// FoldRuneF on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldRuneF(a func(error) rune, f func(byte) rune) rune {
	return f(s.right)
}

// MapString on okByte receiver
// applies its function arguments on hold value and returns an okString
func (s okByte) MapString(f func(byte) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldString(a string, f func(byte) string) string {
	return f(s.right)
}

// FoldStringF on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldStringF(a func(error) string, f func(byte) string) string {
	return f(s.right)
}

// MapUInt on okByte receiver
// applies its function arguments on hold value and returns an okUInt
func (s okByte) MapUInt(f func(byte) uint) ResultUInt {
	return OkUInt(f(s.right))
}

// FoldUInt on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldUInt(a uint, f func(byte) uint) uint {
	return f(s.right)
}

// FoldUIntF on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldUIntF(a func(error) uint, f func(byte) uint) uint {
	return f(s.right)
}

// MapUInt16 on okByte receiver
// applies its function arguments on hold value and returns an okUInt16
func (s okByte) MapUInt16(f func(byte) uint16) ResultUInt16 {
	return OkUInt16(f(s.right))
}

// FoldUInt16 on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldUInt16(a uint16, f func(byte) uint16) uint16 {
	return f(s.right)
}

// FoldUInt16F on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldUInt16F(a func(error) uint16, f func(byte) uint16) uint16 {
	return f(s.right)
}

// MapUInt32 on okByte receiver
// applies its function arguments on hold value and returns an okUInt32
func (s okByte) MapUInt32(f func(byte) uint32) ResultUInt32 {
	return OkUInt32(f(s.right))
}

// FoldUInt32 on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldUInt32(a uint32, f func(byte) uint32) uint32 {
	return f(s.right)
}

// FoldUInt32F on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldUInt32F(a func(error) uint32, f func(byte) uint32) uint32 {
	return f(s.right)
}

// MapUInt64 on okByte receiver
// applies its function arguments on hold value and returns an okUInt64
func (s okByte) MapUInt64(f func(byte) uint64) ResultUInt64 {
	return OkUInt64(f(s.right))
}

// FoldUInt64 on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldUInt64(a uint64, f func(byte) uint64) uint64 {
	return f(s.right)
}

// FoldUInt64F on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldUInt64F(a func(error) uint64, f func(byte) uint64) uint64 {
	return f(s.right)
}

// MapUInt8 on okByte receiver
// applies its function arguments on hold value and returns an okUInt8
func (s okByte) MapUInt8(f func(byte) uint8) ResultUInt8 {
	return OkUInt8(f(s.right))
}

// FoldUInt8 on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldUInt8(a uint8, f func(byte) uint8) uint8 {
	return f(s.right)
}

// FoldUInt8F on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldUInt8F(a func(error) uint8, f func(byte) uint8) uint8 {
	return f(s.right)
}

// MapUintPtr on okByte receiver
// applies its function arguments on hold value and returns an okUintPtr
func (s okByte) MapUintPtr(f func(byte) uintptr) ResultUintPtr {
	return OkUintPtr(f(s.right))
}

// FoldUintPtr on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldUintPtr(a uintptr, f func(byte) uintptr) uintptr {
	return f(s.right)
}

// FoldUintPtrF on okByte receiver
// applies its second function arguments on hold value and returns an byte
func (s okByte) FoldUintPtrF(a func(error) uintptr, f func(byte) uintptr) uintptr {
	return f(s.right)
}
 // end of oks



// errComplex128 implements ResultComplex128 for a failed result
type errComplex128 struct{
	left error
}

// ErrComplex128(error  | string) makes a new errComplex128
// from an error or a string.
func ErrComplex128(err interface{}) errComplex128 {
	switch err.(type) {
		case string : return errComplex128{errors.New(err.(string))}
		case error : return errComplex128{err.(error)}
	} 
	return errComplex128{errors.New("ErrComplex128 called with something else than string or error")}
}

// Map with errComplex128 receiver is a noop
func (e errComplex128) Map(f func(complex128)) {}

// FoldF with errComplex128 applies it's first argument
// function on its error state
func (e errComplex128) FoldF(l func(e error), r func(complex128)) { l(e.left) }


// MapBool with errComplex128 receiver
// returns a newly built errComplex128 with same error.
func (e errComplex128) MapBool(f func(v complex128) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errComplex128 receiver
// returns its first argument.
func (e errComplex128) FoldBool(a bool, f func(v complex128) bool) bool {
	return a
}
// FoldBoolF with errComplex128 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex128) FoldBoolF(a func(error) bool, f func(complex128) bool) bool {
	return a(e.left)
}

// MapByte with errComplex128 receiver
// returns a newly built errComplex128 with same error.
func (e errComplex128) MapByte(f func(v complex128) byte) ResultByte {
	return ErrByte(e.left)
}
// FoldByte with errComplex128 receiver
// returns its first argument.
func (e errComplex128) FoldByte(a byte, f func(v complex128) byte) byte {
	return a
}
// FoldByteF with errComplex128 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex128) FoldByteF(a func(error) byte, f func(complex128) byte) byte {
	return a(e.left)
}

// MapComplex128 with errComplex128 receiver
// returns a newly built errComplex128 with same error.
func (e errComplex128) MapComplex128(f func(v complex128) complex128) ResultComplex128 {
	return ErrComplex128(e.left)
}
// FoldComplex128 with errComplex128 receiver
// returns its first argument.
func (e errComplex128) FoldComplex128(a complex128, f func(v complex128) complex128) complex128 {
	return a
}
// FoldComplex128F with errComplex128 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex128) FoldComplex128F(a func(error) complex128, f func(complex128) complex128) complex128 {
	return a(e.left)
}

// MapComplex64 with errComplex128 receiver
// returns a newly built errComplex128 with same error.
func (e errComplex128) MapComplex64(f func(v complex128) complex64) ResultComplex64 {
	return ErrComplex64(e.left)
}
// FoldComplex64 with errComplex128 receiver
// returns its first argument.
func (e errComplex128) FoldComplex64(a complex64, f func(v complex128) complex64) complex64 {
	return a
}
// FoldComplex64F with errComplex128 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex128) FoldComplex64F(a func(error) complex64, f func(complex128) complex64) complex64 {
	return a(e.left)
}

// MapFloat32 with errComplex128 receiver
// returns a newly built errComplex128 with same error.
func (e errComplex128) MapFloat32(f func(v complex128) float32) ResultFloat32 {
	return ErrFloat32(e.left)
}
// FoldFloat32 with errComplex128 receiver
// returns its first argument.
func (e errComplex128) FoldFloat32(a float32, f func(v complex128) float32) float32 {
	return a
}
// FoldFloat32F with errComplex128 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex128) FoldFloat32F(a func(error) float32, f func(complex128) float32) float32 {
	return a(e.left)
}

// MapFloat64 with errComplex128 receiver
// returns a newly built errComplex128 with same error.
func (e errComplex128) MapFloat64(f func(v complex128) float64) ResultFloat64 {
	return ErrFloat64(e.left)
}
// FoldFloat64 with errComplex128 receiver
// returns its first argument.
func (e errComplex128) FoldFloat64(a float64, f func(v complex128) float64) float64 {
	return a
}
// FoldFloat64F with errComplex128 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex128) FoldFloat64F(a func(error) float64, f func(complex128) float64) float64 {
	return a(e.left)
}

// MapInt with errComplex128 receiver
// returns a newly built errComplex128 with same error.
func (e errComplex128) MapInt(f func(v complex128) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errComplex128 receiver
// returns its first argument.
func (e errComplex128) FoldInt(a int, f func(v complex128) int) int {
	return a
}
// FoldIntF with errComplex128 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex128) FoldIntF(a func(error) int, f func(complex128) int) int {
	return a(e.left)
}

// MapInt16 with errComplex128 receiver
// returns a newly built errComplex128 with same error.
func (e errComplex128) MapInt16(f func(v complex128) int16) ResultInt16 {
	return ErrInt16(e.left)
}
// FoldInt16 with errComplex128 receiver
// returns its first argument.
func (e errComplex128) FoldInt16(a int16, f func(v complex128) int16) int16 {
	return a
}
// FoldInt16F with errComplex128 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex128) FoldInt16F(a func(error) int16, f func(complex128) int16) int16 {
	return a(e.left)
}

// MapInt32 with errComplex128 receiver
// returns a newly built errComplex128 with same error.
func (e errComplex128) MapInt32(f func(v complex128) int32) ResultInt32 {
	return ErrInt32(e.left)
}
// FoldInt32 with errComplex128 receiver
// returns its first argument.
func (e errComplex128) FoldInt32(a int32, f func(v complex128) int32) int32 {
	return a
}
// FoldInt32F with errComplex128 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex128) FoldInt32F(a func(error) int32, f func(complex128) int32) int32 {
	return a(e.left)
}

// MapInt64 with errComplex128 receiver
// returns a newly built errComplex128 with same error.
func (e errComplex128) MapInt64(f func(v complex128) int64) ResultInt64 {
	return ErrInt64(e.left)
}
// FoldInt64 with errComplex128 receiver
// returns its first argument.
func (e errComplex128) FoldInt64(a int64, f func(v complex128) int64) int64 {
	return a
}
// FoldInt64F with errComplex128 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex128) FoldInt64F(a func(error) int64, f func(complex128) int64) int64 {
	return a(e.left)
}

// MapInt8 with errComplex128 receiver
// returns a newly built errComplex128 with same error.
func (e errComplex128) MapInt8(f func(v complex128) int8) ResultInt8 {
	return ErrInt8(e.left)
}
// FoldInt8 with errComplex128 receiver
// returns its first argument.
func (e errComplex128) FoldInt8(a int8, f func(v complex128) int8) int8 {
	return a
}
// FoldInt8F with errComplex128 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex128) FoldInt8F(a func(error) int8, f func(complex128) int8) int8 {
	return a(e.left)
}

// MapRune with errComplex128 receiver
// returns a newly built errComplex128 with same error.
func (e errComplex128) MapRune(f func(v complex128) rune) ResultRune {
	return ErrRune(e.left)
}
// FoldRune with errComplex128 receiver
// returns its first argument.
func (e errComplex128) FoldRune(a rune, f func(v complex128) rune) rune {
	return a
}
// FoldRuneF with errComplex128 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex128) FoldRuneF(a func(error) rune, f func(complex128) rune) rune {
	return a(e.left)
}

// MapString with errComplex128 receiver
// returns a newly built errComplex128 with same error.
func (e errComplex128) MapString(f func(v complex128) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errComplex128 receiver
// returns its first argument.
func (e errComplex128) FoldString(a string, f func(v complex128) string) string {
	return a
}
// FoldStringF with errComplex128 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex128) FoldStringF(a func(error) string, f func(complex128) string) string {
	return a(e.left)
}

// MapUInt with errComplex128 receiver
// returns a newly built errComplex128 with same error.
func (e errComplex128) MapUInt(f func(v complex128) uint) ResultUInt {
	return ErrUInt(e.left)
}
// FoldUInt with errComplex128 receiver
// returns its first argument.
func (e errComplex128) FoldUInt(a uint, f func(v complex128) uint) uint {
	return a
}
// FoldUIntF with errComplex128 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex128) FoldUIntF(a func(error) uint, f func(complex128) uint) uint {
	return a(e.left)
}

// MapUInt16 with errComplex128 receiver
// returns a newly built errComplex128 with same error.
func (e errComplex128) MapUInt16(f func(v complex128) uint16) ResultUInt16 {
	return ErrUInt16(e.left)
}
// FoldUInt16 with errComplex128 receiver
// returns its first argument.
func (e errComplex128) FoldUInt16(a uint16, f func(v complex128) uint16) uint16 {
	return a
}
// FoldUInt16F with errComplex128 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex128) FoldUInt16F(a func(error) uint16, f func(complex128) uint16) uint16 {
	return a(e.left)
}

// MapUInt32 with errComplex128 receiver
// returns a newly built errComplex128 with same error.
func (e errComplex128) MapUInt32(f func(v complex128) uint32) ResultUInt32 {
	return ErrUInt32(e.left)
}
// FoldUInt32 with errComplex128 receiver
// returns its first argument.
func (e errComplex128) FoldUInt32(a uint32, f func(v complex128) uint32) uint32 {
	return a
}
// FoldUInt32F with errComplex128 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex128) FoldUInt32F(a func(error) uint32, f func(complex128) uint32) uint32 {
	return a(e.left)
}

// MapUInt64 with errComplex128 receiver
// returns a newly built errComplex128 with same error.
func (e errComplex128) MapUInt64(f func(v complex128) uint64) ResultUInt64 {
	return ErrUInt64(e.left)
}
// FoldUInt64 with errComplex128 receiver
// returns its first argument.
func (e errComplex128) FoldUInt64(a uint64, f func(v complex128) uint64) uint64 {
	return a
}
// FoldUInt64F with errComplex128 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex128) FoldUInt64F(a func(error) uint64, f func(complex128) uint64) uint64 {
	return a(e.left)
}

// MapUInt8 with errComplex128 receiver
// returns a newly built errComplex128 with same error.
func (e errComplex128) MapUInt8(f func(v complex128) uint8) ResultUInt8 {
	return ErrUInt8(e.left)
}
// FoldUInt8 with errComplex128 receiver
// returns its first argument.
func (e errComplex128) FoldUInt8(a uint8, f func(v complex128) uint8) uint8 {
	return a
}
// FoldUInt8F with errComplex128 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex128) FoldUInt8F(a func(error) uint8, f func(complex128) uint8) uint8 {
	return a(e.left)
}

// MapUintPtr with errComplex128 receiver
// returns a newly built errComplex128 with same error.
func (e errComplex128) MapUintPtr(f func(v complex128) uintptr) ResultUintPtr {
	return ErrUintPtr(e.left)
}
// FoldUintPtr with errComplex128 receiver
// returns its first argument.
func (e errComplex128) FoldUintPtr(a uintptr, f func(v complex128) uintptr) uintptr {
	return a
}
// FoldUintPtrF with errComplex128 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex128) FoldUintPtrF(a func(error) uintptr, f func(complex128) uintptr) uintptr {
	return a(e.left)
}
 // end of nones

// okComplex128 implements ResultComplex128 for a successful result
type okComplex128 struct {
	right complex128
}

// OkComplex128 returns a successful result with value v of type complex128 
func OkComplex128(v complex128) okComplex128 {
	return okComplex128{v}
}
// MapComplex128 with okComplex128 receiver
// applies its function argument on hold value 
func (s okComplex128) Map(f func(complex128)) { f(s.right) }

// FoldFComplex128 with okComplex128 receiver
// applies its second function argument on hold value 
func (s okComplex128) FoldF(l func(error), r func(complex128)) { r(s.right) }


// MapBool on okComplex128 receiver
// applies its function arguments on hold value and returns an okBool
func (s okComplex128) MapBool(f func(complex128) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldBool(a bool, f func(complex128) bool) bool {
	return f(s.right)
}

// FoldBoolF on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldBoolF(a func(error) bool, f func(complex128) bool) bool {
	return f(s.right)
}

// MapByte on okComplex128 receiver
// applies its function arguments on hold value and returns an okByte
func (s okComplex128) MapByte(f func(complex128) byte) ResultByte {
	return OkByte(f(s.right))
}

// FoldByte on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldByte(a byte, f func(complex128) byte) byte {
	return f(s.right)
}

// FoldByteF on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldByteF(a func(error) byte, f func(complex128) byte) byte {
	return f(s.right)
}

// MapComplex128 on okComplex128 receiver
// applies its function arguments on hold value and returns an okComplex128
func (s okComplex128) MapComplex128(f func(complex128) complex128) ResultComplex128 {
	return OkComplex128(f(s.right))
}

// FoldComplex128 on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldComplex128(a complex128, f func(complex128) complex128) complex128 {
	return f(s.right)
}

// FoldComplex128F on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldComplex128F(a func(error) complex128, f func(complex128) complex128) complex128 {
	return f(s.right)
}

// MapComplex64 on okComplex128 receiver
// applies its function arguments on hold value and returns an okComplex64
func (s okComplex128) MapComplex64(f func(complex128) complex64) ResultComplex64 {
	return OkComplex64(f(s.right))
}

// FoldComplex64 on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldComplex64(a complex64, f func(complex128) complex64) complex64 {
	return f(s.right)
}

// FoldComplex64F on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldComplex64F(a func(error) complex64, f func(complex128) complex64) complex64 {
	return f(s.right)
}

// MapFloat32 on okComplex128 receiver
// applies its function arguments on hold value and returns an okFloat32
func (s okComplex128) MapFloat32(f func(complex128) float32) ResultFloat32 {
	return OkFloat32(f(s.right))
}

// FoldFloat32 on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldFloat32(a float32, f func(complex128) float32) float32 {
	return f(s.right)
}

// FoldFloat32F on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldFloat32F(a func(error) float32, f func(complex128) float32) float32 {
	return f(s.right)
}

// MapFloat64 on okComplex128 receiver
// applies its function arguments on hold value and returns an okFloat64
func (s okComplex128) MapFloat64(f func(complex128) float64) ResultFloat64 {
	return OkFloat64(f(s.right))
}

// FoldFloat64 on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldFloat64(a float64, f func(complex128) float64) float64 {
	return f(s.right)
}

// FoldFloat64F on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldFloat64F(a func(error) float64, f func(complex128) float64) float64 {
	return f(s.right)
}

// MapInt on okComplex128 receiver
// applies its function arguments on hold value and returns an okInt
func (s okComplex128) MapInt(f func(complex128) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldInt(a int, f func(complex128) int) int {
	return f(s.right)
}

// FoldIntF on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldIntF(a func(error) int, f func(complex128) int) int {
	return f(s.right)
}

// MapInt16 on okComplex128 receiver
// applies its function arguments on hold value and returns an okInt16
func (s okComplex128) MapInt16(f func(complex128) int16) ResultInt16 {
	return OkInt16(f(s.right))
}

// FoldInt16 on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldInt16(a int16, f func(complex128) int16) int16 {
	return f(s.right)
}

// FoldInt16F on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldInt16F(a func(error) int16, f func(complex128) int16) int16 {
	return f(s.right)
}

// MapInt32 on okComplex128 receiver
// applies its function arguments on hold value and returns an okInt32
func (s okComplex128) MapInt32(f func(complex128) int32) ResultInt32 {
	return OkInt32(f(s.right))
}

// FoldInt32 on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldInt32(a int32, f func(complex128) int32) int32 {
	return f(s.right)
}

// FoldInt32F on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldInt32F(a func(error) int32, f func(complex128) int32) int32 {
	return f(s.right)
}

// MapInt64 on okComplex128 receiver
// applies its function arguments on hold value and returns an okInt64
func (s okComplex128) MapInt64(f func(complex128) int64) ResultInt64 {
	return OkInt64(f(s.right))
}

// FoldInt64 on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldInt64(a int64, f func(complex128) int64) int64 {
	return f(s.right)
}

// FoldInt64F on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldInt64F(a func(error) int64, f func(complex128) int64) int64 {
	return f(s.right)
}

// MapInt8 on okComplex128 receiver
// applies its function arguments on hold value and returns an okInt8
func (s okComplex128) MapInt8(f func(complex128) int8) ResultInt8 {
	return OkInt8(f(s.right))
}

// FoldInt8 on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldInt8(a int8, f func(complex128) int8) int8 {
	return f(s.right)
}

// FoldInt8F on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldInt8F(a func(error) int8, f func(complex128) int8) int8 {
	return f(s.right)
}

// MapRune on okComplex128 receiver
// applies its function arguments on hold value and returns an okRune
func (s okComplex128) MapRune(f func(complex128) rune) ResultRune {
	return OkRune(f(s.right))
}

// FoldRune on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldRune(a rune, f func(complex128) rune) rune {
	return f(s.right)
}

// FoldRuneF on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldRuneF(a func(error) rune, f func(complex128) rune) rune {
	return f(s.right)
}

// MapString on okComplex128 receiver
// applies its function arguments on hold value and returns an okString
func (s okComplex128) MapString(f func(complex128) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldString(a string, f func(complex128) string) string {
	return f(s.right)
}

// FoldStringF on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldStringF(a func(error) string, f func(complex128) string) string {
	return f(s.right)
}

// MapUInt on okComplex128 receiver
// applies its function arguments on hold value and returns an okUInt
func (s okComplex128) MapUInt(f func(complex128) uint) ResultUInt {
	return OkUInt(f(s.right))
}

// FoldUInt on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldUInt(a uint, f func(complex128) uint) uint {
	return f(s.right)
}

// FoldUIntF on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldUIntF(a func(error) uint, f func(complex128) uint) uint {
	return f(s.right)
}

// MapUInt16 on okComplex128 receiver
// applies its function arguments on hold value and returns an okUInt16
func (s okComplex128) MapUInt16(f func(complex128) uint16) ResultUInt16 {
	return OkUInt16(f(s.right))
}

// FoldUInt16 on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldUInt16(a uint16, f func(complex128) uint16) uint16 {
	return f(s.right)
}

// FoldUInt16F on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldUInt16F(a func(error) uint16, f func(complex128) uint16) uint16 {
	return f(s.right)
}

// MapUInt32 on okComplex128 receiver
// applies its function arguments on hold value and returns an okUInt32
func (s okComplex128) MapUInt32(f func(complex128) uint32) ResultUInt32 {
	return OkUInt32(f(s.right))
}

// FoldUInt32 on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldUInt32(a uint32, f func(complex128) uint32) uint32 {
	return f(s.right)
}

// FoldUInt32F on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldUInt32F(a func(error) uint32, f func(complex128) uint32) uint32 {
	return f(s.right)
}

// MapUInt64 on okComplex128 receiver
// applies its function arguments on hold value and returns an okUInt64
func (s okComplex128) MapUInt64(f func(complex128) uint64) ResultUInt64 {
	return OkUInt64(f(s.right))
}

// FoldUInt64 on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldUInt64(a uint64, f func(complex128) uint64) uint64 {
	return f(s.right)
}

// FoldUInt64F on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldUInt64F(a func(error) uint64, f func(complex128) uint64) uint64 {
	return f(s.right)
}

// MapUInt8 on okComplex128 receiver
// applies its function arguments on hold value and returns an okUInt8
func (s okComplex128) MapUInt8(f func(complex128) uint8) ResultUInt8 {
	return OkUInt8(f(s.right))
}

// FoldUInt8 on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldUInt8(a uint8, f func(complex128) uint8) uint8 {
	return f(s.right)
}

// FoldUInt8F on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldUInt8F(a func(error) uint8, f func(complex128) uint8) uint8 {
	return f(s.right)
}

// MapUintPtr on okComplex128 receiver
// applies its function arguments on hold value and returns an okUintPtr
func (s okComplex128) MapUintPtr(f func(complex128) uintptr) ResultUintPtr {
	return OkUintPtr(f(s.right))
}

// FoldUintPtr on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldUintPtr(a uintptr, f func(complex128) uintptr) uintptr {
	return f(s.right)
}

// FoldUintPtrF on okComplex128 receiver
// applies its second function arguments on hold value and returns an complex128
func (s okComplex128) FoldUintPtrF(a func(error) uintptr, f func(complex128) uintptr) uintptr {
	return f(s.right)
}
 // end of oks



// errComplex64 implements ResultComplex64 for a failed result
type errComplex64 struct{
	left error
}

// ErrComplex64(error  | string) makes a new errComplex64
// from an error or a string.
func ErrComplex64(err interface{}) errComplex64 {
	switch err.(type) {
		case string : return errComplex64{errors.New(err.(string))}
		case error : return errComplex64{err.(error)}
	} 
	return errComplex64{errors.New("ErrComplex64 called with something else than string or error")}
}

// Map with errComplex64 receiver is a noop
func (e errComplex64) Map(f func(complex64)) {}

// FoldF with errComplex64 applies it's first argument
// function on its error state
func (e errComplex64) FoldF(l func(e error), r func(complex64)) { l(e.left) }


// MapBool with errComplex64 receiver
// returns a newly built errComplex64 with same error.
func (e errComplex64) MapBool(f func(v complex64) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errComplex64 receiver
// returns its first argument.
func (e errComplex64) FoldBool(a bool, f func(v complex64) bool) bool {
	return a
}
// FoldBoolF with errComplex64 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex64) FoldBoolF(a func(error) bool, f func(complex64) bool) bool {
	return a(e.left)
}

// MapByte with errComplex64 receiver
// returns a newly built errComplex64 with same error.
func (e errComplex64) MapByte(f func(v complex64) byte) ResultByte {
	return ErrByte(e.left)
}
// FoldByte with errComplex64 receiver
// returns its first argument.
func (e errComplex64) FoldByte(a byte, f func(v complex64) byte) byte {
	return a
}
// FoldByteF with errComplex64 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex64) FoldByteF(a func(error) byte, f func(complex64) byte) byte {
	return a(e.left)
}

// MapComplex128 with errComplex64 receiver
// returns a newly built errComplex64 with same error.
func (e errComplex64) MapComplex128(f func(v complex64) complex128) ResultComplex128 {
	return ErrComplex128(e.left)
}
// FoldComplex128 with errComplex64 receiver
// returns its first argument.
func (e errComplex64) FoldComplex128(a complex128, f func(v complex64) complex128) complex128 {
	return a
}
// FoldComplex128F with errComplex64 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex64) FoldComplex128F(a func(error) complex128, f func(complex64) complex128) complex128 {
	return a(e.left)
}

// MapComplex64 with errComplex64 receiver
// returns a newly built errComplex64 with same error.
func (e errComplex64) MapComplex64(f func(v complex64) complex64) ResultComplex64 {
	return ErrComplex64(e.left)
}
// FoldComplex64 with errComplex64 receiver
// returns its first argument.
func (e errComplex64) FoldComplex64(a complex64, f func(v complex64) complex64) complex64 {
	return a
}
// FoldComplex64F with errComplex64 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex64) FoldComplex64F(a func(error) complex64, f func(complex64) complex64) complex64 {
	return a(e.left)
}

// MapFloat32 with errComplex64 receiver
// returns a newly built errComplex64 with same error.
func (e errComplex64) MapFloat32(f func(v complex64) float32) ResultFloat32 {
	return ErrFloat32(e.left)
}
// FoldFloat32 with errComplex64 receiver
// returns its first argument.
func (e errComplex64) FoldFloat32(a float32, f func(v complex64) float32) float32 {
	return a
}
// FoldFloat32F with errComplex64 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex64) FoldFloat32F(a func(error) float32, f func(complex64) float32) float32 {
	return a(e.left)
}

// MapFloat64 with errComplex64 receiver
// returns a newly built errComplex64 with same error.
func (e errComplex64) MapFloat64(f func(v complex64) float64) ResultFloat64 {
	return ErrFloat64(e.left)
}
// FoldFloat64 with errComplex64 receiver
// returns its first argument.
func (e errComplex64) FoldFloat64(a float64, f func(v complex64) float64) float64 {
	return a
}
// FoldFloat64F with errComplex64 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex64) FoldFloat64F(a func(error) float64, f func(complex64) float64) float64 {
	return a(e.left)
}

// MapInt with errComplex64 receiver
// returns a newly built errComplex64 with same error.
func (e errComplex64) MapInt(f func(v complex64) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errComplex64 receiver
// returns its first argument.
func (e errComplex64) FoldInt(a int, f func(v complex64) int) int {
	return a
}
// FoldIntF with errComplex64 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex64) FoldIntF(a func(error) int, f func(complex64) int) int {
	return a(e.left)
}

// MapInt16 with errComplex64 receiver
// returns a newly built errComplex64 with same error.
func (e errComplex64) MapInt16(f func(v complex64) int16) ResultInt16 {
	return ErrInt16(e.left)
}
// FoldInt16 with errComplex64 receiver
// returns its first argument.
func (e errComplex64) FoldInt16(a int16, f func(v complex64) int16) int16 {
	return a
}
// FoldInt16F with errComplex64 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex64) FoldInt16F(a func(error) int16, f func(complex64) int16) int16 {
	return a(e.left)
}

// MapInt32 with errComplex64 receiver
// returns a newly built errComplex64 with same error.
func (e errComplex64) MapInt32(f func(v complex64) int32) ResultInt32 {
	return ErrInt32(e.left)
}
// FoldInt32 with errComplex64 receiver
// returns its first argument.
func (e errComplex64) FoldInt32(a int32, f func(v complex64) int32) int32 {
	return a
}
// FoldInt32F with errComplex64 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex64) FoldInt32F(a func(error) int32, f func(complex64) int32) int32 {
	return a(e.left)
}

// MapInt64 with errComplex64 receiver
// returns a newly built errComplex64 with same error.
func (e errComplex64) MapInt64(f func(v complex64) int64) ResultInt64 {
	return ErrInt64(e.left)
}
// FoldInt64 with errComplex64 receiver
// returns its first argument.
func (e errComplex64) FoldInt64(a int64, f func(v complex64) int64) int64 {
	return a
}
// FoldInt64F with errComplex64 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex64) FoldInt64F(a func(error) int64, f func(complex64) int64) int64 {
	return a(e.left)
}

// MapInt8 with errComplex64 receiver
// returns a newly built errComplex64 with same error.
func (e errComplex64) MapInt8(f func(v complex64) int8) ResultInt8 {
	return ErrInt8(e.left)
}
// FoldInt8 with errComplex64 receiver
// returns its first argument.
func (e errComplex64) FoldInt8(a int8, f func(v complex64) int8) int8 {
	return a
}
// FoldInt8F with errComplex64 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex64) FoldInt8F(a func(error) int8, f func(complex64) int8) int8 {
	return a(e.left)
}

// MapRune with errComplex64 receiver
// returns a newly built errComplex64 with same error.
func (e errComplex64) MapRune(f func(v complex64) rune) ResultRune {
	return ErrRune(e.left)
}
// FoldRune with errComplex64 receiver
// returns its first argument.
func (e errComplex64) FoldRune(a rune, f func(v complex64) rune) rune {
	return a
}
// FoldRuneF with errComplex64 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex64) FoldRuneF(a func(error) rune, f func(complex64) rune) rune {
	return a(e.left)
}

// MapString with errComplex64 receiver
// returns a newly built errComplex64 with same error.
func (e errComplex64) MapString(f func(v complex64) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errComplex64 receiver
// returns its first argument.
func (e errComplex64) FoldString(a string, f func(v complex64) string) string {
	return a
}
// FoldStringF with errComplex64 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex64) FoldStringF(a func(error) string, f func(complex64) string) string {
	return a(e.left)
}

// MapUInt with errComplex64 receiver
// returns a newly built errComplex64 with same error.
func (e errComplex64) MapUInt(f func(v complex64) uint) ResultUInt {
	return ErrUInt(e.left)
}
// FoldUInt with errComplex64 receiver
// returns its first argument.
func (e errComplex64) FoldUInt(a uint, f func(v complex64) uint) uint {
	return a
}
// FoldUIntF with errComplex64 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex64) FoldUIntF(a func(error) uint, f func(complex64) uint) uint {
	return a(e.left)
}

// MapUInt16 with errComplex64 receiver
// returns a newly built errComplex64 with same error.
func (e errComplex64) MapUInt16(f func(v complex64) uint16) ResultUInt16 {
	return ErrUInt16(e.left)
}
// FoldUInt16 with errComplex64 receiver
// returns its first argument.
func (e errComplex64) FoldUInt16(a uint16, f func(v complex64) uint16) uint16 {
	return a
}
// FoldUInt16F with errComplex64 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex64) FoldUInt16F(a func(error) uint16, f func(complex64) uint16) uint16 {
	return a(e.left)
}

// MapUInt32 with errComplex64 receiver
// returns a newly built errComplex64 with same error.
func (e errComplex64) MapUInt32(f func(v complex64) uint32) ResultUInt32 {
	return ErrUInt32(e.left)
}
// FoldUInt32 with errComplex64 receiver
// returns its first argument.
func (e errComplex64) FoldUInt32(a uint32, f func(v complex64) uint32) uint32 {
	return a
}
// FoldUInt32F with errComplex64 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex64) FoldUInt32F(a func(error) uint32, f func(complex64) uint32) uint32 {
	return a(e.left)
}

// MapUInt64 with errComplex64 receiver
// returns a newly built errComplex64 with same error.
func (e errComplex64) MapUInt64(f func(v complex64) uint64) ResultUInt64 {
	return ErrUInt64(e.left)
}
// FoldUInt64 with errComplex64 receiver
// returns its first argument.
func (e errComplex64) FoldUInt64(a uint64, f func(v complex64) uint64) uint64 {
	return a
}
// FoldUInt64F with errComplex64 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex64) FoldUInt64F(a func(error) uint64, f func(complex64) uint64) uint64 {
	return a(e.left)
}

// MapUInt8 with errComplex64 receiver
// returns a newly built errComplex64 with same error.
func (e errComplex64) MapUInt8(f func(v complex64) uint8) ResultUInt8 {
	return ErrUInt8(e.left)
}
// FoldUInt8 with errComplex64 receiver
// returns its first argument.
func (e errComplex64) FoldUInt8(a uint8, f func(v complex64) uint8) uint8 {
	return a
}
// FoldUInt8F with errComplex64 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex64) FoldUInt8F(a func(error) uint8, f func(complex64) uint8) uint8 {
	return a(e.left)
}

// MapUintPtr with errComplex64 receiver
// returns a newly built errComplex64 with same error.
func (e errComplex64) MapUintPtr(f func(v complex64) uintptr) ResultUintPtr {
	return ErrUintPtr(e.left)
}
// FoldUintPtr with errComplex64 receiver
// returns its first argument.
func (e errComplex64) FoldUintPtr(a uintptr, f func(v complex64) uintptr) uintptr {
	return a
}
// FoldUintPtrF with errComplex64 receiver
// returns the result of its first argument applied to the result error state.
func (e errComplex64) FoldUintPtrF(a func(error) uintptr, f func(complex64) uintptr) uintptr {
	return a(e.left)
}
 // end of nones

// okComplex64 implements ResultComplex64 for a successful result
type okComplex64 struct {
	right complex64
}

// OkComplex64 returns a successful result with value v of type complex64 
func OkComplex64(v complex64) okComplex64 {
	return okComplex64{v}
}
// MapComplex64 with okComplex64 receiver
// applies its function argument on hold value 
func (s okComplex64) Map(f func(complex64)) { f(s.right) }

// FoldFComplex64 with okComplex64 receiver
// applies its second function argument on hold value 
func (s okComplex64) FoldF(l func(error), r func(complex64)) { r(s.right) }


// MapBool on okComplex64 receiver
// applies its function arguments on hold value and returns an okBool
func (s okComplex64) MapBool(f func(complex64) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldBool(a bool, f func(complex64) bool) bool {
	return f(s.right)
}

// FoldBoolF on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldBoolF(a func(error) bool, f func(complex64) bool) bool {
	return f(s.right)
}

// MapByte on okComplex64 receiver
// applies its function arguments on hold value and returns an okByte
func (s okComplex64) MapByte(f func(complex64) byte) ResultByte {
	return OkByte(f(s.right))
}

// FoldByte on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldByte(a byte, f func(complex64) byte) byte {
	return f(s.right)
}

// FoldByteF on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldByteF(a func(error) byte, f func(complex64) byte) byte {
	return f(s.right)
}

// MapComplex128 on okComplex64 receiver
// applies its function arguments on hold value and returns an okComplex128
func (s okComplex64) MapComplex128(f func(complex64) complex128) ResultComplex128 {
	return OkComplex128(f(s.right))
}

// FoldComplex128 on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldComplex128(a complex128, f func(complex64) complex128) complex128 {
	return f(s.right)
}

// FoldComplex128F on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldComplex128F(a func(error) complex128, f func(complex64) complex128) complex128 {
	return f(s.right)
}

// MapComplex64 on okComplex64 receiver
// applies its function arguments on hold value and returns an okComplex64
func (s okComplex64) MapComplex64(f func(complex64) complex64) ResultComplex64 {
	return OkComplex64(f(s.right))
}

// FoldComplex64 on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldComplex64(a complex64, f func(complex64) complex64) complex64 {
	return f(s.right)
}

// FoldComplex64F on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldComplex64F(a func(error) complex64, f func(complex64) complex64) complex64 {
	return f(s.right)
}

// MapFloat32 on okComplex64 receiver
// applies its function arguments on hold value and returns an okFloat32
func (s okComplex64) MapFloat32(f func(complex64) float32) ResultFloat32 {
	return OkFloat32(f(s.right))
}

// FoldFloat32 on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldFloat32(a float32, f func(complex64) float32) float32 {
	return f(s.right)
}

// FoldFloat32F on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldFloat32F(a func(error) float32, f func(complex64) float32) float32 {
	return f(s.right)
}

// MapFloat64 on okComplex64 receiver
// applies its function arguments on hold value and returns an okFloat64
func (s okComplex64) MapFloat64(f func(complex64) float64) ResultFloat64 {
	return OkFloat64(f(s.right))
}

// FoldFloat64 on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldFloat64(a float64, f func(complex64) float64) float64 {
	return f(s.right)
}

// FoldFloat64F on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldFloat64F(a func(error) float64, f func(complex64) float64) float64 {
	return f(s.right)
}

// MapInt on okComplex64 receiver
// applies its function arguments on hold value and returns an okInt
func (s okComplex64) MapInt(f func(complex64) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldInt(a int, f func(complex64) int) int {
	return f(s.right)
}

// FoldIntF on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldIntF(a func(error) int, f func(complex64) int) int {
	return f(s.right)
}

// MapInt16 on okComplex64 receiver
// applies its function arguments on hold value and returns an okInt16
func (s okComplex64) MapInt16(f func(complex64) int16) ResultInt16 {
	return OkInt16(f(s.right))
}

// FoldInt16 on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldInt16(a int16, f func(complex64) int16) int16 {
	return f(s.right)
}

// FoldInt16F on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldInt16F(a func(error) int16, f func(complex64) int16) int16 {
	return f(s.right)
}

// MapInt32 on okComplex64 receiver
// applies its function arguments on hold value and returns an okInt32
func (s okComplex64) MapInt32(f func(complex64) int32) ResultInt32 {
	return OkInt32(f(s.right))
}

// FoldInt32 on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldInt32(a int32, f func(complex64) int32) int32 {
	return f(s.right)
}

// FoldInt32F on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldInt32F(a func(error) int32, f func(complex64) int32) int32 {
	return f(s.right)
}

// MapInt64 on okComplex64 receiver
// applies its function arguments on hold value and returns an okInt64
func (s okComplex64) MapInt64(f func(complex64) int64) ResultInt64 {
	return OkInt64(f(s.right))
}

// FoldInt64 on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldInt64(a int64, f func(complex64) int64) int64 {
	return f(s.right)
}

// FoldInt64F on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldInt64F(a func(error) int64, f func(complex64) int64) int64 {
	return f(s.right)
}

// MapInt8 on okComplex64 receiver
// applies its function arguments on hold value and returns an okInt8
func (s okComplex64) MapInt8(f func(complex64) int8) ResultInt8 {
	return OkInt8(f(s.right))
}

// FoldInt8 on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldInt8(a int8, f func(complex64) int8) int8 {
	return f(s.right)
}

// FoldInt8F on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldInt8F(a func(error) int8, f func(complex64) int8) int8 {
	return f(s.right)
}

// MapRune on okComplex64 receiver
// applies its function arguments on hold value and returns an okRune
func (s okComplex64) MapRune(f func(complex64) rune) ResultRune {
	return OkRune(f(s.right))
}

// FoldRune on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldRune(a rune, f func(complex64) rune) rune {
	return f(s.right)
}

// FoldRuneF on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldRuneF(a func(error) rune, f func(complex64) rune) rune {
	return f(s.right)
}

// MapString on okComplex64 receiver
// applies its function arguments on hold value and returns an okString
func (s okComplex64) MapString(f func(complex64) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldString(a string, f func(complex64) string) string {
	return f(s.right)
}

// FoldStringF on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldStringF(a func(error) string, f func(complex64) string) string {
	return f(s.right)
}

// MapUInt on okComplex64 receiver
// applies its function arguments on hold value and returns an okUInt
func (s okComplex64) MapUInt(f func(complex64) uint) ResultUInt {
	return OkUInt(f(s.right))
}

// FoldUInt on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldUInt(a uint, f func(complex64) uint) uint {
	return f(s.right)
}

// FoldUIntF on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldUIntF(a func(error) uint, f func(complex64) uint) uint {
	return f(s.right)
}

// MapUInt16 on okComplex64 receiver
// applies its function arguments on hold value and returns an okUInt16
func (s okComplex64) MapUInt16(f func(complex64) uint16) ResultUInt16 {
	return OkUInt16(f(s.right))
}

// FoldUInt16 on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldUInt16(a uint16, f func(complex64) uint16) uint16 {
	return f(s.right)
}

// FoldUInt16F on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldUInt16F(a func(error) uint16, f func(complex64) uint16) uint16 {
	return f(s.right)
}

// MapUInt32 on okComplex64 receiver
// applies its function arguments on hold value and returns an okUInt32
func (s okComplex64) MapUInt32(f func(complex64) uint32) ResultUInt32 {
	return OkUInt32(f(s.right))
}

// FoldUInt32 on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldUInt32(a uint32, f func(complex64) uint32) uint32 {
	return f(s.right)
}

// FoldUInt32F on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldUInt32F(a func(error) uint32, f func(complex64) uint32) uint32 {
	return f(s.right)
}

// MapUInt64 on okComplex64 receiver
// applies its function arguments on hold value and returns an okUInt64
func (s okComplex64) MapUInt64(f func(complex64) uint64) ResultUInt64 {
	return OkUInt64(f(s.right))
}

// FoldUInt64 on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldUInt64(a uint64, f func(complex64) uint64) uint64 {
	return f(s.right)
}

// FoldUInt64F on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldUInt64F(a func(error) uint64, f func(complex64) uint64) uint64 {
	return f(s.right)
}

// MapUInt8 on okComplex64 receiver
// applies its function arguments on hold value and returns an okUInt8
func (s okComplex64) MapUInt8(f func(complex64) uint8) ResultUInt8 {
	return OkUInt8(f(s.right))
}

// FoldUInt8 on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldUInt8(a uint8, f func(complex64) uint8) uint8 {
	return f(s.right)
}

// FoldUInt8F on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldUInt8F(a func(error) uint8, f func(complex64) uint8) uint8 {
	return f(s.right)
}

// MapUintPtr on okComplex64 receiver
// applies its function arguments on hold value and returns an okUintPtr
func (s okComplex64) MapUintPtr(f func(complex64) uintptr) ResultUintPtr {
	return OkUintPtr(f(s.right))
}

// FoldUintPtr on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldUintPtr(a uintptr, f func(complex64) uintptr) uintptr {
	return f(s.right)
}

// FoldUintPtrF on okComplex64 receiver
// applies its second function arguments on hold value and returns an complex64
func (s okComplex64) FoldUintPtrF(a func(error) uintptr, f func(complex64) uintptr) uintptr {
	return f(s.right)
}
 // end of oks



// errFloat32 implements ResultFloat32 for a failed result
type errFloat32 struct{
	left error
}

// ErrFloat32(error  | string) makes a new errFloat32
// from an error or a string.
func ErrFloat32(err interface{}) errFloat32 {
	switch err.(type) {
		case string : return errFloat32{errors.New(err.(string))}
		case error : return errFloat32{err.(error)}
	} 
	return errFloat32{errors.New("ErrFloat32 called with something else than string or error")}
}

// Map with errFloat32 receiver is a noop
func (e errFloat32) Map(f func(float32)) {}

// FoldF with errFloat32 applies it's first argument
// function on its error state
func (e errFloat32) FoldF(l func(e error), r func(float32)) { l(e.left) }


// MapBool with errFloat32 receiver
// returns a newly built errFloat32 with same error.
func (e errFloat32) MapBool(f func(v float32) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errFloat32 receiver
// returns its first argument.
func (e errFloat32) FoldBool(a bool, f func(v float32) bool) bool {
	return a
}
// FoldBoolF with errFloat32 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat32) FoldBoolF(a func(error) bool, f func(float32) bool) bool {
	return a(e.left)
}

// MapByte with errFloat32 receiver
// returns a newly built errFloat32 with same error.
func (e errFloat32) MapByte(f func(v float32) byte) ResultByte {
	return ErrByte(e.left)
}
// FoldByte with errFloat32 receiver
// returns its first argument.
func (e errFloat32) FoldByte(a byte, f func(v float32) byte) byte {
	return a
}
// FoldByteF with errFloat32 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat32) FoldByteF(a func(error) byte, f func(float32) byte) byte {
	return a(e.left)
}

// MapComplex128 with errFloat32 receiver
// returns a newly built errFloat32 with same error.
func (e errFloat32) MapComplex128(f func(v float32) complex128) ResultComplex128 {
	return ErrComplex128(e.left)
}
// FoldComplex128 with errFloat32 receiver
// returns its first argument.
func (e errFloat32) FoldComplex128(a complex128, f func(v float32) complex128) complex128 {
	return a
}
// FoldComplex128F with errFloat32 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat32) FoldComplex128F(a func(error) complex128, f func(float32) complex128) complex128 {
	return a(e.left)
}

// MapComplex64 with errFloat32 receiver
// returns a newly built errFloat32 with same error.
func (e errFloat32) MapComplex64(f func(v float32) complex64) ResultComplex64 {
	return ErrComplex64(e.left)
}
// FoldComplex64 with errFloat32 receiver
// returns its first argument.
func (e errFloat32) FoldComplex64(a complex64, f func(v float32) complex64) complex64 {
	return a
}
// FoldComplex64F with errFloat32 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat32) FoldComplex64F(a func(error) complex64, f func(float32) complex64) complex64 {
	return a(e.left)
}

// MapFloat32 with errFloat32 receiver
// returns a newly built errFloat32 with same error.
func (e errFloat32) MapFloat32(f func(v float32) float32) ResultFloat32 {
	return ErrFloat32(e.left)
}
// FoldFloat32 with errFloat32 receiver
// returns its first argument.
func (e errFloat32) FoldFloat32(a float32, f func(v float32) float32) float32 {
	return a
}
// FoldFloat32F with errFloat32 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat32) FoldFloat32F(a func(error) float32, f func(float32) float32) float32 {
	return a(e.left)
}

// MapFloat64 with errFloat32 receiver
// returns a newly built errFloat32 with same error.
func (e errFloat32) MapFloat64(f func(v float32) float64) ResultFloat64 {
	return ErrFloat64(e.left)
}
// FoldFloat64 with errFloat32 receiver
// returns its first argument.
func (e errFloat32) FoldFloat64(a float64, f func(v float32) float64) float64 {
	return a
}
// FoldFloat64F with errFloat32 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat32) FoldFloat64F(a func(error) float64, f func(float32) float64) float64 {
	return a(e.left)
}

// MapInt with errFloat32 receiver
// returns a newly built errFloat32 with same error.
func (e errFloat32) MapInt(f func(v float32) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errFloat32 receiver
// returns its first argument.
func (e errFloat32) FoldInt(a int, f func(v float32) int) int {
	return a
}
// FoldIntF with errFloat32 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat32) FoldIntF(a func(error) int, f func(float32) int) int {
	return a(e.left)
}

// MapInt16 with errFloat32 receiver
// returns a newly built errFloat32 with same error.
func (e errFloat32) MapInt16(f func(v float32) int16) ResultInt16 {
	return ErrInt16(e.left)
}
// FoldInt16 with errFloat32 receiver
// returns its first argument.
func (e errFloat32) FoldInt16(a int16, f func(v float32) int16) int16 {
	return a
}
// FoldInt16F with errFloat32 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat32) FoldInt16F(a func(error) int16, f func(float32) int16) int16 {
	return a(e.left)
}

// MapInt32 with errFloat32 receiver
// returns a newly built errFloat32 with same error.
func (e errFloat32) MapInt32(f func(v float32) int32) ResultInt32 {
	return ErrInt32(e.left)
}
// FoldInt32 with errFloat32 receiver
// returns its first argument.
func (e errFloat32) FoldInt32(a int32, f func(v float32) int32) int32 {
	return a
}
// FoldInt32F with errFloat32 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat32) FoldInt32F(a func(error) int32, f func(float32) int32) int32 {
	return a(e.left)
}

// MapInt64 with errFloat32 receiver
// returns a newly built errFloat32 with same error.
func (e errFloat32) MapInt64(f func(v float32) int64) ResultInt64 {
	return ErrInt64(e.left)
}
// FoldInt64 with errFloat32 receiver
// returns its first argument.
func (e errFloat32) FoldInt64(a int64, f func(v float32) int64) int64 {
	return a
}
// FoldInt64F with errFloat32 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat32) FoldInt64F(a func(error) int64, f func(float32) int64) int64 {
	return a(e.left)
}

// MapInt8 with errFloat32 receiver
// returns a newly built errFloat32 with same error.
func (e errFloat32) MapInt8(f func(v float32) int8) ResultInt8 {
	return ErrInt8(e.left)
}
// FoldInt8 with errFloat32 receiver
// returns its first argument.
func (e errFloat32) FoldInt8(a int8, f func(v float32) int8) int8 {
	return a
}
// FoldInt8F with errFloat32 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat32) FoldInt8F(a func(error) int8, f func(float32) int8) int8 {
	return a(e.left)
}

// MapRune with errFloat32 receiver
// returns a newly built errFloat32 with same error.
func (e errFloat32) MapRune(f func(v float32) rune) ResultRune {
	return ErrRune(e.left)
}
// FoldRune with errFloat32 receiver
// returns its first argument.
func (e errFloat32) FoldRune(a rune, f func(v float32) rune) rune {
	return a
}
// FoldRuneF with errFloat32 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat32) FoldRuneF(a func(error) rune, f func(float32) rune) rune {
	return a(e.left)
}

// MapString with errFloat32 receiver
// returns a newly built errFloat32 with same error.
func (e errFloat32) MapString(f func(v float32) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errFloat32 receiver
// returns its first argument.
func (e errFloat32) FoldString(a string, f func(v float32) string) string {
	return a
}
// FoldStringF with errFloat32 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat32) FoldStringF(a func(error) string, f func(float32) string) string {
	return a(e.left)
}

// MapUInt with errFloat32 receiver
// returns a newly built errFloat32 with same error.
func (e errFloat32) MapUInt(f func(v float32) uint) ResultUInt {
	return ErrUInt(e.left)
}
// FoldUInt with errFloat32 receiver
// returns its first argument.
func (e errFloat32) FoldUInt(a uint, f func(v float32) uint) uint {
	return a
}
// FoldUIntF with errFloat32 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat32) FoldUIntF(a func(error) uint, f func(float32) uint) uint {
	return a(e.left)
}

// MapUInt16 with errFloat32 receiver
// returns a newly built errFloat32 with same error.
func (e errFloat32) MapUInt16(f func(v float32) uint16) ResultUInt16 {
	return ErrUInt16(e.left)
}
// FoldUInt16 with errFloat32 receiver
// returns its first argument.
func (e errFloat32) FoldUInt16(a uint16, f func(v float32) uint16) uint16 {
	return a
}
// FoldUInt16F with errFloat32 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat32) FoldUInt16F(a func(error) uint16, f func(float32) uint16) uint16 {
	return a(e.left)
}

// MapUInt32 with errFloat32 receiver
// returns a newly built errFloat32 with same error.
func (e errFloat32) MapUInt32(f func(v float32) uint32) ResultUInt32 {
	return ErrUInt32(e.left)
}
// FoldUInt32 with errFloat32 receiver
// returns its first argument.
func (e errFloat32) FoldUInt32(a uint32, f func(v float32) uint32) uint32 {
	return a
}
// FoldUInt32F with errFloat32 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat32) FoldUInt32F(a func(error) uint32, f func(float32) uint32) uint32 {
	return a(e.left)
}

// MapUInt64 with errFloat32 receiver
// returns a newly built errFloat32 with same error.
func (e errFloat32) MapUInt64(f func(v float32) uint64) ResultUInt64 {
	return ErrUInt64(e.left)
}
// FoldUInt64 with errFloat32 receiver
// returns its first argument.
func (e errFloat32) FoldUInt64(a uint64, f func(v float32) uint64) uint64 {
	return a
}
// FoldUInt64F with errFloat32 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat32) FoldUInt64F(a func(error) uint64, f func(float32) uint64) uint64 {
	return a(e.left)
}

// MapUInt8 with errFloat32 receiver
// returns a newly built errFloat32 with same error.
func (e errFloat32) MapUInt8(f func(v float32) uint8) ResultUInt8 {
	return ErrUInt8(e.left)
}
// FoldUInt8 with errFloat32 receiver
// returns its first argument.
func (e errFloat32) FoldUInt8(a uint8, f func(v float32) uint8) uint8 {
	return a
}
// FoldUInt8F with errFloat32 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat32) FoldUInt8F(a func(error) uint8, f func(float32) uint8) uint8 {
	return a(e.left)
}

// MapUintPtr with errFloat32 receiver
// returns a newly built errFloat32 with same error.
func (e errFloat32) MapUintPtr(f func(v float32) uintptr) ResultUintPtr {
	return ErrUintPtr(e.left)
}
// FoldUintPtr with errFloat32 receiver
// returns its first argument.
func (e errFloat32) FoldUintPtr(a uintptr, f func(v float32) uintptr) uintptr {
	return a
}
// FoldUintPtrF with errFloat32 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat32) FoldUintPtrF(a func(error) uintptr, f func(float32) uintptr) uintptr {
	return a(e.left)
}
 // end of nones

// okFloat32 implements ResultFloat32 for a successful result
type okFloat32 struct {
	right float32
}

// OkFloat32 returns a successful result with value v of type float32 
func OkFloat32(v float32) okFloat32 {
	return okFloat32{v}
}
// MapFloat32 with okFloat32 receiver
// applies its function argument on hold value 
func (s okFloat32) Map(f func(float32)) { f(s.right) }

// FoldFFloat32 with okFloat32 receiver
// applies its second function argument on hold value 
func (s okFloat32) FoldF(l func(error), r func(float32)) { r(s.right) }


// MapBool on okFloat32 receiver
// applies its function arguments on hold value and returns an okBool
func (s okFloat32) MapBool(f func(float32) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldBool(a bool, f func(float32) bool) bool {
	return f(s.right)
}

// FoldBoolF on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldBoolF(a func(error) bool, f func(float32) bool) bool {
	return f(s.right)
}

// MapByte on okFloat32 receiver
// applies its function arguments on hold value and returns an okByte
func (s okFloat32) MapByte(f func(float32) byte) ResultByte {
	return OkByte(f(s.right))
}

// FoldByte on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldByte(a byte, f func(float32) byte) byte {
	return f(s.right)
}

// FoldByteF on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldByteF(a func(error) byte, f func(float32) byte) byte {
	return f(s.right)
}

// MapComplex128 on okFloat32 receiver
// applies its function arguments on hold value and returns an okComplex128
func (s okFloat32) MapComplex128(f func(float32) complex128) ResultComplex128 {
	return OkComplex128(f(s.right))
}

// FoldComplex128 on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldComplex128(a complex128, f func(float32) complex128) complex128 {
	return f(s.right)
}

// FoldComplex128F on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldComplex128F(a func(error) complex128, f func(float32) complex128) complex128 {
	return f(s.right)
}

// MapComplex64 on okFloat32 receiver
// applies its function arguments on hold value and returns an okComplex64
func (s okFloat32) MapComplex64(f func(float32) complex64) ResultComplex64 {
	return OkComplex64(f(s.right))
}

// FoldComplex64 on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldComplex64(a complex64, f func(float32) complex64) complex64 {
	return f(s.right)
}

// FoldComplex64F on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldComplex64F(a func(error) complex64, f func(float32) complex64) complex64 {
	return f(s.right)
}

// MapFloat32 on okFloat32 receiver
// applies its function arguments on hold value and returns an okFloat32
func (s okFloat32) MapFloat32(f func(float32) float32) ResultFloat32 {
	return OkFloat32(f(s.right))
}

// FoldFloat32 on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldFloat32(a float32, f func(float32) float32) float32 {
	return f(s.right)
}

// FoldFloat32F on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldFloat32F(a func(error) float32, f func(float32) float32) float32 {
	return f(s.right)
}

// MapFloat64 on okFloat32 receiver
// applies its function arguments on hold value and returns an okFloat64
func (s okFloat32) MapFloat64(f func(float32) float64) ResultFloat64 {
	return OkFloat64(f(s.right))
}

// FoldFloat64 on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldFloat64(a float64, f func(float32) float64) float64 {
	return f(s.right)
}

// FoldFloat64F on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldFloat64F(a func(error) float64, f func(float32) float64) float64 {
	return f(s.right)
}

// MapInt on okFloat32 receiver
// applies its function arguments on hold value and returns an okInt
func (s okFloat32) MapInt(f func(float32) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldInt(a int, f func(float32) int) int {
	return f(s.right)
}

// FoldIntF on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldIntF(a func(error) int, f func(float32) int) int {
	return f(s.right)
}

// MapInt16 on okFloat32 receiver
// applies its function arguments on hold value and returns an okInt16
func (s okFloat32) MapInt16(f func(float32) int16) ResultInt16 {
	return OkInt16(f(s.right))
}

// FoldInt16 on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldInt16(a int16, f func(float32) int16) int16 {
	return f(s.right)
}

// FoldInt16F on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldInt16F(a func(error) int16, f func(float32) int16) int16 {
	return f(s.right)
}

// MapInt32 on okFloat32 receiver
// applies its function arguments on hold value and returns an okInt32
func (s okFloat32) MapInt32(f func(float32) int32) ResultInt32 {
	return OkInt32(f(s.right))
}

// FoldInt32 on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldInt32(a int32, f func(float32) int32) int32 {
	return f(s.right)
}

// FoldInt32F on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldInt32F(a func(error) int32, f func(float32) int32) int32 {
	return f(s.right)
}

// MapInt64 on okFloat32 receiver
// applies its function arguments on hold value and returns an okInt64
func (s okFloat32) MapInt64(f func(float32) int64) ResultInt64 {
	return OkInt64(f(s.right))
}

// FoldInt64 on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldInt64(a int64, f func(float32) int64) int64 {
	return f(s.right)
}

// FoldInt64F on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldInt64F(a func(error) int64, f func(float32) int64) int64 {
	return f(s.right)
}

// MapInt8 on okFloat32 receiver
// applies its function arguments on hold value and returns an okInt8
func (s okFloat32) MapInt8(f func(float32) int8) ResultInt8 {
	return OkInt8(f(s.right))
}

// FoldInt8 on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldInt8(a int8, f func(float32) int8) int8 {
	return f(s.right)
}

// FoldInt8F on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldInt8F(a func(error) int8, f func(float32) int8) int8 {
	return f(s.right)
}

// MapRune on okFloat32 receiver
// applies its function arguments on hold value and returns an okRune
func (s okFloat32) MapRune(f func(float32) rune) ResultRune {
	return OkRune(f(s.right))
}

// FoldRune on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldRune(a rune, f func(float32) rune) rune {
	return f(s.right)
}

// FoldRuneF on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldRuneF(a func(error) rune, f func(float32) rune) rune {
	return f(s.right)
}

// MapString on okFloat32 receiver
// applies its function arguments on hold value and returns an okString
func (s okFloat32) MapString(f func(float32) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldString(a string, f func(float32) string) string {
	return f(s.right)
}

// FoldStringF on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldStringF(a func(error) string, f func(float32) string) string {
	return f(s.right)
}

// MapUInt on okFloat32 receiver
// applies its function arguments on hold value and returns an okUInt
func (s okFloat32) MapUInt(f func(float32) uint) ResultUInt {
	return OkUInt(f(s.right))
}

// FoldUInt on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldUInt(a uint, f func(float32) uint) uint {
	return f(s.right)
}

// FoldUIntF on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldUIntF(a func(error) uint, f func(float32) uint) uint {
	return f(s.right)
}

// MapUInt16 on okFloat32 receiver
// applies its function arguments on hold value and returns an okUInt16
func (s okFloat32) MapUInt16(f func(float32) uint16) ResultUInt16 {
	return OkUInt16(f(s.right))
}

// FoldUInt16 on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldUInt16(a uint16, f func(float32) uint16) uint16 {
	return f(s.right)
}

// FoldUInt16F on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldUInt16F(a func(error) uint16, f func(float32) uint16) uint16 {
	return f(s.right)
}

// MapUInt32 on okFloat32 receiver
// applies its function arguments on hold value and returns an okUInt32
func (s okFloat32) MapUInt32(f func(float32) uint32) ResultUInt32 {
	return OkUInt32(f(s.right))
}

// FoldUInt32 on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldUInt32(a uint32, f func(float32) uint32) uint32 {
	return f(s.right)
}

// FoldUInt32F on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldUInt32F(a func(error) uint32, f func(float32) uint32) uint32 {
	return f(s.right)
}

// MapUInt64 on okFloat32 receiver
// applies its function arguments on hold value and returns an okUInt64
func (s okFloat32) MapUInt64(f func(float32) uint64) ResultUInt64 {
	return OkUInt64(f(s.right))
}

// FoldUInt64 on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldUInt64(a uint64, f func(float32) uint64) uint64 {
	return f(s.right)
}

// FoldUInt64F on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldUInt64F(a func(error) uint64, f func(float32) uint64) uint64 {
	return f(s.right)
}

// MapUInt8 on okFloat32 receiver
// applies its function arguments on hold value and returns an okUInt8
func (s okFloat32) MapUInt8(f func(float32) uint8) ResultUInt8 {
	return OkUInt8(f(s.right))
}

// FoldUInt8 on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldUInt8(a uint8, f func(float32) uint8) uint8 {
	return f(s.right)
}

// FoldUInt8F on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldUInt8F(a func(error) uint8, f func(float32) uint8) uint8 {
	return f(s.right)
}

// MapUintPtr on okFloat32 receiver
// applies its function arguments on hold value and returns an okUintPtr
func (s okFloat32) MapUintPtr(f func(float32) uintptr) ResultUintPtr {
	return OkUintPtr(f(s.right))
}

// FoldUintPtr on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldUintPtr(a uintptr, f func(float32) uintptr) uintptr {
	return f(s.right)
}

// FoldUintPtrF on okFloat32 receiver
// applies its second function arguments on hold value and returns an float32
func (s okFloat32) FoldUintPtrF(a func(error) uintptr, f func(float32) uintptr) uintptr {
	return f(s.right)
}
 // end of oks



// errFloat64 implements ResultFloat64 for a failed result
type errFloat64 struct{
	left error
}

// ErrFloat64(error  | string) makes a new errFloat64
// from an error or a string.
func ErrFloat64(err interface{}) errFloat64 {
	switch err.(type) {
		case string : return errFloat64{errors.New(err.(string))}
		case error : return errFloat64{err.(error)}
	} 
	return errFloat64{errors.New("ErrFloat64 called with something else than string or error")}
}

// Map with errFloat64 receiver is a noop
func (e errFloat64) Map(f func(float64)) {}

// FoldF with errFloat64 applies it's first argument
// function on its error state
func (e errFloat64) FoldF(l func(e error), r func(float64)) { l(e.left) }


// MapBool with errFloat64 receiver
// returns a newly built errFloat64 with same error.
func (e errFloat64) MapBool(f func(v float64) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errFloat64 receiver
// returns its first argument.
func (e errFloat64) FoldBool(a bool, f func(v float64) bool) bool {
	return a
}
// FoldBoolF with errFloat64 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat64) FoldBoolF(a func(error) bool, f func(float64) bool) bool {
	return a(e.left)
}

// MapByte with errFloat64 receiver
// returns a newly built errFloat64 with same error.
func (e errFloat64) MapByte(f func(v float64) byte) ResultByte {
	return ErrByte(e.left)
}
// FoldByte with errFloat64 receiver
// returns its first argument.
func (e errFloat64) FoldByte(a byte, f func(v float64) byte) byte {
	return a
}
// FoldByteF with errFloat64 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat64) FoldByteF(a func(error) byte, f func(float64) byte) byte {
	return a(e.left)
}

// MapComplex128 with errFloat64 receiver
// returns a newly built errFloat64 with same error.
func (e errFloat64) MapComplex128(f func(v float64) complex128) ResultComplex128 {
	return ErrComplex128(e.left)
}
// FoldComplex128 with errFloat64 receiver
// returns its first argument.
func (e errFloat64) FoldComplex128(a complex128, f func(v float64) complex128) complex128 {
	return a
}
// FoldComplex128F with errFloat64 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat64) FoldComplex128F(a func(error) complex128, f func(float64) complex128) complex128 {
	return a(e.left)
}

// MapComplex64 with errFloat64 receiver
// returns a newly built errFloat64 with same error.
func (e errFloat64) MapComplex64(f func(v float64) complex64) ResultComplex64 {
	return ErrComplex64(e.left)
}
// FoldComplex64 with errFloat64 receiver
// returns its first argument.
func (e errFloat64) FoldComplex64(a complex64, f func(v float64) complex64) complex64 {
	return a
}
// FoldComplex64F with errFloat64 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat64) FoldComplex64F(a func(error) complex64, f func(float64) complex64) complex64 {
	return a(e.left)
}

// MapFloat32 with errFloat64 receiver
// returns a newly built errFloat64 with same error.
func (e errFloat64) MapFloat32(f func(v float64) float32) ResultFloat32 {
	return ErrFloat32(e.left)
}
// FoldFloat32 with errFloat64 receiver
// returns its first argument.
func (e errFloat64) FoldFloat32(a float32, f func(v float64) float32) float32 {
	return a
}
// FoldFloat32F with errFloat64 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat64) FoldFloat32F(a func(error) float32, f func(float64) float32) float32 {
	return a(e.left)
}

// MapFloat64 with errFloat64 receiver
// returns a newly built errFloat64 with same error.
func (e errFloat64) MapFloat64(f func(v float64) float64) ResultFloat64 {
	return ErrFloat64(e.left)
}
// FoldFloat64 with errFloat64 receiver
// returns its first argument.
func (e errFloat64) FoldFloat64(a float64, f func(v float64) float64) float64 {
	return a
}
// FoldFloat64F with errFloat64 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat64) FoldFloat64F(a func(error) float64, f func(float64) float64) float64 {
	return a(e.left)
}

// MapInt with errFloat64 receiver
// returns a newly built errFloat64 with same error.
func (e errFloat64) MapInt(f func(v float64) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errFloat64 receiver
// returns its first argument.
func (e errFloat64) FoldInt(a int, f func(v float64) int) int {
	return a
}
// FoldIntF with errFloat64 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat64) FoldIntF(a func(error) int, f func(float64) int) int {
	return a(e.left)
}

// MapInt16 with errFloat64 receiver
// returns a newly built errFloat64 with same error.
func (e errFloat64) MapInt16(f func(v float64) int16) ResultInt16 {
	return ErrInt16(e.left)
}
// FoldInt16 with errFloat64 receiver
// returns its first argument.
func (e errFloat64) FoldInt16(a int16, f func(v float64) int16) int16 {
	return a
}
// FoldInt16F with errFloat64 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat64) FoldInt16F(a func(error) int16, f func(float64) int16) int16 {
	return a(e.left)
}

// MapInt32 with errFloat64 receiver
// returns a newly built errFloat64 with same error.
func (e errFloat64) MapInt32(f func(v float64) int32) ResultInt32 {
	return ErrInt32(e.left)
}
// FoldInt32 with errFloat64 receiver
// returns its first argument.
func (e errFloat64) FoldInt32(a int32, f func(v float64) int32) int32 {
	return a
}
// FoldInt32F with errFloat64 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat64) FoldInt32F(a func(error) int32, f func(float64) int32) int32 {
	return a(e.left)
}

// MapInt64 with errFloat64 receiver
// returns a newly built errFloat64 with same error.
func (e errFloat64) MapInt64(f func(v float64) int64) ResultInt64 {
	return ErrInt64(e.left)
}
// FoldInt64 with errFloat64 receiver
// returns its first argument.
func (e errFloat64) FoldInt64(a int64, f func(v float64) int64) int64 {
	return a
}
// FoldInt64F with errFloat64 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat64) FoldInt64F(a func(error) int64, f func(float64) int64) int64 {
	return a(e.left)
}

// MapInt8 with errFloat64 receiver
// returns a newly built errFloat64 with same error.
func (e errFloat64) MapInt8(f func(v float64) int8) ResultInt8 {
	return ErrInt8(e.left)
}
// FoldInt8 with errFloat64 receiver
// returns its first argument.
func (e errFloat64) FoldInt8(a int8, f func(v float64) int8) int8 {
	return a
}
// FoldInt8F with errFloat64 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat64) FoldInt8F(a func(error) int8, f func(float64) int8) int8 {
	return a(e.left)
}

// MapRune with errFloat64 receiver
// returns a newly built errFloat64 with same error.
func (e errFloat64) MapRune(f func(v float64) rune) ResultRune {
	return ErrRune(e.left)
}
// FoldRune with errFloat64 receiver
// returns its first argument.
func (e errFloat64) FoldRune(a rune, f func(v float64) rune) rune {
	return a
}
// FoldRuneF with errFloat64 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat64) FoldRuneF(a func(error) rune, f func(float64) rune) rune {
	return a(e.left)
}

// MapString with errFloat64 receiver
// returns a newly built errFloat64 with same error.
func (e errFloat64) MapString(f func(v float64) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errFloat64 receiver
// returns its first argument.
func (e errFloat64) FoldString(a string, f func(v float64) string) string {
	return a
}
// FoldStringF with errFloat64 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat64) FoldStringF(a func(error) string, f func(float64) string) string {
	return a(e.left)
}

// MapUInt with errFloat64 receiver
// returns a newly built errFloat64 with same error.
func (e errFloat64) MapUInt(f func(v float64) uint) ResultUInt {
	return ErrUInt(e.left)
}
// FoldUInt with errFloat64 receiver
// returns its first argument.
func (e errFloat64) FoldUInt(a uint, f func(v float64) uint) uint {
	return a
}
// FoldUIntF with errFloat64 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat64) FoldUIntF(a func(error) uint, f func(float64) uint) uint {
	return a(e.left)
}

// MapUInt16 with errFloat64 receiver
// returns a newly built errFloat64 with same error.
func (e errFloat64) MapUInt16(f func(v float64) uint16) ResultUInt16 {
	return ErrUInt16(e.left)
}
// FoldUInt16 with errFloat64 receiver
// returns its first argument.
func (e errFloat64) FoldUInt16(a uint16, f func(v float64) uint16) uint16 {
	return a
}
// FoldUInt16F with errFloat64 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat64) FoldUInt16F(a func(error) uint16, f func(float64) uint16) uint16 {
	return a(e.left)
}

// MapUInt32 with errFloat64 receiver
// returns a newly built errFloat64 with same error.
func (e errFloat64) MapUInt32(f func(v float64) uint32) ResultUInt32 {
	return ErrUInt32(e.left)
}
// FoldUInt32 with errFloat64 receiver
// returns its first argument.
func (e errFloat64) FoldUInt32(a uint32, f func(v float64) uint32) uint32 {
	return a
}
// FoldUInt32F with errFloat64 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat64) FoldUInt32F(a func(error) uint32, f func(float64) uint32) uint32 {
	return a(e.left)
}

// MapUInt64 with errFloat64 receiver
// returns a newly built errFloat64 with same error.
func (e errFloat64) MapUInt64(f func(v float64) uint64) ResultUInt64 {
	return ErrUInt64(e.left)
}
// FoldUInt64 with errFloat64 receiver
// returns its first argument.
func (e errFloat64) FoldUInt64(a uint64, f func(v float64) uint64) uint64 {
	return a
}
// FoldUInt64F with errFloat64 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat64) FoldUInt64F(a func(error) uint64, f func(float64) uint64) uint64 {
	return a(e.left)
}

// MapUInt8 with errFloat64 receiver
// returns a newly built errFloat64 with same error.
func (e errFloat64) MapUInt8(f func(v float64) uint8) ResultUInt8 {
	return ErrUInt8(e.left)
}
// FoldUInt8 with errFloat64 receiver
// returns its first argument.
func (e errFloat64) FoldUInt8(a uint8, f func(v float64) uint8) uint8 {
	return a
}
// FoldUInt8F with errFloat64 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat64) FoldUInt8F(a func(error) uint8, f func(float64) uint8) uint8 {
	return a(e.left)
}

// MapUintPtr with errFloat64 receiver
// returns a newly built errFloat64 with same error.
func (e errFloat64) MapUintPtr(f func(v float64) uintptr) ResultUintPtr {
	return ErrUintPtr(e.left)
}
// FoldUintPtr with errFloat64 receiver
// returns its first argument.
func (e errFloat64) FoldUintPtr(a uintptr, f func(v float64) uintptr) uintptr {
	return a
}
// FoldUintPtrF with errFloat64 receiver
// returns the result of its first argument applied to the result error state.
func (e errFloat64) FoldUintPtrF(a func(error) uintptr, f func(float64) uintptr) uintptr {
	return a(e.left)
}
 // end of nones

// okFloat64 implements ResultFloat64 for a successful result
type okFloat64 struct {
	right float64
}

// OkFloat64 returns a successful result with value v of type float64 
func OkFloat64(v float64) okFloat64 {
	return okFloat64{v}
}
// MapFloat64 with okFloat64 receiver
// applies its function argument on hold value 
func (s okFloat64) Map(f func(float64)) { f(s.right) }

// FoldFFloat64 with okFloat64 receiver
// applies its second function argument on hold value 
func (s okFloat64) FoldF(l func(error), r func(float64)) { r(s.right) }


// MapBool on okFloat64 receiver
// applies its function arguments on hold value and returns an okBool
func (s okFloat64) MapBool(f func(float64) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldBool(a bool, f func(float64) bool) bool {
	return f(s.right)
}

// FoldBoolF on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldBoolF(a func(error) bool, f func(float64) bool) bool {
	return f(s.right)
}

// MapByte on okFloat64 receiver
// applies its function arguments on hold value and returns an okByte
func (s okFloat64) MapByte(f func(float64) byte) ResultByte {
	return OkByte(f(s.right))
}

// FoldByte on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldByte(a byte, f func(float64) byte) byte {
	return f(s.right)
}

// FoldByteF on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldByteF(a func(error) byte, f func(float64) byte) byte {
	return f(s.right)
}

// MapComplex128 on okFloat64 receiver
// applies its function arguments on hold value and returns an okComplex128
func (s okFloat64) MapComplex128(f func(float64) complex128) ResultComplex128 {
	return OkComplex128(f(s.right))
}

// FoldComplex128 on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldComplex128(a complex128, f func(float64) complex128) complex128 {
	return f(s.right)
}

// FoldComplex128F on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldComplex128F(a func(error) complex128, f func(float64) complex128) complex128 {
	return f(s.right)
}

// MapComplex64 on okFloat64 receiver
// applies its function arguments on hold value and returns an okComplex64
func (s okFloat64) MapComplex64(f func(float64) complex64) ResultComplex64 {
	return OkComplex64(f(s.right))
}

// FoldComplex64 on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldComplex64(a complex64, f func(float64) complex64) complex64 {
	return f(s.right)
}

// FoldComplex64F on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldComplex64F(a func(error) complex64, f func(float64) complex64) complex64 {
	return f(s.right)
}

// MapFloat32 on okFloat64 receiver
// applies its function arguments on hold value and returns an okFloat32
func (s okFloat64) MapFloat32(f func(float64) float32) ResultFloat32 {
	return OkFloat32(f(s.right))
}

// FoldFloat32 on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldFloat32(a float32, f func(float64) float32) float32 {
	return f(s.right)
}

// FoldFloat32F on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldFloat32F(a func(error) float32, f func(float64) float32) float32 {
	return f(s.right)
}

// MapFloat64 on okFloat64 receiver
// applies its function arguments on hold value and returns an okFloat64
func (s okFloat64) MapFloat64(f func(float64) float64) ResultFloat64 {
	return OkFloat64(f(s.right))
}

// FoldFloat64 on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldFloat64(a float64, f func(float64) float64) float64 {
	return f(s.right)
}

// FoldFloat64F on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldFloat64F(a func(error) float64, f func(float64) float64) float64 {
	return f(s.right)
}

// MapInt on okFloat64 receiver
// applies its function arguments on hold value and returns an okInt
func (s okFloat64) MapInt(f func(float64) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldInt(a int, f func(float64) int) int {
	return f(s.right)
}

// FoldIntF on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldIntF(a func(error) int, f func(float64) int) int {
	return f(s.right)
}

// MapInt16 on okFloat64 receiver
// applies its function arguments on hold value and returns an okInt16
func (s okFloat64) MapInt16(f func(float64) int16) ResultInt16 {
	return OkInt16(f(s.right))
}

// FoldInt16 on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldInt16(a int16, f func(float64) int16) int16 {
	return f(s.right)
}

// FoldInt16F on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldInt16F(a func(error) int16, f func(float64) int16) int16 {
	return f(s.right)
}

// MapInt32 on okFloat64 receiver
// applies its function arguments on hold value and returns an okInt32
func (s okFloat64) MapInt32(f func(float64) int32) ResultInt32 {
	return OkInt32(f(s.right))
}

// FoldInt32 on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldInt32(a int32, f func(float64) int32) int32 {
	return f(s.right)
}

// FoldInt32F on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldInt32F(a func(error) int32, f func(float64) int32) int32 {
	return f(s.right)
}

// MapInt64 on okFloat64 receiver
// applies its function arguments on hold value and returns an okInt64
func (s okFloat64) MapInt64(f func(float64) int64) ResultInt64 {
	return OkInt64(f(s.right))
}

// FoldInt64 on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldInt64(a int64, f func(float64) int64) int64 {
	return f(s.right)
}

// FoldInt64F on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldInt64F(a func(error) int64, f func(float64) int64) int64 {
	return f(s.right)
}

// MapInt8 on okFloat64 receiver
// applies its function arguments on hold value and returns an okInt8
func (s okFloat64) MapInt8(f func(float64) int8) ResultInt8 {
	return OkInt8(f(s.right))
}

// FoldInt8 on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldInt8(a int8, f func(float64) int8) int8 {
	return f(s.right)
}

// FoldInt8F on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldInt8F(a func(error) int8, f func(float64) int8) int8 {
	return f(s.right)
}

// MapRune on okFloat64 receiver
// applies its function arguments on hold value and returns an okRune
func (s okFloat64) MapRune(f func(float64) rune) ResultRune {
	return OkRune(f(s.right))
}

// FoldRune on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldRune(a rune, f func(float64) rune) rune {
	return f(s.right)
}

// FoldRuneF on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldRuneF(a func(error) rune, f func(float64) rune) rune {
	return f(s.right)
}

// MapString on okFloat64 receiver
// applies its function arguments on hold value and returns an okString
func (s okFloat64) MapString(f func(float64) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldString(a string, f func(float64) string) string {
	return f(s.right)
}

// FoldStringF on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldStringF(a func(error) string, f func(float64) string) string {
	return f(s.right)
}

// MapUInt on okFloat64 receiver
// applies its function arguments on hold value and returns an okUInt
func (s okFloat64) MapUInt(f func(float64) uint) ResultUInt {
	return OkUInt(f(s.right))
}

// FoldUInt on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldUInt(a uint, f func(float64) uint) uint {
	return f(s.right)
}

// FoldUIntF on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldUIntF(a func(error) uint, f func(float64) uint) uint {
	return f(s.right)
}

// MapUInt16 on okFloat64 receiver
// applies its function arguments on hold value and returns an okUInt16
func (s okFloat64) MapUInt16(f func(float64) uint16) ResultUInt16 {
	return OkUInt16(f(s.right))
}

// FoldUInt16 on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldUInt16(a uint16, f func(float64) uint16) uint16 {
	return f(s.right)
}

// FoldUInt16F on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldUInt16F(a func(error) uint16, f func(float64) uint16) uint16 {
	return f(s.right)
}

// MapUInt32 on okFloat64 receiver
// applies its function arguments on hold value and returns an okUInt32
func (s okFloat64) MapUInt32(f func(float64) uint32) ResultUInt32 {
	return OkUInt32(f(s.right))
}

// FoldUInt32 on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldUInt32(a uint32, f func(float64) uint32) uint32 {
	return f(s.right)
}

// FoldUInt32F on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldUInt32F(a func(error) uint32, f func(float64) uint32) uint32 {
	return f(s.right)
}

// MapUInt64 on okFloat64 receiver
// applies its function arguments on hold value and returns an okUInt64
func (s okFloat64) MapUInt64(f func(float64) uint64) ResultUInt64 {
	return OkUInt64(f(s.right))
}

// FoldUInt64 on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldUInt64(a uint64, f func(float64) uint64) uint64 {
	return f(s.right)
}

// FoldUInt64F on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldUInt64F(a func(error) uint64, f func(float64) uint64) uint64 {
	return f(s.right)
}

// MapUInt8 on okFloat64 receiver
// applies its function arguments on hold value and returns an okUInt8
func (s okFloat64) MapUInt8(f func(float64) uint8) ResultUInt8 {
	return OkUInt8(f(s.right))
}

// FoldUInt8 on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldUInt8(a uint8, f func(float64) uint8) uint8 {
	return f(s.right)
}

// FoldUInt8F on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldUInt8F(a func(error) uint8, f func(float64) uint8) uint8 {
	return f(s.right)
}

// MapUintPtr on okFloat64 receiver
// applies its function arguments on hold value and returns an okUintPtr
func (s okFloat64) MapUintPtr(f func(float64) uintptr) ResultUintPtr {
	return OkUintPtr(f(s.right))
}

// FoldUintPtr on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldUintPtr(a uintptr, f func(float64) uintptr) uintptr {
	return f(s.right)
}

// FoldUintPtrF on okFloat64 receiver
// applies its second function arguments on hold value and returns an float64
func (s okFloat64) FoldUintPtrF(a func(error) uintptr, f func(float64) uintptr) uintptr {
	return f(s.right)
}
 // end of oks



// errInt implements ResultInt for a failed result
type errInt struct{
	left error
}

// ErrInt(error  | string) makes a new errInt
// from an error or a string.
func ErrInt(err interface{}) errInt {
	switch err.(type) {
		case string : return errInt{errors.New(err.(string))}
		case error : return errInt{err.(error)}
	} 
	return errInt{errors.New("ErrInt called with something else than string or error")}
}

// Map with errInt receiver is a noop
func (e errInt) Map(f func(int)) {}

// FoldF with errInt applies it's first argument
// function on its error state
func (e errInt) FoldF(l func(e error), r func(int)) { l(e.left) }


// MapBool with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapBool(f func(v int) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errInt receiver
// returns its first argument.
func (e errInt) FoldBool(a bool, f func(v int) bool) bool {
	return a
}
// FoldBoolF with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldBoolF(a func(error) bool, f func(int) bool) bool {
	return a(e.left)
}

// MapByte with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapByte(f func(v int) byte) ResultByte {
	return ErrByte(e.left)
}
// FoldByte with errInt receiver
// returns its first argument.
func (e errInt) FoldByte(a byte, f func(v int) byte) byte {
	return a
}
// FoldByteF with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldByteF(a func(error) byte, f func(int) byte) byte {
	return a(e.left)
}

// MapComplex128 with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapComplex128(f func(v int) complex128) ResultComplex128 {
	return ErrComplex128(e.left)
}
// FoldComplex128 with errInt receiver
// returns its first argument.
func (e errInt) FoldComplex128(a complex128, f func(v int) complex128) complex128 {
	return a
}
// FoldComplex128F with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldComplex128F(a func(error) complex128, f func(int) complex128) complex128 {
	return a(e.left)
}

// MapComplex64 with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapComplex64(f func(v int) complex64) ResultComplex64 {
	return ErrComplex64(e.left)
}
// FoldComplex64 with errInt receiver
// returns its first argument.
func (e errInt) FoldComplex64(a complex64, f func(v int) complex64) complex64 {
	return a
}
// FoldComplex64F with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldComplex64F(a func(error) complex64, f func(int) complex64) complex64 {
	return a(e.left)
}

// MapFloat32 with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapFloat32(f func(v int) float32) ResultFloat32 {
	return ErrFloat32(e.left)
}
// FoldFloat32 with errInt receiver
// returns its first argument.
func (e errInt) FoldFloat32(a float32, f func(v int) float32) float32 {
	return a
}
// FoldFloat32F with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldFloat32F(a func(error) float32, f func(int) float32) float32 {
	return a(e.left)
}

// MapFloat64 with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapFloat64(f func(v int) float64) ResultFloat64 {
	return ErrFloat64(e.left)
}
// FoldFloat64 with errInt receiver
// returns its first argument.
func (e errInt) FoldFloat64(a float64, f func(v int) float64) float64 {
	return a
}
// FoldFloat64F with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldFloat64F(a func(error) float64, f func(int) float64) float64 {
	return a(e.left)
}

// MapInt with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapInt(f func(v int) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errInt receiver
// returns its first argument.
func (e errInt) FoldInt(a int, f func(v int) int) int {
	return a
}
// FoldIntF with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldIntF(a func(error) int, f func(int) int) int {
	return a(e.left)
}

// MapInt16 with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapInt16(f func(v int) int16) ResultInt16 {
	return ErrInt16(e.left)
}
// FoldInt16 with errInt receiver
// returns its first argument.
func (e errInt) FoldInt16(a int16, f func(v int) int16) int16 {
	return a
}
// FoldInt16F with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldInt16F(a func(error) int16, f func(int) int16) int16 {
	return a(e.left)
}

// MapInt32 with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapInt32(f func(v int) int32) ResultInt32 {
	return ErrInt32(e.left)
}
// FoldInt32 with errInt receiver
// returns its first argument.
func (e errInt) FoldInt32(a int32, f func(v int) int32) int32 {
	return a
}
// FoldInt32F with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldInt32F(a func(error) int32, f func(int) int32) int32 {
	return a(e.left)
}

// MapInt64 with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapInt64(f func(v int) int64) ResultInt64 {
	return ErrInt64(e.left)
}
// FoldInt64 with errInt receiver
// returns its first argument.
func (e errInt) FoldInt64(a int64, f func(v int) int64) int64 {
	return a
}
// FoldInt64F with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldInt64F(a func(error) int64, f func(int) int64) int64 {
	return a(e.left)
}

// MapInt8 with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapInt8(f func(v int) int8) ResultInt8 {
	return ErrInt8(e.left)
}
// FoldInt8 with errInt receiver
// returns its first argument.
func (e errInt) FoldInt8(a int8, f func(v int) int8) int8 {
	return a
}
// FoldInt8F with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldInt8F(a func(error) int8, f func(int) int8) int8 {
	return a(e.left)
}

// MapRune with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapRune(f func(v int) rune) ResultRune {
	return ErrRune(e.left)
}
// FoldRune with errInt receiver
// returns its first argument.
func (e errInt) FoldRune(a rune, f func(v int) rune) rune {
	return a
}
// FoldRuneF with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldRuneF(a func(error) rune, f func(int) rune) rune {
	return a(e.left)
}

// MapString with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapString(f func(v int) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errInt receiver
// returns its first argument.
func (e errInt) FoldString(a string, f func(v int) string) string {
	return a
}
// FoldStringF with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldStringF(a func(error) string, f func(int) string) string {
	return a(e.left)
}

// MapUInt with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapUInt(f func(v int) uint) ResultUInt {
	return ErrUInt(e.left)
}
// FoldUInt with errInt receiver
// returns its first argument.
func (e errInt) FoldUInt(a uint, f func(v int) uint) uint {
	return a
}
// FoldUIntF with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldUIntF(a func(error) uint, f func(int) uint) uint {
	return a(e.left)
}

// MapUInt16 with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapUInt16(f func(v int) uint16) ResultUInt16 {
	return ErrUInt16(e.left)
}
// FoldUInt16 with errInt receiver
// returns its first argument.
func (e errInt) FoldUInt16(a uint16, f func(v int) uint16) uint16 {
	return a
}
// FoldUInt16F with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldUInt16F(a func(error) uint16, f func(int) uint16) uint16 {
	return a(e.left)
}

// MapUInt32 with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapUInt32(f func(v int) uint32) ResultUInt32 {
	return ErrUInt32(e.left)
}
// FoldUInt32 with errInt receiver
// returns its first argument.
func (e errInt) FoldUInt32(a uint32, f func(v int) uint32) uint32 {
	return a
}
// FoldUInt32F with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldUInt32F(a func(error) uint32, f func(int) uint32) uint32 {
	return a(e.left)
}

// MapUInt64 with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapUInt64(f func(v int) uint64) ResultUInt64 {
	return ErrUInt64(e.left)
}
// FoldUInt64 with errInt receiver
// returns its first argument.
func (e errInt) FoldUInt64(a uint64, f func(v int) uint64) uint64 {
	return a
}
// FoldUInt64F with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldUInt64F(a func(error) uint64, f func(int) uint64) uint64 {
	return a(e.left)
}

// MapUInt8 with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapUInt8(f func(v int) uint8) ResultUInt8 {
	return ErrUInt8(e.left)
}
// FoldUInt8 with errInt receiver
// returns its first argument.
func (e errInt) FoldUInt8(a uint8, f func(v int) uint8) uint8 {
	return a
}
// FoldUInt8F with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldUInt8F(a func(error) uint8, f func(int) uint8) uint8 {
	return a(e.left)
}

// MapUintPtr with errInt receiver
// returns a newly built errInt with same error.
func (e errInt) MapUintPtr(f func(v int) uintptr) ResultUintPtr {
	return ErrUintPtr(e.left)
}
// FoldUintPtr with errInt receiver
// returns its first argument.
func (e errInt) FoldUintPtr(a uintptr, f func(v int) uintptr) uintptr {
	return a
}
// FoldUintPtrF with errInt receiver
// returns the result of its first argument applied to the result error state.
func (e errInt) FoldUintPtrF(a func(error) uintptr, f func(int) uintptr) uintptr {
	return a(e.left)
}
 // end of nones

// okInt implements ResultInt for a successful result
type okInt struct {
	right int
}

// OkInt returns a successful result with value v of type int 
func OkInt(v int) okInt {
	return okInt{v}
}
// MapInt with okInt receiver
// applies its function argument on hold value 
func (s okInt) Map(f func(int)) { f(s.right) }

// FoldFInt with okInt receiver
// applies its second function argument on hold value 
func (s okInt) FoldF(l func(error), r func(int)) { r(s.right) }


// MapBool on okInt receiver
// applies its function arguments on hold value and returns an okBool
func (s okInt) MapBool(f func(int) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldBool(a bool, f func(int) bool) bool {
	return f(s.right)
}

// FoldBoolF on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldBoolF(a func(error) bool, f func(int) bool) bool {
	return f(s.right)
}

// MapByte on okInt receiver
// applies its function arguments on hold value and returns an okByte
func (s okInt) MapByte(f func(int) byte) ResultByte {
	return OkByte(f(s.right))
}

// FoldByte on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldByte(a byte, f func(int) byte) byte {
	return f(s.right)
}

// FoldByteF on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldByteF(a func(error) byte, f func(int) byte) byte {
	return f(s.right)
}

// MapComplex128 on okInt receiver
// applies its function arguments on hold value and returns an okComplex128
func (s okInt) MapComplex128(f func(int) complex128) ResultComplex128 {
	return OkComplex128(f(s.right))
}

// FoldComplex128 on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldComplex128(a complex128, f func(int) complex128) complex128 {
	return f(s.right)
}

// FoldComplex128F on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldComplex128F(a func(error) complex128, f func(int) complex128) complex128 {
	return f(s.right)
}

// MapComplex64 on okInt receiver
// applies its function arguments on hold value and returns an okComplex64
func (s okInt) MapComplex64(f func(int) complex64) ResultComplex64 {
	return OkComplex64(f(s.right))
}

// FoldComplex64 on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldComplex64(a complex64, f func(int) complex64) complex64 {
	return f(s.right)
}

// FoldComplex64F on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldComplex64F(a func(error) complex64, f func(int) complex64) complex64 {
	return f(s.right)
}

// MapFloat32 on okInt receiver
// applies its function arguments on hold value and returns an okFloat32
func (s okInt) MapFloat32(f func(int) float32) ResultFloat32 {
	return OkFloat32(f(s.right))
}

// FoldFloat32 on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldFloat32(a float32, f func(int) float32) float32 {
	return f(s.right)
}

// FoldFloat32F on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldFloat32F(a func(error) float32, f func(int) float32) float32 {
	return f(s.right)
}

// MapFloat64 on okInt receiver
// applies its function arguments on hold value and returns an okFloat64
func (s okInt) MapFloat64(f func(int) float64) ResultFloat64 {
	return OkFloat64(f(s.right))
}

// FoldFloat64 on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldFloat64(a float64, f func(int) float64) float64 {
	return f(s.right)
}

// FoldFloat64F on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldFloat64F(a func(error) float64, f func(int) float64) float64 {
	return f(s.right)
}

// MapInt on okInt receiver
// applies its function arguments on hold value and returns an okInt
func (s okInt) MapInt(f func(int) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldInt(a int, f func(int) int) int {
	return f(s.right)
}

// FoldIntF on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldIntF(a func(error) int, f func(int) int) int {
	return f(s.right)
}

// MapInt16 on okInt receiver
// applies its function arguments on hold value and returns an okInt16
func (s okInt) MapInt16(f func(int) int16) ResultInt16 {
	return OkInt16(f(s.right))
}

// FoldInt16 on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldInt16(a int16, f func(int) int16) int16 {
	return f(s.right)
}

// FoldInt16F on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldInt16F(a func(error) int16, f func(int) int16) int16 {
	return f(s.right)
}

// MapInt32 on okInt receiver
// applies its function arguments on hold value and returns an okInt32
func (s okInt) MapInt32(f func(int) int32) ResultInt32 {
	return OkInt32(f(s.right))
}

// FoldInt32 on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldInt32(a int32, f func(int) int32) int32 {
	return f(s.right)
}

// FoldInt32F on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldInt32F(a func(error) int32, f func(int) int32) int32 {
	return f(s.right)
}

// MapInt64 on okInt receiver
// applies its function arguments on hold value and returns an okInt64
func (s okInt) MapInt64(f func(int) int64) ResultInt64 {
	return OkInt64(f(s.right))
}

// FoldInt64 on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldInt64(a int64, f func(int) int64) int64 {
	return f(s.right)
}

// FoldInt64F on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldInt64F(a func(error) int64, f func(int) int64) int64 {
	return f(s.right)
}

// MapInt8 on okInt receiver
// applies its function arguments on hold value and returns an okInt8
func (s okInt) MapInt8(f func(int) int8) ResultInt8 {
	return OkInt8(f(s.right))
}

// FoldInt8 on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldInt8(a int8, f func(int) int8) int8 {
	return f(s.right)
}

// FoldInt8F on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldInt8F(a func(error) int8, f func(int) int8) int8 {
	return f(s.right)
}

// MapRune on okInt receiver
// applies its function arguments on hold value and returns an okRune
func (s okInt) MapRune(f func(int) rune) ResultRune {
	return OkRune(f(s.right))
}

// FoldRune on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldRune(a rune, f func(int) rune) rune {
	return f(s.right)
}

// FoldRuneF on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldRuneF(a func(error) rune, f func(int) rune) rune {
	return f(s.right)
}

// MapString on okInt receiver
// applies its function arguments on hold value and returns an okString
func (s okInt) MapString(f func(int) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldString(a string, f func(int) string) string {
	return f(s.right)
}

// FoldStringF on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldStringF(a func(error) string, f func(int) string) string {
	return f(s.right)
}

// MapUInt on okInt receiver
// applies its function arguments on hold value and returns an okUInt
func (s okInt) MapUInt(f func(int) uint) ResultUInt {
	return OkUInt(f(s.right))
}

// FoldUInt on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldUInt(a uint, f func(int) uint) uint {
	return f(s.right)
}

// FoldUIntF on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldUIntF(a func(error) uint, f func(int) uint) uint {
	return f(s.right)
}

// MapUInt16 on okInt receiver
// applies its function arguments on hold value and returns an okUInt16
func (s okInt) MapUInt16(f func(int) uint16) ResultUInt16 {
	return OkUInt16(f(s.right))
}

// FoldUInt16 on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldUInt16(a uint16, f func(int) uint16) uint16 {
	return f(s.right)
}

// FoldUInt16F on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldUInt16F(a func(error) uint16, f func(int) uint16) uint16 {
	return f(s.right)
}

// MapUInt32 on okInt receiver
// applies its function arguments on hold value and returns an okUInt32
func (s okInt) MapUInt32(f func(int) uint32) ResultUInt32 {
	return OkUInt32(f(s.right))
}

// FoldUInt32 on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldUInt32(a uint32, f func(int) uint32) uint32 {
	return f(s.right)
}

// FoldUInt32F on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldUInt32F(a func(error) uint32, f func(int) uint32) uint32 {
	return f(s.right)
}

// MapUInt64 on okInt receiver
// applies its function arguments on hold value and returns an okUInt64
func (s okInt) MapUInt64(f func(int) uint64) ResultUInt64 {
	return OkUInt64(f(s.right))
}

// FoldUInt64 on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldUInt64(a uint64, f func(int) uint64) uint64 {
	return f(s.right)
}

// FoldUInt64F on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldUInt64F(a func(error) uint64, f func(int) uint64) uint64 {
	return f(s.right)
}

// MapUInt8 on okInt receiver
// applies its function arguments on hold value and returns an okUInt8
func (s okInt) MapUInt8(f func(int) uint8) ResultUInt8 {
	return OkUInt8(f(s.right))
}

// FoldUInt8 on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldUInt8(a uint8, f func(int) uint8) uint8 {
	return f(s.right)
}

// FoldUInt8F on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldUInt8F(a func(error) uint8, f func(int) uint8) uint8 {
	return f(s.right)
}

// MapUintPtr on okInt receiver
// applies its function arguments on hold value and returns an okUintPtr
func (s okInt) MapUintPtr(f func(int) uintptr) ResultUintPtr {
	return OkUintPtr(f(s.right))
}

// FoldUintPtr on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldUintPtr(a uintptr, f func(int) uintptr) uintptr {
	return f(s.right)
}

// FoldUintPtrF on okInt receiver
// applies its second function arguments on hold value and returns an int
func (s okInt) FoldUintPtrF(a func(error) uintptr, f func(int) uintptr) uintptr {
	return f(s.right)
}
 // end of oks



// errInt16 implements ResultInt16 for a failed result
type errInt16 struct{
	left error
}

// ErrInt16(error  | string) makes a new errInt16
// from an error or a string.
func ErrInt16(err interface{}) errInt16 {
	switch err.(type) {
		case string : return errInt16{errors.New(err.(string))}
		case error : return errInt16{err.(error)}
	} 
	return errInt16{errors.New("ErrInt16 called with something else than string or error")}
}

// Map with errInt16 receiver is a noop
func (e errInt16) Map(f func(int16)) {}

// FoldF with errInt16 applies it's first argument
// function on its error state
func (e errInt16) FoldF(l func(e error), r func(int16)) { l(e.left) }


// MapBool with errInt16 receiver
// returns a newly built errInt16 with same error.
func (e errInt16) MapBool(f func(v int16) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errInt16 receiver
// returns its first argument.
func (e errInt16) FoldBool(a bool, f func(v int16) bool) bool {
	return a
}
// FoldBoolF with errInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt16) FoldBoolF(a func(error) bool, f func(int16) bool) bool {
	return a(e.left)
}

// MapByte with errInt16 receiver
// returns a newly built errInt16 with same error.
func (e errInt16) MapByte(f func(v int16) byte) ResultByte {
	return ErrByte(e.left)
}
// FoldByte with errInt16 receiver
// returns its first argument.
func (e errInt16) FoldByte(a byte, f func(v int16) byte) byte {
	return a
}
// FoldByteF with errInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt16) FoldByteF(a func(error) byte, f func(int16) byte) byte {
	return a(e.left)
}

// MapComplex128 with errInt16 receiver
// returns a newly built errInt16 with same error.
func (e errInt16) MapComplex128(f func(v int16) complex128) ResultComplex128 {
	return ErrComplex128(e.left)
}
// FoldComplex128 with errInt16 receiver
// returns its first argument.
func (e errInt16) FoldComplex128(a complex128, f func(v int16) complex128) complex128 {
	return a
}
// FoldComplex128F with errInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt16) FoldComplex128F(a func(error) complex128, f func(int16) complex128) complex128 {
	return a(e.left)
}

// MapComplex64 with errInt16 receiver
// returns a newly built errInt16 with same error.
func (e errInt16) MapComplex64(f func(v int16) complex64) ResultComplex64 {
	return ErrComplex64(e.left)
}
// FoldComplex64 with errInt16 receiver
// returns its first argument.
func (e errInt16) FoldComplex64(a complex64, f func(v int16) complex64) complex64 {
	return a
}
// FoldComplex64F with errInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt16) FoldComplex64F(a func(error) complex64, f func(int16) complex64) complex64 {
	return a(e.left)
}

// MapFloat32 with errInt16 receiver
// returns a newly built errInt16 with same error.
func (e errInt16) MapFloat32(f func(v int16) float32) ResultFloat32 {
	return ErrFloat32(e.left)
}
// FoldFloat32 with errInt16 receiver
// returns its first argument.
func (e errInt16) FoldFloat32(a float32, f func(v int16) float32) float32 {
	return a
}
// FoldFloat32F with errInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt16) FoldFloat32F(a func(error) float32, f func(int16) float32) float32 {
	return a(e.left)
}

// MapFloat64 with errInt16 receiver
// returns a newly built errInt16 with same error.
func (e errInt16) MapFloat64(f func(v int16) float64) ResultFloat64 {
	return ErrFloat64(e.left)
}
// FoldFloat64 with errInt16 receiver
// returns its first argument.
func (e errInt16) FoldFloat64(a float64, f func(v int16) float64) float64 {
	return a
}
// FoldFloat64F with errInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt16) FoldFloat64F(a func(error) float64, f func(int16) float64) float64 {
	return a(e.left)
}

// MapInt with errInt16 receiver
// returns a newly built errInt16 with same error.
func (e errInt16) MapInt(f func(v int16) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errInt16 receiver
// returns its first argument.
func (e errInt16) FoldInt(a int, f func(v int16) int) int {
	return a
}
// FoldIntF with errInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt16) FoldIntF(a func(error) int, f func(int16) int) int {
	return a(e.left)
}

// MapInt16 with errInt16 receiver
// returns a newly built errInt16 with same error.
func (e errInt16) MapInt16(f func(v int16) int16) ResultInt16 {
	return ErrInt16(e.left)
}
// FoldInt16 with errInt16 receiver
// returns its first argument.
func (e errInt16) FoldInt16(a int16, f func(v int16) int16) int16 {
	return a
}
// FoldInt16F with errInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt16) FoldInt16F(a func(error) int16, f func(int16) int16) int16 {
	return a(e.left)
}

// MapInt32 with errInt16 receiver
// returns a newly built errInt16 with same error.
func (e errInt16) MapInt32(f func(v int16) int32) ResultInt32 {
	return ErrInt32(e.left)
}
// FoldInt32 with errInt16 receiver
// returns its first argument.
func (e errInt16) FoldInt32(a int32, f func(v int16) int32) int32 {
	return a
}
// FoldInt32F with errInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt16) FoldInt32F(a func(error) int32, f func(int16) int32) int32 {
	return a(e.left)
}

// MapInt64 with errInt16 receiver
// returns a newly built errInt16 with same error.
func (e errInt16) MapInt64(f func(v int16) int64) ResultInt64 {
	return ErrInt64(e.left)
}
// FoldInt64 with errInt16 receiver
// returns its first argument.
func (e errInt16) FoldInt64(a int64, f func(v int16) int64) int64 {
	return a
}
// FoldInt64F with errInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt16) FoldInt64F(a func(error) int64, f func(int16) int64) int64 {
	return a(e.left)
}

// MapInt8 with errInt16 receiver
// returns a newly built errInt16 with same error.
func (e errInt16) MapInt8(f func(v int16) int8) ResultInt8 {
	return ErrInt8(e.left)
}
// FoldInt8 with errInt16 receiver
// returns its first argument.
func (e errInt16) FoldInt8(a int8, f func(v int16) int8) int8 {
	return a
}
// FoldInt8F with errInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt16) FoldInt8F(a func(error) int8, f func(int16) int8) int8 {
	return a(e.left)
}

// MapRune with errInt16 receiver
// returns a newly built errInt16 with same error.
func (e errInt16) MapRune(f func(v int16) rune) ResultRune {
	return ErrRune(e.left)
}
// FoldRune with errInt16 receiver
// returns its first argument.
func (e errInt16) FoldRune(a rune, f func(v int16) rune) rune {
	return a
}
// FoldRuneF with errInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt16) FoldRuneF(a func(error) rune, f func(int16) rune) rune {
	return a(e.left)
}

// MapString with errInt16 receiver
// returns a newly built errInt16 with same error.
func (e errInt16) MapString(f func(v int16) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errInt16 receiver
// returns its first argument.
func (e errInt16) FoldString(a string, f func(v int16) string) string {
	return a
}
// FoldStringF with errInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt16) FoldStringF(a func(error) string, f func(int16) string) string {
	return a(e.left)
}

// MapUInt with errInt16 receiver
// returns a newly built errInt16 with same error.
func (e errInt16) MapUInt(f func(v int16) uint) ResultUInt {
	return ErrUInt(e.left)
}
// FoldUInt with errInt16 receiver
// returns its first argument.
func (e errInt16) FoldUInt(a uint, f func(v int16) uint) uint {
	return a
}
// FoldUIntF with errInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt16) FoldUIntF(a func(error) uint, f func(int16) uint) uint {
	return a(e.left)
}

// MapUInt16 with errInt16 receiver
// returns a newly built errInt16 with same error.
func (e errInt16) MapUInt16(f func(v int16) uint16) ResultUInt16 {
	return ErrUInt16(e.left)
}
// FoldUInt16 with errInt16 receiver
// returns its first argument.
func (e errInt16) FoldUInt16(a uint16, f func(v int16) uint16) uint16 {
	return a
}
// FoldUInt16F with errInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt16) FoldUInt16F(a func(error) uint16, f func(int16) uint16) uint16 {
	return a(e.left)
}

// MapUInt32 with errInt16 receiver
// returns a newly built errInt16 with same error.
func (e errInt16) MapUInt32(f func(v int16) uint32) ResultUInt32 {
	return ErrUInt32(e.left)
}
// FoldUInt32 with errInt16 receiver
// returns its first argument.
func (e errInt16) FoldUInt32(a uint32, f func(v int16) uint32) uint32 {
	return a
}
// FoldUInt32F with errInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt16) FoldUInt32F(a func(error) uint32, f func(int16) uint32) uint32 {
	return a(e.left)
}

// MapUInt64 with errInt16 receiver
// returns a newly built errInt16 with same error.
func (e errInt16) MapUInt64(f func(v int16) uint64) ResultUInt64 {
	return ErrUInt64(e.left)
}
// FoldUInt64 with errInt16 receiver
// returns its first argument.
func (e errInt16) FoldUInt64(a uint64, f func(v int16) uint64) uint64 {
	return a
}
// FoldUInt64F with errInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt16) FoldUInt64F(a func(error) uint64, f func(int16) uint64) uint64 {
	return a(e.left)
}

// MapUInt8 with errInt16 receiver
// returns a newly built errInt16 with same error.
func (e errInt16) MapUInt8(f func(v int16) uint8) ResultUInt8 {
	return ErrUInt8(e.left)
}
// FoldUInt8 with errInt16 receiver
// returns its first argument.
func (e errInt16) FoldUInt8(a uint8, f func(v int16) uint8) uint8 {
	return a
}
// FoldUInt8F with errInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt16) FoldUInt8F(a func(error) uint8, f func(int16) uint8) uint8 {
	return a(e.left)
}

// MapUintPtr with errInt16 receiver
// returns a newly built errInt16 with same error.
func (e errInt16) MapUintPtr(f func(v int16) uintptr) ResultUintPtr {
	return ErrUintPtr(e.left)
}
// FoldUintPtr with errInt16 receiver
// returns its first argument.
func (e errInt16) FoldUintPtr(a uintptr, f func(v int16) uintptr) uintptr {
	return a
}
// FoldUintPtrF with errInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt16) FoldUintPtrF(a func(error) uintptr, f func(int16) uintptr) uintptr {
	return a(e.left)
}
 // end of nones

// okInt16 implements ResultInt16 for a successful result
type okInt16 struct {
	right int16
}

// OkInt16 returns a successful result with value v of type int16 
func OkInt16(v int16) okInt16 {
	return okInt16{v}
}
// MapInt16 with okInt16 receiver
// applies its function argument on hold value 
func (s okInt16) Map(f func(int16)) { f(s.right) }

// FoldFInt16 with okInt16 receiver
// applies its second function argument on hold value 
func (s okInt16) FoldF(l func(error), r func(int16)) { r(s.right) }


// MapBool on okInt16 receiver
// applies its function arguments on hold value and returns an okBool
func (s okInt16) MapBool(f func(int16) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldBool(a bool, f func(int16) bool) bool {
	return f(s.right)
}

// FoldBoolF on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldBoolF(a func(error) bool, f func(int16) bool) bool {
	return f(s.right)
}

// MapByte on okInt16 receiver
// applies its function arguments on hold value and returns an okByte
func (s okInt16) MapByte(f func(int16) byte) ResultByte {
	return OkByte(f(s.right))
}

// FoldByte on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldByte(a byte, f func(int16) byte) byte {
	return f(s.right)
}

// FoldByteF on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldByteF(a func(error) byte, f func(int16) byte) byte {
	return f(s.right)
}

// MapComplex128 on okInt16 receiver
// applies its function arguments on hold value and returns an okComplex128
func (s okInt16) MapComplex128(f func(int16) complex128) ResultComplex128 {
	return OkComplex128(f(s.right))
}

// FoldComplex128 on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldComplex128(a complex128, f func(int16) complex128) complex128 {
	return f(s.right)
}

// FoldComplex128F on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldComplex128F(a func(error) complex128, f func(int16) complex128) complex128 {
	return f(s.right)
}

// MapComplex64 on okInt16 receiver
// applies its function arguments on hold value and returns an okComplex64
func (s okInt16) MapComplex64(f func(int16) complex64) ResultComplex64 {
	return OkComplex64(f(s.right))
}

// FoldComplex64 on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldComplex64(a complex64, f func(int16) complex64) complex64 {
	return f(s.right)
}

// FoldComplex64F on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldComplex64F(a func(error) complex64, f func(int16) complex64) complex64 {
	return f(s.right)
}

// MapFloat32 on okInt16 receiver
// applies its function arguments on hold value and returns an okFloat32
func (s okInt16) MapFloat32(f func(int16) float32) ResultFloat32 {
	return OkFloat32(f(s.right))
}

// FoldFloat32 on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldFloat32(a float32, f func(int16) float32) float32 {
	return f(s.right)
}

// FoldFloat32F on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldFloat32F(a func(error) float32, f func(int16) float32) float32 {
	return f(s.right)
}

// MapFloat64 on okInt16 receiver
// applies its function arguments on hold value and returns an okFloat64
func (s okInt16) MapFloat64(f func(int16) float64) ResultFloat64 {
	return OkFloat64(f(s.right))
}

// FoldFloat64 on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldFloat64(a float64, f func(int16) float64) float64 {
	return f(s.right)
}

// FoldFloat64F on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldFloat64F(a func(error) float64, f func(int16) float64) float64 {
	return f(s.right)
}

// MapInt on okInt16 receiver
// applies its function arguments on hold value and returns an okInt
func (s okInt16) MapInt(f func(int16) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldInt(a int, f func(int16) int) int {
	return f(s.right)
}

// FoldIntF on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldIntF(a func(error) int, f func(int16) int) int {
	return f(s.right)
}

// MapInt16 on okInt16 receiver
// applies its function arguments on hold value and returns an okInt16
func (s okInt16) MapInt16(f func(int16) int16) ResultInt16 {
	return OkInt16(f(s.right))
}

// FoldInt16 on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldInt16(a int16, f func(int16) int16) int16 {
	return f(s.right)
}

// FoldInt16F on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldInt16F(a func(error) int16, f func(int16) int16) int16 {
	return f(s.right)
}

// MapInt32 on okInt16 receiver
// applies its function arguments on hold value and returns an okInt32
func (s okInt16) MapInt32(f func(int16) int32) ResultInt32 {
	return OkInt32(f(s.right))
}

// FoldInt32 on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldInt32(a int32, f func(int16) int32) int32 {
	return f(s.right)
}

// FoldInt32F on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldInt32F(a func(error) int32, f func(int16) int32) int32 {
	return f(s.right)
}

// MapInt64 on okInt16 receiver
// applies its function arguments on hold value and returns an okInt64
func (s okInt16) MapInt64(f func(int16) int64) ResultInt64 {
	return OkInt64(f(s.right))
}

// FoldInt64 on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldInt64(a int64, f func(int16) int64) int64 {
	return f(s.right)
}

// FoldInt64F on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldInt64F(a func(error) int64, f func(int16) int64) int64 {
	return f(s.right)
}

// MapInt8 on okInt16 receiver
// applies its function arguments on hold value and returns an okInt8
func (s okInt16) MapInt8(f func(int16) int8) ResultInt8 {
	return OkInt8(f(s.right))
}

// FoldInt8 on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldInt8(a int8, f func(int16) int8) int8 {
	return f(s.right)
}

// FoldInt8F on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldInt8F(a func(error) int8, f func(int16) int8) int8 {
	return f(s.right)
}

// MapRune on okInt16 receiver
// applies its function arguments on hold value and returns an okRune
func (s okInt16) MapRune(f func(int16) rune) ResultRune {
	return OkRune(f(s.right))
}

// FoldRune on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldRune(a rune, f func(int16) rune) rune {
	return f(s.right)
}

// FoldRuneF on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldRuneF(a func(error) rune, f func(int16) rune) rune {
	return f(s.right)
}

// MapString on okInt16 receiver
// applies its function arguments on hold value and returns an okString
func (s okInt16) MapString(f func(int16) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldString(a string, f func(int16) string) string {
	return f(s.right)
}

// FoldStringF on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldStringF(a func(error) string, f func(int16) string) string {
	return f(s.right)
}

// MapUInt on okInt16 receiver
// applies its function arguments on hold value and returns an okUInt
func (s okInt16) MapUInt(f func(int16) uint) ResultUInt {
	return OkUInt(f(s.right))
}

// FoldUInt on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldUInt(a uint, f func(int16) uint) uint {
	return f(s.right)
}

// FoldUIntF on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldUIntF(a func(error) uint, f func(int16) uint) uint {
	return f(s.right)
}

// MapUInt16 on okInt16 receiver
// applies its function arguments on hold value and returns an okUInt16
func (s okInt16) MapUInt16(f func(int16) uint16) ResultUInt16 {
	return OkUInt16(f(s.right))
}

// FoldUInt16 on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldUInt16(a uint16, f func(int16) uint16) uint16 {
	return f(s.right)
}

// FoldUInt16F on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldUInt16F(a func(error) uint16, f func(int16) uint16) uint16 {
	return f(s.right)
}

// MapUInt32 on okInt16 receiver
// applies its function arguments on hold value and returns an okUInt32
func (s okInt16) MapUInt32(f func(int16) uint32) ResultUInt32 {
	return OkUInt32(f(s.right))
}

// FoldUInt32 on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldUInt32(a uint32, f func(int16) uint32) uint32 {
	return f(s.right)
}

// FoldUInt32F on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldUInt32F(a func(error) uint32, f func(int16) uint32) uint32 {
	return f(s.right)
}

// MapUInt64 on okInt16 receiver
// applies its function arguments on hold value and returns an okUInt64
func (s okInt16) MapUInt64(f func(int16) uint64) ResultUInt64 {
	return OkUInt64(f(s.right))
}

// FoldUInt64 on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldUInt64(a uint64, f func(int16) uint64) uint64 {
	return f(s.right)
}

// FoldUInt64F on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldUInt64F(a func(error) uint64, f func(int16) uint64) uint64 {
	return f(s.right)
}

// MapUInt8 on okInt16 receiver
// applies its function arguments on hold value and returns an okUInt8
func (s okInt16) MapUInt8(f func(int16) uint8) ResultUInt8 {
	return OkUInt8(f(s.right))
}

// FoldUInt8 on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldUInt8(a uint8, f func(int16) uint8) uint8 {
	return f(s.right)
}

// FoldUInt8F on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldUInt8F(a func(error) uint8, f func(int16) uint8) uint8 {
	return f(s.right)
}

// MapUintPtr on okInt16 receiver
// applies its function arguments on hold value and returns an okUintPtr
func (s okInt16) MapUintPtr(f func(int16) uintptr) ResultUintPtr {
	return OkUintPtr(f(s.right))
}

// FoldUintPtr on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldUintPtr(a uintptr, f func(int16) uintptr) uintptr {
	return f(s.right)
}

// FoldUintPtrF on okInt16 receiver
// applies its second function arguments on hold value and returns an int16
func (s okInt16) FoldUintPtrF(a func(error) uintptr, f func(int16) uintptr) uintptr {
	return f(s.right)
}
 // end of oks



// errInt32 implements ResultInt32 for a failed result
type errInt32 struct{
	left error
}

// ErrInt32(error  | string) makes a new errInt32
// from an error or a string.
func ErrInt32(err interface{}) errInt32 {
	switch err.(type) {
		case string : return errInt32{errors.New(err.(string))}
		case error : return errInt32{err.(error)}
	} 
	return errInt32{errors.New("ErrInt32 called with something else than string or error")}
}

// Map with errInt32 receiver is a noop
func (e errInt32) Map(f func(int32)) {}

// FoldF with errInt32 applies it's first argument
// function on its error state
func (e errInt32) FoldF(l func(e error), r func(int32)) { l(e.left) }


// MapBool with errInt32 receiver
// returns a newly built errInt32 with same error.
func (e errInt32) MapBool(f func(v int32) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errInt32 receiver
// returns its first argument.
func (e errInt32) FoldBool(a bool, f func(v int32) bool) bool {
	return a
}
// FoldBoolF with errInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt32) FoldBoolF(a func(error) bool, f func(int32) bool) bool {
	return a(e.left)
}

// MapByte with errInt32 receiver
// returns a newly built errInt32 with same error.
func (e errInt32) MapByte(f func(v int32) byte) ResultByte {
	return ErrByte(e.left)
}
// FoldByte with errInt32 receiver
// returns its first argument.
func (e errInt32) FoldByte(a byte, f func(v int32) byte) byte {
	return a
}
// FoldByteF with errInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt32) FoldByteF(a func(error) byte, f func(int32) byte) byte {
	return a(e.left)
}

// MapComplex128 with errInt32 receiver
// returns a newly built errInt32 with same error.
func (e errInt32) MapComplex128(f func(v int32) complex128) ResultComplex128 {
	return ErrComplex128(e.left)
}
// FoldComplex128 with errInt32 receiver
// returns its first argument.
func (e errInt32) FoldComplex128(a complex128, f func(v int32) complex128) complex128 {
	return a
}
// FoldComplex128F with errInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt32) FoldComplex128F(a func(error) complex128, f func(int32) complex128) complex128 {
	return a(e.left)
}

// MapComplex64 with errInt32 receiver
// returns a newly built errInt32 with same error.
func (e errInt32) MapComplex64(f func(v int32) complex64) ResultComplex64 {
	return ErrComplex64(e.left)
}
// FoldComplex64 with errInt32 receiver
// returns its first argument.
func (e errInt32) FoldComplex64(a complex64, f func(v int32) complex64) complex64 {
	return a
}
// FoldComplex64F with errInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt32) FoldComplex64F(a func(error) complex64, f func(int32) complex64) complex64 {
	return a(e.left)
}

// MapFloat32 with errInt32 receiver
// returns a newly built errInt32 with same error.
func (e errInt32) MapFloat32(f func(v int32) float32) ResultFloat32 {
	return ErrFloat32(e.left)
}
// FoldFloat32 with errInt32 receiver
// returns its first argument.
func (e errInt32) FoldFloat32(a float32, f func(v int32) float32) float32 {
	return a
}
// FoldFloat32F with errInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt32) FoldFloat32F(a func(error) float32, f func(int32) float32) float32 {
	return a(e.left)
}

// MapFloat64 with errInt32 receiver
// returns a newly built errInt32 with same error.
func (e errInt32) MapFloat64(f func(v int32) float64) ResultFloat64 {
	return ErrFloat64(e.left)
}
// FoldFloat64 with errInt32 receiver
// returns its first argument.
func (e errInt32) FoldFloat64(a float64, f func(v int32) float64) float64 {
	return a
}
// FoldFloat64F with errInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt32) FoldFloat64F(a func(error) float64, f func(int32) float64) float64 {
	return a(e.left)
}

// MapInt with errInt32 receiver
// returns a newly built errInt32 with same error.
func (e errInt32) MapInt(f func(v int32) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errInt32 receiver
// returns its first argument.
func (e errInt32) FoldInt(a int, f func(v int32) int) int {
	return a
}
// FoldIntF with errInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt32) FoldIntF(a func(error) int, f func(int32) int) int {
	return a(e.left)
}

// MapInt16 with errInt32 receiver
// returns a newly built errInt32 with same error.
func (e errInt32) MapInt16(f func(v int32) int16) ResultInt16 {
	return ErrInt16(e.left)
}
// FoldInt16 with errInt32 receiver
// returns its first argument.
func (e errInt32) FoldInt16(a int16, f func(v int32) int16) int16 {
	return a
}
// FoldInt16F with errInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt32) FoldInt16F(a func(error) int16, f func(int32) int16) int16 {
	return a(e.left)
}

// MapInt32 with errInt32 receiver
// returns a newly built errInt32 with same error.
func (e errInt32) MapInt32(f func(v int32) int32) ResultInt32 {
	return ErrInt32(e.left)
}
// FoldInt32 with errInt32 receiver
// returns its first argument.
func (e errInt32) FoldInt32(a int32, f func(v int32) int32) int32 {
	return a
}
// FoldInt32F with errInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt32) FoldInt32F(a func(error) int32, f func(int32) int32) int32 {
	return a(e.left)
}

// MapInt64 with errInt32 receiver
// returns a newly built errInt32 with same error.
func (e errInt32) MapInt64(f func(v int32) int64) ResultInt64 {
	return ErrInt64(e.left)
}
// FoldInt64 with errInt32 receiver
// returns its first argument.
func (e errInt32) FoldInt64(a int64, f func(v int32) int64) int64 {
	return a
}
// FoldInt64F with errInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt32) FoldInt64F(a func(error) int64, f func(int32) int64) int64 {
	return a(e.left)
}

// MapInt8 with errInt32 receiver
// returns a newly built errInt32 with same error.
func (e errInt32) MapInt8(f func(v int32) int8) ResultInt8 {
	return ErrInt8(e.left)
}
// FoldInt8 with errInt32 receiver
// returns its first argument.
func (e errInt32) FoldInt8(a int8, f func(v int32) int8) int8 {
	return a
}
// FoldInt8F with errInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt32) FoldInt8F(a func(error) int8, f func(int32) int8) int8 {
	return a(e.left)
}

// MapRune with errInt32 receiver
// returns a newly built errInt32 with same error.
func (e errInt32) MapRune(f func(v int32) rune) ResultRune {
	return ErrRune(e.left)
}
// FoldRune with errInt32 receiver
// returns its first argument.
func (e errInt32) FoldRune(a rune, f func(v int32) rune) rune {
	return a
}
// FoldRuneF with errInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt32) FoldRuneF(a func(error) rune, f func(int32) rune) rune {
	return a(e.left)
}

// MapString with errInt32 receiver
// returns a newly built errInt32 with same error.
func (e errInt32) MapString(f func(v int32) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errInt32 receiver
// returns its first argument.
func (e errInt32) FoldString(a string, f func(v int32) string) string {
	return a
}
// FoldStringF with errInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt32) FoldStringF(a func(error) string, f func(int32) string) string {
	return a(e.left)
}

// MapUInt with errInt32 receiver
// returns a newly built errInt32 with same error.
func (e errInt32) MapUInt(f func(v int32) uint) ResultUInt {
	return ErrUInt(e.left)
}
// FoldUInt with errInt32 receiver
// returns its first argument.
func (e errInt32) FoldUInt(a uint, f func(v int32) uint) uint {
	return a
}
// FoldUIntF with errInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt32) FoldUIntF(a func(error) uint, f func(int32) uint) uint {
	return a(e.left)
}

// MapUInt16 with errInt32 receiver
// returns a newly built errInt32 with same error.
func (e errInt32) MapUInt16(f func(v int32) uint16) ResultUInt16 {
	return ErrUInt16(e.left)
}
// FoldUInt16 with errInt32 receiver
// returns its first argument.
func (e errInt32) FoldUInt16(a uint16, f func(v int32) uint16) uint16 {
	return a
}
// FoldUInt16F with errInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt32) FoldUInt16F(a func(error) uint16, f func(int32) uint16) uint16 {
	return a(e.left)
}

// MapUInt32 with errInt32 receiver
// returns a newly built errInt32 with same error.
func (e errInt32) MapUInt32(f func(v int32) uint32) ResultUInt32 {
	return ErrUInt32(e.left)
}
// FoldUInt32 with errInt32 receiver
// returns its first argument.
func (e errInt32) FoldUInt32(a uint32, f func(v int32) uint32) uint32 {
	return a
}
// FoldUInt32F with errInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt32) FoldUInt32F(a func(error) uint32, f func(int32) uint32) uint32 {
	return a(e.left)
}

// MapUInt64 with errInt32 receiver
// returns a newly built errInt32 with same error.
func (e errInt32) MapUInt64(f func(v int32) uint64) ResultUInt64 {
	return ErrUInt64(e.left)
}
// FoldUInt64 with errInt32 receiver
// returns its first argument.
func (e errInt32) FoldUInt64(a uint64, f func(v int32) uint64) uint64 {
	return a
}
// FoldUInt64F with errInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt32) FoldUInt64F(a func(error) uint64, f func(int32) uint64) uint64 {
	return a(e.left)
}

// MapUInt8 with errInt32 receiver
// returns a newly built errInt32 with same error.
func (e errInt32) MapUInt8(f func(v int32) uint8) ResultUInt8 {
	return ErrUInt8(e.left)
}
// FoldUInt8 with errInt32 receiver
// returns its first argument.
func (e errInt32) FoldUInt8(a uint8, f func(v int32) uint8) uint8 {
	return a
}
// FoldUInt8F with errInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt32) FoldUInt8F(a func(error) uint8, f func(int32) uint8) uint8 {
	return a(e.left)
}

// MapUintPtr with errInt32 receiver
// returns a newly built errInt32 with same error.
func (e errInt32) MapUintPtr(f func(v int32) uintptr) ResultUintPtr {
	return ErrUintPtr(e.left)
}
// FoldUintPtr with errInt32 receiver
// returns its first argument.
func (e errInt32) FoldUintPtr(a uintptr, f func(v int32) uintptr) uintptr {
	return a
}
// FoldUintPtrF with errInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt32) FoldUintPtrF(a func(error) uintptr, f func(int32) uintptr) uintptr {
	return a(e.left)
}
 // end of nones

// okInt32 implements ResultInt32 for a successful result
type okInt32 struct {
	right int32
}

// OkInt32 returns a successful result with value v of type int32 
func OkInt32(v int32) okInt32 {
	return okInt32{v}
}
// MapInt32 with okInt32 receiver
// applies its function argument on hold value 
func (s okInt32) Map(f func(int32)) { f(s.right) }

// FoldFInt32 with okInt32 receiver
// applies its second function argument on hold value 
func (s okInt32) FoldF(l func(error), r func(int32)) { r(s.right) }


// MapBool on okInt32 receiver
// applies its function arguments on hold value and returns an okBool
func (s okInt32) MapBool(f func(int32) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldBool(a bool, f func(int32) bool) bool {
	return f(s.right)
}

// FoldBoolF on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldBoolF(a func(error) bool, f func(int32) bool) bool {
	return f(s.right)
}

// MapByte on okInt32 receiver
// applies its function arguments on hold value and returns an okByte
func (s okInt32) MapByte(f func(int32) byte) ResultByte {
	return OkByte(f(s.right))
}

// FoldByte on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldByte(a byte, f func(int32) byte) byte {
	return f(s.right)
}

// FoldByteF on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldByteF(a func(error) byte, f func(int32) byte) byte {
	return f(s.right)
}

// MapComplex128 on okInt32 receiver
// applies its function arguments on hold value and returns an okComplex128
func (s okInt32) MapComplex128(f func(int32) complex128) ResultComplex128 {
	return OkComplex128(f(s.right))
}

// FoldComplex128 on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldComplex128(a complex128, f func(int32) complex128) complex128 {
	return f(s.right)
}

// FoldComplex128F on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldComplex128F(a func(error) complex128, f func(int32) complex128) complex128 {
	return f(s.right)
}

// MapComplex64 on okInt32 receiver
// applies its function arguments on hold value and returns an okComplex64
func (s okInt32) MapComplex64(f func(int32) complex64) ResultComplex64 {
	return OkComplex64(f(s.right))
}

// FoldComplex64 on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldComplex64(a complex64, f func(int32) complex64) complex64 {
	return f(s.right)
}

// FoldComplex64F on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldComplex64F(a func(error) complex64, f func(int32) complex64) complex64 {
	return f(s.right)
}

// MapFloat32 on okInt32 receiver
// applies its function arguments on hold value and returns an okFloat32
func (s okInt32) MapFloat32(f func(int32) float32) ResultFloat32 {
	return OkFloat32(f(s.right))
}

// FoldFloat32 on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldFloat32(a float32, f func(int32) float32) float32 {
	return f(s.right)
}

// FoldFloat32F on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldFloat32F(a func(error) float32, f func(int32) float32) float32 {
	return f(s.right)
}

// MapFloat64 on okInt32 receiver
// applies its function arguments on hold value and returns an okFloat64
func (s okInt32) MapFloat64(f func(int32) float64) ResultFloat64 {
	return OkFloat64(f(s.right))
}

// FoldFloat64 on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldFloat64(a float64, f func(int32) float64) float64 {
	return f(s.right)
}

// FoldFloat64F on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldFloat64F(a func(error) float64, f func(int32) float64) float64 {
	return f(s.right)
}

// MapInt on okInt32 receiver
// applies its function arguments on hold value and returns an okInt
func (s okInt32) MapInt(f func(int32) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldInt(a int, f func(int32) int) int {
	return f(s.right)
}

// FoldIntF on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldIntF(a func(error) int, f func(int32) int) int {
	return f(s.right)
}

// MapInt16 on okInt32 receiver
// applies its function arguments on hold value and returns an okInt16
func (s okInt32) MapInt16(f func(int32) int16) ResultInt16 {
	return OkInt16(f(s.right))
}

// FoldInt16 on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldInt16(a int16, f func(int32) int16) int16 {
	return f(s.right)
}

// FoldInt16F on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldInt16F(a func(error) int16, f func(int32) int16) int16 {
	return f(s.right)
}

// MapInt32 on okInt32 receiver
// applies its function arguments on hold value and returns an okInt32
func (s okInt32) MapInt32(f func(int32) int32) ResultInt32 {
	return OkInt32(f(s.right))
}

// FoldInt32 on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldInt32(a int32, f func(int32) int32) int32 {
	return f(s.right)
}

// FoldInt32F on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldInt32F(a func(error) int32, f func(int32) int32) int32 {
	return f(s.right)
}

// MapInt64 on okInt32 receiver
// applies its function arguments on hold value and returns an okInt64
func (s okInt32) MapInt64(f func(int32) int64) ResultInt64 {
	return OkInt64(f(s.right))
}

// FoldInt64 on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldInt64(a int64, f func(int32) int64) int64 {
	return f(s.right)
}

// FoldInt64F on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldInt64F(a func(error) int64, f func(int32) int64) int64 {
	return f(s.right)
}

// MapInt8 on okInt32 receiver
// applies its function arguments on hold value and returns an okInt8
func (s okInt32) MapInt8(f func(int32) int8) ResultInt8 {
	return OkInt8(f(s.right))
}

// FoldInt8 on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldInt8(a int8, f func(int32) int8) int8 {
	return f(s.right)
}

// FoldInt8F on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldInt8F(a func(error) int8, f func(int32) int8) int8 {
	return f(s.right)
}

// MapRune on okInt32 receiver
// applies its function arguments on hold value and returns an okRune
func (s okInt32) MapRune(f func(int32) rune) ResultRune {
	return OkRune(f(s.right))
}

// FoldRune on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldRune(a rune, f func(int32) rune) rune {
	return f(s.right)
}

// FoldRuneF on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldRuneF(a func(error) rune, f func(int32) rune) rune {
	return f(s.right)
}

// MapString on okInt32 receiver
// applies its function arguments on hold value and returns an okString
func (s okInt32) MapString(f func(int32) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldString(a string, f func(int32) string) string {
	return f(s.right)
}

// FoldStringF on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldStringF(a func(error) string, f func(int32) string) string {
	return f(s.right)
}

// MapUInt on okInt32 receiver
// applies its function arguments on hold value and returns an okUInt
func (s okInt32) MapUInt(f func(int32) uint) ResultUInt {
	return OkUInt(f(s.right))
}

// FoldUInt on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldUInt(a uint, f func(int32) uint) uint {
	return f(s.right)
}

// FoldUIntF on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldUIntF(a func(error) uint, f func(int32) uint) uint {
	return f(s.right)
}

// MapUInt16 on okInt32 receiver
// applies its function arguments on hold value and returns an okUInt16
func (s okInt32) MapUInt16(f func(int32) uint16) ResultUInt16 {
	return OkUInt16(f(s.right))
}

// FoldUInt16 on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldUInt16(a uint16, f func(int32) uint16) uint16 {
	return f(s.right)
}

// FoldUInt16F on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldUInt16F(a func(error) uint16, f func(int32) uint16) uint16 {
	return f(s.right)
}

// MapUInt32 on okInt32 receiver
// applies its function arguments on hold value and returns an okUInt32
func (s okInt32) MapUInt32(f func(int32) uint32) ResultUInt32 {
	return OkUInt32(f(s.right))
}

// FoldUInt32 on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldUInt32(a uint32, f func(int32) uint32) uint32 {
	return f(s.right)
}

// FoldUInt32F on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldUInt32F(a func(error) uint32, f func(int32) uint32) uint32 {
	return f(s.right)
}

// MapUInt64 on okInt32 receiver
// applies its function arguments on hold value and returns an okUInt64
func (s okInt32) MapUInt64(f func(int32) uint64) ResultUInt64 {
	return OkUInt64(f(s.right))
}

// FoldUInt64 on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldUInt64(a uint64, f func(int32) uint64) uint64 {
	return f(s.right)
}

// FoldUInt64F on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldUInt64F(a func(error) uint64, f func(int32) uint64) uint64 {
	return f(s.right)
}

// MapUInt8 on okInt32 receiver
// applies its function arguments on hold value and returns an okUInt8
func (s okInt32) MapUInt8(f func(int32) uint8) ResultUInt8 {
	return OkUInt8(f(s.right))
}

// FoldUInt8 on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldUInt8(a uint8, f func(int32) uint8) uint8 {
	return f(s.right)
}

// FoldUInt8F on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldUInt8F(a func(error) uint8, f func(int32) uint8) uint8 {
	return f(s.right)
}

// MapUintPtr on okInt32 receiver
// applies its function arguments on hold value and returns an okUintPtr
func (s okInt32) MapUintPtr(f func(int32) uintptr) ResultUintPtr {
	return OkUintPtr(f(s.right))
}

// FoldUintPtr on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldUintPtr(a uintptr, f func(int32) uintptr) uintptr {
	return f(s.right)
}

// FoldUintPtrF on okInt32 receiver
// applies its second function arguments on hold value and returns an int32
func (s okInt32) FoldUintPtrF(a func(error) uintptr, f func(int32) uintptr) uintptr {
	return f(s.right)
}
 // end of oks



// errInt64 implements ResultInt64 for a failed result
type errInt64 struct{
	left error
}

// ErrInt64(error  | string) makes a new errInt64
// from an error or a string.
func ErrInt64(err interface{}) errInt64 {
	switch err.(type) {
		case string : return errInt64{errors.New(err.(string))}
		case error : return errInt64{err.(error)}
	} 
	return errInt64{errors.New("ErrInt64 called with something else than string or error")}
}

// Map with errInt64 receiver is a noop
func (e errInt64) Map(f func(int64)) {}

// FoldF with errInt64 applies it's first argument
// function on its error state
func (e errInt64) FoldF(l func(e error), r func(int64)) { l(e.left) }


// MapBool with errInt64 receiver
// returns a newly built errInt64 with same error.
func (e errInt64) MapBool(f func(v int64) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errInt64 receiver
// returns its first argument.
func (e errInt64) FoldBool(a bool, f func(v int64) bool) bool {
	return a
}
// FoldBoolF with errInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt64) FoldBoolF(a func(error) bool, f func(int64) bool) bool {
	return a(e.left)
}

// MapByte with errInt64 receiver
// returns a newly built errInt64 with same error.
func (e errInt64) MapByte(f func(v int64) byte) ResultByte {
	return ErrByte(e.left)
}
// FoldByte with errInt64 receiver
// returns its first argument.
func (e errInt64) FoldByte(a byte, f func(v int64) byte) byte {
	return a
}
// FoldByteF with errInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt64) FoldByteF(a func(error) byte, f func(int64) byte) byte {
	return a(e.left)
}

// MapComplex128 with errInt64 receiver
// returns a newly built errInt64 with same error.
func (e errInt64) MapComplex128(f func(v int64) complex128) ResultComplex128 {
	return ErrComplex128(e.left)
}
// FoldComplex128 with errInt64 receiver
// returns its first argument.
func (e errInt64) FoldComplex128(a complex128, f func(v int64) complex128) complex128 {
	return a
}
// FoldComplex128F with errInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt64) FoldComplex128F(a func(error) complex128, f func(int64) complex128) complex128 {
	return a(e.left)
}

// MapComplex64 with errInt64 receiver
// returns a newly built errInt64 with same error.
func (e errInt64) MapComplex64(f func(v int64) complex64) ResultComplex64 {
	return ErrComplex64(e.left)
}
// FoldComplex64 with errInt64 receiver
// returns its first argument.
func (e errInt64) FoldComplex64(a complex64, f func(v int64) complex64) complex64 {
	return a
}
// FoldComplex64F with errInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt64) FoldComplex64F(a func(error) complex64, f func(int64) complex64) complex64 {
	return a(e.left)
}

// MapFloat32 with errInt64 receiver
// returns a newly built errInt64 with same error.
func (e errInt64) MapFloat32(f func(v int64) float32) ResultFloat32 {
	return ErrFloat32(e.left)
}
// FoldFloat32 with errInt64 receiver
// returns its first argument.
func (e errInt64) FoldFloat32(a float32, f func(v int64) float32) float32 {
	return a
}
// FoldFloat32F with errInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt64) FoldFloat32F(a func(error) float32, f func(int64) float32) float32 {
	return a(e.left)
}

// MapFloat64 with errInt64 receiver
// returns a newly built errInt64 with same error.
func (e errInt64) MapFloat64(f func(v int64) float64) ResultFloat64 {
	return ErrFloat64(e.left)
}
// FoldFloat64 with errInt64 receiver
// returns its first argument.
func (e errInt64) FoldFloat64(a float64, f func(v int64) float64) float64 {
	return a
}
// FoldFloat64F with errInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt64) FoldFloat64F(a func(error) float64, f func(int64) float64) float64 {
	return a(e.left)
}

// MapInt with errInt64 receiver
// returns a newly built errInt64 with same error.
func (e errInt64) MapInt(f func(v int64) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errInt64 receiver
// returns its first argument.
func (e errInt64) FoldInt(a int, f func(v int64) int) int {
	return a
}
// FoldIntF with errInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt64) FoldIntF(a func(error) int, f func(int64) int) int {
	return a(e.left)
}

// MapInt16 with errInt64 receiver
// returns a newly built errInt64 with same error.
func (e errInt64) MapInt16(f func(v int64) int16) ResultInt16 {
	return ErrInt16(e.left)
}
// FoldInt16 with errInt64 receiver
// returns its first argument.
func (e errInt64) FoldInt16(a int16, f func(v int64) int16) int16 {
	return a
}
// FoldInt16F with errInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt64) FoldInt16F(a func(error) int16, f func(int64) int16) int16 {
	return a(e.left)
}

// MapInt32 with errInt64 receiver
// returns a newly built errInt64 with same error.
func (e errInt64) MapInt32(f func(v int64) int32) ResultInt32 {
	return ErrInt32(e.left)
}
// FoldInt32 with errInt64 receiver
// returns its first argument.
func (e errInt64) FoldInt32(a int32, f func(v int64) int32) int32 {
	return a
}
// FoldInt32F with errInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt64) FoldInt32F(a func(error) int32, f func(int64) int32) int32 {
	return a(e.left)
}

// MapInt64 with errInt64 receiver
// returns a newly built errInt64 with same error.
func (e errInt64) MapInt64(f func(v int64) int64) ResultInt64 {
	return ErrInt64(e.left)
}
// FoldInt64 with errInt64 receiver
// returns its first argument.
func (e errInt64) FoldInt64(a int64, f func(v int64) int64) int64 {
	return a
}
// FoldInt64F with errInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt64) FoldInt64F(a func(error) int64, f func(int64) int64) int64 {
	return a(e.left)
}

// MapInt8 with errInt64 receiver
// returns a newly built errInt64 with same error.
func (e errInt64) MapInt8(f func(v int64) int8) ResultInt8 {
	return ErrInt8(e.left)
}
// FoldInt8 with errInt64 receiver
// returns its first argument.
func (e errInt64) FoldInt8(a int8, f func(v int64) int8) int8 {
	return a
}
// FoldInt8F with errInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt64) FoldInt8F(a func(error) int8, f func(int64) int8) int8 {
	return a(e.left)
}

// MapRune with errInt64 receiver
// returns a newly built errInt64 with same error.
func (e errInt64) MapRune(f func(v int64) rune) ResultRune {
	return ErrRune(e.left)
}
// FoldRune with errInt64 receiver
// returns its first argument.
func (e errInt64) FoldRune(a rune, f func(v int64) rune) rune {
	return a
}
// FoldRuneF with errInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt64) FoldRuneF(a func(error) rune, f func(int64) rune) rune {
	return a(e.left)
}

// MapString with errInt64 receiver
// returns a newly built errInt64 with same error.
func (e errInt64) MapString(f func(v int64) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errInt64 receiver
// returns its first argument.
func (e errInt64) FoldString(a string, f func(v int64) string) string {
	return a
}
// FoldStringF with errInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt64) FoldStringF(a func(error) string, f func(int64) string) string {
	return a(e.left)
}

// MapUInt with errInt64 receiver
// returns a newly built errInt64 with same error.
func (e errInt64) MapUInt(f func(v int64) uint) ResultUInt {
	return ErrUInt(e.left)
}
// FoldUInt with errInt64 receiver
// returns its first argument.
func (e errInt64) FoldUInt(a uint, f func(v int64) uint) uint {
	return a
}
// FoldUIntF with errInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt64) FoldUIntF(a func(error) uint, f func(int64) uint) uint {
	return a(e.left)
}

// MapUInt16 with errInt64 receiver
// returns a newly built errInt64 with same error.
func (e errInt64) MapUInt16(f func(v int64) uint16) ResultUInt16 {
	return ErrUInt16(e.left)
}
// FoldUInt16 with errInt64 receiver
// returns its first argument.
func (e errInt64) FoldUInt16(a uint16, f func(v int64) uint16) uint16 {
	return a
}
// FoldUInt16F with errInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt64) FoldUInt16F(a func(error) uint16, f func(int64) uint16) uint16 {
	return a(e.left)
}

// MapUInt32 with errInt64 receiver
// returns a newly built errInt64 with same error.
func (e errInt64) MapUInt32(f func(v int64) uint32) ResultUInt32 {
	return ErrUInt32(e.left)
}
// FoldUInt32 with errInt64 receiver
// returns its first argument.
func (e errInt64) FoldUInt32(a uint32, f func(v int64) uint32) uint32 {
	return a
}
// FoldUInt32F with errInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt64) FoldUInt32F(a func(error) uint32, f func(int64) uint32) uint32 {
	return a(e.left)
}

// MapUInt64 with errInt64 receiver
// returns a newly built errInt64 with same error.
func (e errInt64) MapUInt64(f func(v int64) uint64) ResultUInt64 {
	return ErrUInt64(e.left)
}
// FoldUInt64 with errInt64 receiver
// returns its first argument.
func (e errInt64) FoldUInt64(a uint64, f func(v int64) uint64) uint64 {
	return a
}
// FoldUInt64F with errInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt64) FoldUInt64F(a func(error) uint64, f func(int64) uint64) uint64 {
	return a(e.left)
}

// MapUInt8 with errInt64 receiver
// returns a newly built errInt64 with same error.
func (e errInt64) MapUInt8(f func(v int64) uint8) ResultUInt8 {
	return ErrUInt8(e.left)
}
// FoldUInt8 with errInt64 receiver
// returns its first argument.
func (e errInt64) FoldUInt8(a uint8, f func(v int64) uint8) uint8 {
	return a
}
// FoldUInt8F with errInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt64) FoldUInt8F(a func(error) uint8, f func(int64) uint8) uint8 {
	return a(e.left)
}

// MapUintPtr with errInt64 receiver
// returns a newly built errInt64 with same error.
func (e errInt64) MapUintPtr(f func(v int64) uintptr) ResultUintPtr {
	return ErrUintPtr(e.left)
}
// FoldUintPtr with errInt64 receiver
// returns its first argument.
func (e errInt64) FoldUintPtr(a uintptr, f func(v int64) uintptr) uintptr {
	return a
}
// FoldUintPtrF with errInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt64) FoldUintPtrF(a func(error) uintptr, f func(int64) uintptr) uintptr {
	return a(e.left)
}
 // end of nones

// okInt64 implements ResultInt64 for a successful result
type okInt64 struct {
	right int64
}

// OkInt64 returns a successful result with value v of type int64 
func OkInt64(v int64) okInt64 {
	return okInt64{v}
}
// MapInt64 with okInt64 receiver
// applies its function argument on hold value 
func (s okInt64) Map(f func(int64)) { f(s.right) }

// FoldFInt64 with okInt64 receiver
// applies its second function argument on hold value 
func (s okInt64) FoldF(l func(error), r func(int64)) { r(s.right) }


// MapBool on okInt64 receiver
// applies its function arguments on hold value and returns an okBool
func (s okInt64) MapBool(f func(int64) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldBool(a bool, f func(int64) bool) bool {
	return f(s.right)
}

// FoldBoolF on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldBoolF(a func(error) bool, f func(int64) bool) bool {
	return f(s.right)
}

// MapByte on okInt64 receiver
// applies its function arguments on hold value and returns an okByte
func (s okInt64) MapByte(f func(int64) byte) ResultByte {
	return OkByte(f(s.right))
}

// FoldByte on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldByte(a byte, f func(int64) byte) byte {
	return f(s.right)
}

// FoldByteF on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldByteF(a func(error) byte, f func(int64) byte) byte {
	return f(s.right)
}

// MapComplex128 on okInt64 receiver
// applies its function arguments on hold value and returns an okComplex128
func (s okInt64) MapComplex128(f func(int64) complex128) ResultComplex128 {
	return OkComplex128(f(s.right))
}

// FoldComplex128 on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldComplex128(a complex128, f func(int64) complex128) complex128 {
	return f(s.right)
}

// FoldComplex128F on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldComplex128F(a func(error) complex128, f func(int64) complex128) complex128 {
	return f(s.right)
}

// MapComplex64 on okInt64 receiver
// applies its function arguments on hold value and returns an okComplex64
func (s okInt64) MapComplex64(f func(int64) complex64) ResultComplex64 {
	return OkComplex64(f(s.right))
}

// FoldComplex64 on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldComplex64(a complex64, f func(int64) complex64) complex64 {
	return f(s.right)
}

// FoldComplex64F on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldComplex64F(a func(error) complex64, f func(int64) complex64) complex64 {
	return f(s.right)
}

// MapFloat32 on okInt64 receiver
// applies its function arguments on hold value and returns an okFloat32
func (s okInt64) MapFloat32(f func(int64) float32) ResultFloat32 {
	return OkFloat32(f(s.right))
}

// FoldFloat32 on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldFloat32(a float32, f func(int64) float32) float32 {
	return f(s.right)
}

// FoldFloat32F on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldFloat32F(a func(error) float32, f func(int64) float32) float32 {
	return f(s.right)
}

// MapFloat64 on okInt64 receiver
// applies its function arguments on hold value and returns an okFloat64
func (s okInt64) MapFloat64(f func(int64) float64) ResultFloat64 {
	return OkFloat64(f(s.right))
}

// FoldFloat64 on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldFloat64(a float64, f func(int64) float64) float64 {
	return f(s.right)
}

// FoldFloat64F on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldFloat64F(a func(error) float64, f func(int64) float64) float64 {
	return f(s.right)
}

// MapInt on okInt64 receiver
// applies its function arguments on hold value and returns an okInt
func (s okInt64) MapInt(f func(int64) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldInt(a int, f func(int64) int) int {
	return f(s.right)
}

// FoldIntF on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldIntF(a func(error) int, f func(int64) int) int {
	return f(s.right)
}

// MapInt16 on okInt64 receiver
// applies its function arguments on hold value and returns an okInt16
func (s okInt64) MapInt16(f func(int64) int16) ResultInt16 {
	return OkInt16(f(s.right))
}

// FoldInt16 on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldInt16(a int16, f func(int64) int16) int16 {
	return f(s.right)
}

// FoldInt16F on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldInt16F(a func(error) int16, f func(int64) int16) int16 {
	return f(s.right)
}

// MapInt32 on okInt64 receiver
// applies its function arguments on hold value and returns an okInt32
func (s okInt64) MapInt32(f func(int64) int32) ResultInt32 {
	return OkInt32(f(s.right))
}

// FoldInt32 on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldInt32(a int32, f func(int64) int32) int32 {
	return f(s.right)
}

// FoldInt32F on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldInt32F(a func(error) int32, f func(int64) int32) int32 {
	return f(s.right)
}

// MapInt64 on okInt64 receiver
// applies its function arguments on hold value and returns an okInt64
func (s okInt64) MapInt64(f func(int64) int64) ResultInt64 {
	return OkInt64(f(s.right))
}

// FoldInt64 on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldInt64(a int64, f func(int64) int64) int64 {
	return f(s.right)
}

// FoldInt64F on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldInt64F(a func(error) int64, f func(int64) int64) int64 {
	return f(s.right)
}

// MapInt8 on okInt64 receiver
// applies its function arguments on hold value and returns an okInt8
func (s okInt64) MapInt8(f func(int64) int8) ResultInt8 {
	return OkInt8(f(s.right))
}

// FoldInt8 on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldInt8(a int8, f func(int64) int8) int8 {
	return f(s.right)
}

// FoldInt8F on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldInt8F(a func(error) int8, f func(int64) int8) int8 {
	return f(s.right)
}

// MapRune on okInt64 receiver
// applies its function arguments on hold value and returns an okRune
func (s okInt64) MapRune(f func(int64) rune) ResultRune {
	return OkRune(f(s.right))
}

// FoldRune on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldRune(a rune, f func(int64) rune) rune {
	return f(s.right)
}

// FoldRuneF on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldRuneF(a func(error) rune, f func(int64) rune) rune {
	return f(s.right)
}

// MapString on okInt64 receiver
// applies its function arguments on hold value and returns an okString
func (s okInt64) MapString(f func(int64) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldString(a string, f func(int64) string) string {
	return f(s.right)
}

// FoldStringF on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldStringF(a func(error) string, f func(int64) string) string {
	return f(s.right)
}

// MapUInt on okInt64 receiver
// applies its function arguments on hold value and returns an okUInt
func (s okInt64) MapUInt(f func(int64) uint) ResultUInt {
	return OkUInt(f(s.right))
}

// FoldUInt on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldUInt(a uint, f func(int64) uint) uint {
	return f(s.right)
}

// FoldUIntF on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldUIntF(a func(error) uint, f func(int64) uint) uint {
	return f(s.right)
}

// MapUInt16 on okInt64 receiver
// applies its function arguments on hold value and returns an okUInt16
func (s okInt64) MapUInt16(f func(int64) uint16) ResultUInt16 {
	return OkUInt16(f(s.right))
}

// FoldUInt16 on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldUInt16(a uint16, f func(int64) uint16) uint16 {
	return f(s.right)
}

// FoldUInt16F on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldUInt16F(a func(error) uint16, f func(int64) uint16) uint16 {
	return f(s.right)
}

// MapUInt32 on okInt64 receiver
// applies its function arguments on hold value and returns an okUInt32
func (s okInt64) MapUInt32(f func(int64) uint32) ResultUInt32 {
	return OkUInt32(f(s.right))
}

// FoldUInt32 on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldUInt32(a uint32, f func(int64) uint32) uint32 {
	return f(s.right)
}

// FoldUInt32F on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldUInt32F(a func(error) uint32, f func(int64) uint32) uint32 {
	return f(s.right)
}

// MapUInt64 on okInt64 receiver
// applies its function arguments on hold value and returns an okUInt64
func (s okInt64) MapUInt64(f func(int64) uint64) ResultUInt64 {
	return OkUInt64(f(s.right))
}

// FoldUInt64 on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldUInt64(a uint64, f func(int64) uint64) uint64 {
	return f(s.right)
}

// FoldUInt64F on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldUInt64F(a func(error) uint64, f func(int64) uint64) uint64 {
	return f(s.right)
}

// MapUInt8 on okInt64 receiver
// applies its function arguments on hold value and returns an okUInt8
func (s okInt64) MapUInt8(f func(int64) uint8) ResultUInt8 {
	return OkUInt8(f(s.right))
}

// FoldUInt8 on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldUInt8(a uint8, f func(int64) uint8) uint8 {
	return f(s.right)
}

// FoldUInt8F on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldUInt8F(a func(error) uint8, f func(int64) uint8) uint8 {
	return f(s.right)
}

// MapUintPtr on okInt64 receiver
// applies its function arguments on hold value and returns an okUintPtr
func (s okInt64) MapUintPtr(f func(int64) uintptr) ResultUintPtr {
	return OkUintPtr(f(s.right))
}

// FoldUintPtr on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldUintPtr(a uintptr, f func(int64) uintptr) uintptr {
	return f(s.right)
}

// FoldUintPtrF on okInt64 receiver
// applies its second function arguments on hold value and returns an int64
func (s okInt64) FoldUintPtrF(a func(error) uintptr, f func(int64) uintptr) uintptr {
	return f(s.right)
}
 // end of oks



// errInt8 implements ResultInt8 for a failed result
type errInt8 struct{
	left error
}

// ErrInt8(error  | string) makes a new errInt8
// from an error or a string.
func ErrInt8(err interface{}) errInt8 {
	switch err.(type) {
		case string : return errInt8{errors.New(err.(string))}
		case error : return errInt8{err.(error)}
	} 
	return errInt8{errors.New("ErrInt8 called with something else than string or error")}
}

// Map with errInt8 receiver is a noop
func (e errInt8) Map(f func(int8)) {}

// FoldF with errInt8 applies it's first argument
// function on its error state
func (e errInt8) FoldF(l func(e error), r func(int8)) { l(e.left) }


// MapBool with errInt8 receiver
// returns a newly built errInt8 with same error.
func (e errInt8) MapBool(f func(v int8) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errInt8 receiver
// returns its first argument.
func (e errInt8) FoldBool(a bool, f func(v int8) bool) bool {
	return a
}
// FoldBoolF with errInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt8) FoldBoolF(a func(error) bool, f func(int8) bool) bool {
	return a(e.left)
}

// MapByte with errInt8 receiver
// returns a newly built errInt8 with same error.
func (e errInt8) MapByte(f func(v int8) byte) ResultByte {
	return ErrByte(e.left)
}
// FoldByte with errInt8 receiver
// returns its first argument.
func (e errInt8) FoldByte(a byte, f func(v int8) byte) byte {
	return a
}
// FoldByteF with errInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt8) FoldByteF(a func(error) byte, f func(int8) byte) byte {
	return a(e.left)
}

// MapComplex128 with errInt8 receiver
// returns a newly built errInt8 with same error.
func (e errInt8) MapComplex128(f func(v int8) complex128) ResultComplex128 {
	return ErrComplex128(e.left)
}
// FoldComplex128 with errInt8 receiver
// returns its first argument.
func (e errInt8) FoldComplex128(a complex128, f func(v int8) complex128) complex128 {
	return a
}
// FoldComplex128F with errInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt8) FoldComplex128F(a func(error) complex128, f func(int8) complex128) complex128 {
	return a(e.left)
}

// MapComplex64 with errInt8 receiver
// returns a newly built errInt8 with same error.
func (e errInt8) MapComplex64(f func(v int8) complex64) ResultComplex64 {
	return ErrComplex64(e.left)
}
// FoldComplex64 with errInt8 receiver
// returns its first argument.
func (e errInt8) FoldComplex64(a complex64, f func(v int8) complex64) complex64 {
	return a
}
// FoldComplex64F with errInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt8) FoldComplex64F(a func(error) complex64, f func(int8) complex64) complex64 {
	return a(e.left)
}

// MapFloat32 with errInt8 receiver
// returns a newly built errInt8 with same error.
func (e errInt8) MapFloat32(f func(v int8) float32) ResultFloat32 {
	return ErrFloat32(e.left)
}
// FoldFloat32 with errInt8 receiver
// returns its first argument.
func (e errInt8) FoldFloat32(a float32, f func(v int8) float32) float32 {
	return a
}
// FoldFloat32F with errInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt8) FoldFloat32F(a func(error) float32, f func(int8) float32) float32 {
	return a(e.left)
}

// MapFloat64 with errInt8 receiver
// returns a newly built errInt8 with same error.
func (e errInt8) MapFloat64(f func(v int8) float64) ResultFloat64 {
	return ErrFloat64(e.left)
}
// FoldFloat64 with errInt8 receiver
// returns its first argument.
func (e errInt8) FoldFloat64(a float64, f func(v int8) float64) float64 {
	return a
}
// FoldFloat64F with errInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt8) FoldFloat64F(a func(error) float64, f func(int8) float64) float64 {
	return a(e.left)
}

// MapInt with errInt8 receiver
// returns a newly built errInt8 with same error.
func (e errInt8) MapInt(f func(v int8) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errInt8 receiver
// returns its first argument.
func (e errInt8) FoldInt(a int, f func(v int8) int) int {
	return a
}
// FoldIntF with errInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt8) FoldIntF(a func(error) int, f func(int8) int) int {
	return a(e.left)
}

// MapInt16 with errInt8 receiver
// returns a newly built errInt8 with same error.
func (e errInt8) MapInt16(f func(v int8) int16) ResultInt16 {
	return ErrInt16(e.left)
}
// FoldInt16 with errInt8 receiver
// returns its first argument.
func (e errInt8) FoldInt16(a int16, f func(v int8) int16) int16 {
	return a
}
// FoldInt16F with errInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt8) FoldInt16F(a func(error) int16, f func(int8) int16) int16 {
	return a(e.left)
}

// MapInt32 with errInt8 receiver
// returns a newly built errInt8 with same error.
func (e errInt8) MapInt32(f func(v int8) int32) ResultInt32 {
	return ErrInt32(e.left)
}
// FoldInt32 with errInt8 receiver
// returns its first argument.
func (e errInt8) FoldInt32(a int32, f func(v int8) int32) int32 {
	return a
}
// FoldInt32F with errInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt8) FoldInt32F(a func(error) int32, f func(int8) int32) int32 {
	return a(e.left)
}

// MapInt64 with errInt8 receiver
// returns a newly built errInt8 with same error.
func (e errInt8) MapInt64(f func(v int8) int64) ResultInt64 {
	return ErrInt64(e.left)
}
// FoldInt64 with errInt8 receiver
// returns its first argument.
func (e errInt8) FoldInt64(a int64, f func(v int8) int64) int64 {
	return a
}
// FoldInt64F with errInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt8) FoldInt64F(a func(error) int64, f func(int8) int64) int64 {
	return a(e.left)
}

// MapInt8 with errInt8 receiver
// returns a newly built errInt8 with same error.
func (e errInt8) MapInt8(f func(v int8) int8) ResultInt8 {
	return ErrInt8(e.left)
}
// FoldInt8 with errInt8 receiver
// returns its first argument.
func (e errInt8) FoldInt8(a int8, f func(v int8) int8) int8 {
	return a
}
// FoldInt8F with errInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt8) FoldInt8F(a func(error) int8, f func(int8) int8) int8 {
	return a(e.left)
}

// MapRune with errInt8 receiver
// returns a newly built errInt8 with same error.
func (e errInt8) MapRune(f func(v int8) rune) ResultRune {
	return ErrRune(e.left)
}
// FoldRune with errInt8 receiver
// returns its first argument.
func (e errInt8) FoldRune(a rune, f func(v int8) rune) rune {
	return a
}
// FoldRuneF with errInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt8) FoldRuneF(a func(error) rune, f func(int8) rune) rune {
	return a(e.left)
}

// MapString with errInt8 receiver
// returns a newly built errInt8 with same error.
func (e errInt8) MapString(f func(v int8) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errInt8 receiver
// returns its first argument.
func (e errInt8) FoldString(a string, f func(v int8) string) string {
	return a
}
// FoldStringF with errInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt8) FoldStringF(a func(error) string, f func(int8) string) string {
	return a(e.left)
}

// MapUInt with errInt8 receiver
// returns a newly built errInt8 with same error.
func (e errInt8) MapUInt(f func(v int8) uint) ResultUInt {
	return ErrUInt(e.left)
}
// FoldUInt with errInt8 receiver
// returns its first argument.
func (e errInt8) FoldUInt(a uint, f func(v int8) uint) uint {
	return a
}
// FoldUIntF with errInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt8) FoldUIntF(a func(error) uint, f func(int8) uint) uint {
	return a(e.left)
}

// MapUInt16 with errInt8 receiver
// returns a newly built errInt8 with same error.
func (e errInt8) MapUInt16(f func(v int8) uint16) ResultUInt16 {
	return ErrUInt16(e.left)
}
// FoldUInt16 with errInt8 receiver
// returns its first argument.
func (e errInt8) FoldUInt16(a uint16, f func(v int8) uint16) uint16 {
	return a
}
// FoldUInt16F with errInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt8) FoldUInt16F(a func(error) uint16, f func(int8) uint16) uint16 {
	return a(e.left)
}

// MapUInt32 with errInt8 receiver
// returns a newly built errInt8 with same error.
func (e errInt8) MapUInt32(f func(v int8) uint32) ResultUInt32 {
	return ErrUInt32(e.left)
}
// FoldUInt32 with errInt8 receiver
// returns its first argument.
func (e errInt8) FoldUInt32(a uint32, f func(v int8) uint32) uint32 {
	return a
}
// FoldUInt32F with errInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt8) FoldUInt32F(a func(error) uint32, f func(int8) uint32) uint32 {
	return a(e.left)
}

// MapUInt64 with errInt8 receiver
// returns a newly built errInt8 with same error.
func (e errInt8) MapUInt64(f func(v int8) uint64) ResultUInt64 {
	return ErrUInt64(e.left)
}
// FoldUInt64 with errInt8 receiver
// returns its first argument.
func (e errInt8) FoldUInt64(a uint64, f func(v int8) uint64) uint64 {
	return a
}
// FoldUInt64F with errInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt8) FoldUInt64F(a func(error) uint64, f func(int8) uint64) uint64 {
	return a(e.left)
}

// MapUInt8 with errInt8 receiver
// returns a newly built errInt8 with same error.
func (e errInt8) MapUInt8(f func(v int8) uint8) ResultUInt8 {
	return ErrUInt8(e.left)
}
// FoldUInt8 with errInt8 receiver
// returns its first argument.
func (e errInt8) FoldUInt8(a uint8, f func(v int8) uint8) uint8 {
	return a
}
// FoldUInt8F with errInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt8) FoldUInt8F(a func(error) uint8, f func(int8) uint8) uint8 {
	return a(e.left)
}

// MapUintPtr with errInt8 receiver
// returns a newly built errInt8 with same error.
func (e errInt8) MapUintPtr(f func(v int8) uintptr) ResultUintPtr {
	return ErrUintPtr(e.left)
}
// FoldUintPtr with errInt8 receiver
// returns its first argument.
func (e errInt8) FoldUintPtr(a uintptr, f func(v int8) uintptr) uintptr {
	return a
}
// FoldUintPtrF with errInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errInt8) FoldUintPtrF(a func(error) uintptr, f func(int8) uintptr) uintptr {
	return a(e.left)
}
 // end of nones

// okInt8 implements ResultInt8 for a successful result
type okInt8 struct {
	right int8
}

// OkInt8 returns a successful result with value v of type int8 
func OkInt8(v int8) okInt8 {
	return okInt8{v}
}
// MapInt8 with okInt8 receiver
// applies its function argument on hold value 
func (s okInt8) Map(f func(int8)) { f(s.right) }

// FoldFInt8 with okInt8 receiver
// applies its second function argument on hold value 
func (s okInt8) FoldF(l func(error), r func(int8)) { r(s.right) }


// MapBool on okInt8 receiver
// applies its function arguments on hold value and returns an okBool
func (s okInt8) MapBool(f func(int8) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldBool(a bool, f func(int8) bool) bool {
	return f(s.right)
}

// FoldBoolF on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldBoolF(a func(error) bool, f func(int8) bool) bool {
	return f(s.right)
}

// MapByte on okInt8 receiver
// applies its function arguments on hold value and returns an okByte
func (s okInt8) MapByte(f func(int8) byte) ResultByte {
	return OkByte(f(s.right))
}

// FoldByte on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldByte(a byte, f func(int8) byte) byte {
	return f(s.right)
}

// FoldByteF on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldByteF(a func(error) byte, f func(int8) byte) byte {
	return f(s.right)
}

// MapComplex128 on okInt8 receiver
// applies its function arguments on hold value and returns an okComplex128
func (s okInt8) MapComplex128(f func(int8) complex128) ResultComplex128 {
	return OkComplex128(f(s.right))
}

// FoldComplex128 on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldComplex128(a complex128, f func(int8) complex128) complex128 {
	return f(s.right)
}

// FoldComplex128F on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldComplex128F(a func(error) complex128, f func(int8) complex128) complex128 {
	return f(s.right)
}

// MapComplex64 on okInt8 receiver
// applies its function arguments on hold value and returns an okComplex64
func (s okInt8) MapComplex64(f func(int8) complex64) ResultComplex64 {
	return OkComplex64(f(s.right))
}

// FoldComplex64 on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldComplex64(a complex64, f func(int8) complex64) complex64 {
	return f(s.right)
}

// FoldComplex64F on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldComplex64F(a func(error) complex64, f func(int8) complex64) complex64 {
	return f(s.right)
}

// MapFloat32 on okInt8 receiver
// applies its function arguments on hold value and returns an okFloat32
func (s okInt8) MapFloat32(f func(int8) float32) ResultFloat32 {
	return OkFloat32(f(s.right))
}

// FoldFloat32 on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldFloat32(a float32, f func(int8) float32) float32 {
	return f(s.right)
}

// FoldFloat32F on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldFloat32F(a func(error) float32, f func(int8) float32) float32 {
	return f(s.right)
}

// MapFloat64 on okInt8 receiver
// applies its function arguments on hold value and returns an okFloat64
func (s okInt8) MapFloat64(f func(int8) float64) ResultFloat64 {
	return OkFloat64(f(s.right))
}

// FoldFloat64 on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldFloat64(a float64, f func(int8) float64) float64 {
	return f(s.right)
}

// FoldFloat64F on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldFloat64F(a func(error) float64, f func(int8) float64) float64 {
	return f(s.right)
}

// MapInt on okInt8 receiver
// applies its function arguments on hold value and returns an okInt
func (s okInt8) MapInt(f func(int8) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldInt(a int, f func(int8) int) int {
	return f(s.right)
}

// FoldIntF on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldIntF(a func(error) int, f func(int8) int) int {
	return f(s.right)
}

// MapInt16 on okInt8 receiver
// applies its function arguments on hold value and returns an okInt16
func (s okInt8) MapInt16(f func(int8) int16) ResultInt16 {
	return OkInt16(f(s.right))
}

// FoldInt16 on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldInt16(a int16, f func(int8) int16) int16 {
	return f(s.right)
}

// FoldInt16F on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldInt16F(a func(error) int16, f func(int8) int16) int16 {
	return f(s.right)
}

// MapInt32 on okInt8 receiver
// applies its function arguments on hold value and returns an okInt32
func (s okInt8) MapInt32(f func(int8) int32) ResultInt32 {
	return OkInt32(f(s.right))
}

// FoldInt32 on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldInt32(a int32, f func(int8) int32) int32 {
	return f(s.right)
}

// FoldInt32F on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldInt32F(a func(error) int32, f func(int8) int32) int32 {
	return f(s.right)
}

// MapInt64 on okInt8 receiver
// applies its function arguments on hold value and returns an okInt64
func (s okInt8) MapInt64(f func(int8) int64) ResultInt64 {
	return OkInt64(f(s.right))
}

// FoldInt64 on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldInt64(a int64, f func(int8) int64) int64 {
	return f(s.right)
}

// FoldInt64F on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldInt64F(a func(error) int64, f func(int8) int64) int64 {
	return f(s.right)
}

// MapInt8 on okInt8 receiver
// applies its function arguments on hold value and returns an okInt8
func (s okInt8) MapInt8(f func(int8) int8) ResultInt8 {
	return OkInt8(f(s.right))
}

// FoldInt8 on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldInt8(a int8, f func(int8) int8) int8 {
	return f(s.right)
}

// FoldInt8F on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldInt8F(a func(error) int8, f func(int8) int8) int8 {
	return f(s.right)
}

// MapRune on okInt8 receiver
// applies its function arguments on hold value and returns an okRune
func (s okInt8) MapRune(f func(int8) rune) ResultRune {
	return OkRune(f(s.right))
}

// FoldRune on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldRune(a rune, f func(int8) rune) rune {
	return f(s.right)
}

// FoldRuneF on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldRuneF(a func(error) rune, f func(int8) rune) rune {
	return f(s.right)
}

// MapString on okInt8 receiver
// applies its function arguments on hold value and returns an okString
func (s okInt8) MapString(f func(int8) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldString(a string, f func(int8) string) string {
	return f(s.right)
}

// FoldStringF on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldStringF(a func(error) string, f func(int8) string) string {
	return f(s.right)
}

// MapUInt on okInt8 receiver
// applies its function arguments on hold value and returns an okUInt
func (s okInt8) MapUInt(f func(int8) uint) ResultUInt {
	return OkUInt(f(s.right))
}

// FoldUInt on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldUInt(a uint, f func(int8) uint) uint {
	return f(s.right)
}

// FoldUIntF on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldUIntF(a func(error) uint, f func(int8) uint) uint {
	return f(s.right)
}

// MapUInt16 on okInt8 receiver
// applies its function arguments on hold value and returns an okUInt16
func (s okInt8) MapUInt16(f func(int8) uint16) ResultUInt16 {
	return OkUInt16(f(s.right))
}

// FoldUInt16 on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldUInt16(a uint16, f func(int8) uint16) uint16 {
	return f(s.right)
}

// FoldUInt16F on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldUInt16F(a func(error) uint16, f func(int8) uint16) uint16 {
	return f(s.right)
}

// MapUInt32 on okInt8 receiver
// applies its function arguments on hold value and returns an okUInt32
func (s okInt8) MapUInt32(f func(int8) uint32) ResultUInt32 {
	return OkUInt32(f(s.right))
}

// FoldUInt32 on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldUInt32(a uint32, f func(int8) uint32) uint32 {
	return f(s.right)
}

// FoldUInt32F on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldUInt32F(a func(error) uint32, f func(int8) uint32) uint32 {
	return f(s.right)
}

// MapUInt64 on okInt8 receiver
// applies its function arguments on hold value and returns an okUInt64
func (s okInt8) MapUInt64(f func(int8) uint64) ResultUInt64 {
	return OkUInt64(f(s.right))
}

// FoldUInt64 on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldUInt64(a uint64, f func(int8) uint64) uint64 {
	return f(s.right)
}

// FoldUInt64F on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldUInt64F(a func(error) uint64, f func(int8) uint64) uint64 {
	return f(s.right)
}

// MapUInt8 on okInt8 receiver
// applies its function arguments on hold value and returns an okUInt8
func (s okInt8) MapUInt8(f func(int8) uint8) ResultUInt8 {
	return OkUInt8(f(s.right))
}

// FoldUInt8 on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldUInt8(a uint8, f func(int8) uint8) uint8 {
	return f(s.right)
}

// FoldUInt8F on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldUInt8F(a func(error) uint8, f func(int8) uint8) uint8 {
	return f(s.right)
}

// MapUintPtr on okInt8 receiver
// applies its function arguments on hold value and returns an okUintPtr
func (s okInt8) MapUintPtr(f func(int8) uintptr) ResultUintPtr {
	return OkUintPtr(f(s.right))
}

// FoldUintPtr on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldUintPtr(a uintptr, f func(int8) uintptr) uintptr {
	return f(s.right)
}

// FoldUintPtrF on okInt8 receiver
// applies its second function arguments on hold value and returns an int8
func (s okInt8) FoldUintPtrF(a func(error) uintptr, f func(int8) uintptr) uintptr {
	return f(s.right)
}
 // end of oks



// errRune implements ResultRune for a failed result
type errRune struct{
	left error
}

// ErrRune(error  | string) makes a new errRune
// from an error or a string.
func ErrRune(err interface{}) errRune {
	switch err.(type) {
		case string : return errRune{errors.New(err.(string))}
		case error : return errRune{err.(error)}
	} 
	return errRune{errors.New("ErrRune called with something else than string or error")}
}

// Map with errRune receiver is a noop
func (e errRune) Map(f func(rune)) {}

// FoldF with errRune applies it's first argument
// function on its error state
func (e errRune) FoldF(l func(e error), r func(rune)) { l(e.left) }


// MapBool with errRune receiver
// returns a newly built errRune with same error.
func (e errRune) MapBool(f func(v rune) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errRune receiver
// returns its first argument.
func (e errRune) FoldBool(a bool, f func(v rune) bool) bool {
	return a
}
// FoldBoolF with errRune receiver
// returns the result of its first argument applied to the result error state.
func (e errRune) FoldBoolF(a func(error) bool, f func(rune) bool) bool {
	return a(e.left)
}

// MapByte with errRune receiver
// returns a newly built errRune with same error.
func (e errRune) MapByte(f func(v rune) byte) ResultByte {
	return ErrByte(e.left)
}
// FoldByte with errRune receiver
// returns its first argument.
func (e errRune) FoldByte(a byte, f func(v rune) byte) byte {
	return a
}
// FoldByteF with errRune receiver
// returns the result of its first argument applied to the result error state.
func (e errRune) FoldByteF(a func(error) byte, f func(rune) byte) byte {
	return a(e.left)
}

// MapComplex128 with errRune receiver
// returns a newly built errRune with same error.
func (e errRune) MapComplex128(f func(v rune) complex128) ResultComplex128 {
	return ErrComplex128(e.left)
}
// FoldComplex128 with errRune receiver
// returns its first argument.
func (e errRune) FoldComplex128(a complex128, f func(v rune) complex128) complex128 {
	return a
}
// FoldComplex128F with errRune receiver
// returns the result of its first argument applied to the result error state.
func (e errRune) FoldComplex128F(a func(error) complex128, f func(rune) complex128) complex128 {
	return a(e.left)
}

// MapComplex64 with errRune receiver
// returns a newly built errRune with same error.
func (e errRune) MapComplex64(f func(v rune) complex64) ResultComplex64 {
	return ErrComplex64(e.left)
}
// FoldComplex64 with errRune receiver
// returns its first argument.
func (e errRune) FoldComplex64(a complex64, f func(v rune) complex64) complex64 {
	return a
}
// FoldComplex64F with errRune receiver
// returns the result of its first argument applied to the result error state.
func (e errRune) FoldComplex64F(a func(error) complex64, f func(rune) complex64) complex64 {
	return a(e.left)
}

// MapFloat32 with errRune receiver
// returns a newly built errRune with same error.
func (e errRune) MapFloat32(f func(v rune) float32) ResultFloat32 {
	return ErrFloat32(e.left)
}
// FoldFloat32 with errRune receiver
// returns its first argument.
func (e errRune) FoldFloat32(a float32, f func(v rune) float32) float32 {
	return a
}
// FoldFloat32F with errRune receiver
// returns the result of its first argument applied to the result error state.
func (e errRune) FoldFloat32F(a func(error) float32, f func(rune) float32) float32 {
	return a(e.left)
}

// MapFloat64 with errRune receiver
// returns a newly built errRune with same error.
func (e errRune) MapFloat64(f func(v rune) float64) ResultFloat64 {
	return ErrFloat64(e.left)
}
// FoldFloat64 with errRune receiver
// returns its first argument.
func (e errRune) FoldFloat64(a float64, f func(v rune) float64) float64 {
	return a
}
// FoldFloat64F with errRune receiver
// returns the result of its first argument applied to the result error state.
func (e errRune) FoldFloat64F(a func(error) float64, f func(rune) float64) float64 {
	return a(e.left)
}

// MapInt with errRune receiver
// returns a newly built errRune with same error.
func (e errRune) MapInt(f func(v rune) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errRune receiver
// returns its first argument.
func (e errRune) FoldInt(a int, f func(v rune) int) int {
	return a
}
// FoldIntF with errRune receiver
// returns the result of its first argument applied to the result error state.
func (e errRune) FoldIntF(a func(error) int, f func(rune) int) int {
	return a(e.left)
}

// MapInt16 with errRune receiver
// returns a newly built errRune with same error.
func (e errRune) MapInt16(f func(v rune) int16) ResultInt16 {
	return ErrInt16(e.left)
}
// FoldInt16 with errRune receiver
// returns its first argument.
func (e errRune) FoldInt16(a int16, f func(v rune) int16) int16 {
	return a
}
// FoldInt16F with errRune receiver
// returns the result of its first argument applied to the result error state.
func (e errRune) FoldInt16F(a func(error) int16, f func(rune) int16) int16 {
	return a(e.left)
}

// MapInt32 with errRune receiver
// returns a newly built errRune with same error.
func (e errRune) MapInt32(f func(v rune) int32) ResultInt32 {
	return ErrInt32(e.left)
}
// FoldInt32 with errRune receiver
// returns its first argument.
func (e errRune) FoldInt32(a int32, f func(v rune) int32) int32 {
	return a
}
// FoldInt32F with errRune receiver
// returns the result of its first argument applied to the result error state.
func (e errRune) FoldInt32F(a func(error) int32, f func(rune) int32) int32 {
	return a(e.left)
}

// MapInt64 with errRune receiver
// returns a newly built errRune with same error.
func (e errRune) MapInt64(f func(v rune) int64) ResultInt64 {
	return ErrInt64(e.left)
}
// FoldInt64 with errRune receiver
// returns its first argument.
func (e errRune) FoldInt64(a int64, f func(v rune) int64) int64 {
	return a
}
// FoldInt64F with errRune receiver
// returns the result of its first argument applied to the result error state.
func (e errRune) FoldInt64F(a func(error) int64, f func(rune) int64) int64 {
	return a(e.left)
}

// MapInt8 with errRune receiver
// returns a newly built errRune with same error.
func (e errRune) MapInt8(f func(v rune) int8) ResultInt8 {
	return ErrInt8(e.left)
}
// FoldInt8 with errRune receiver
// returns its first argument.
func (e errRune) FoldInt8(a int8, f func(v rune) int8) int8 {
	return a
}
// FoldInt8F with errRune receiver
// returns the result of its first argument applied to the result error state.
func (e errRune) FoldInt8F(a func(error) int8, f func(rune) int8) int8 {
	return a(e.left)
}

// MapRune with errRune receiver
// returns a newly built errRune with same error.
func (e errRune) MapRune(f func(v rune) rune) ResultRune {
	return ErrRune(e.left)
}
// FoldRune with errRune receiver
// returns its first argument.
func (e errRune) FoldRune(a rune, f func(v rune) rune) rune {
	return a
}
// FoldRuneF with errRune receiver
// returns the result of its first argument applied to the result error state.
func (e errRune) FoldRuneF(a func(error) rune, f func(rune) rune) rune {
	return a(e.left)
}

// MapString with errRune receiver
// returns a newly built errRune with same error.
func (e errRune) MapString(f func(v rune) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errRune receiver
// returns its first argument.
func (e errRune) FoldString(a string, f func(v rune) string) string {
	return a
}
// FoldStringF with errRune receiver
// returns the result of its first argument applied to the result error state.
func (e errRune) FoldStringF(a func(error) string, f func(rune) string) string {
	return a(e.left)
}

// MapUInt with errRune receiver
// returns a newly built errRune with same error.
func (e errRune) MapUInt(f func(v rune) uint) ResultUInt {
	return ErrUInt(e.left)
}
// FoldUInt with errRune receiver
// returns its first argument.
func (e errRune) FoldUInt(a uint, f func(v rune) uint) uint {
	return a
}
// FoldUIntF with errRune receiver
// returns the result of its first argument applied to the result error state.
func (e errRune) FoldUIntF(a func(error) uint, f func(rune) uint) uint {
	return a(e.left)
}

// MapUInt16 with errRune receiver
// returns a newly built errRune with same error.
func (e errRune) MapUInt16(f func(v rune) uint16) ResultUInt16 {
	return ErrUInt16(e.left)
}
// FoldUInt16 with errRune receiver
// returns its first argument.
func (e errRune) FoldUInt16(a uint16, f func(v rune) uint16) uint16 {
	return a
}
// FoldUInt16F with errRune receiver
// returns the result of its first argument applied to the result error state.
func (e errRune) FoldUInt16F(a func(error) uint16, f func(rune) uint16) uint16 {
	return a(e.left)
}

// MapUInt32 with errRune receiver
// returns a newly built errRune with same error.
func (e errRune) MapUInt32(f func(v rune) uint32) ResultUInt32 {
	return ErrUInt32(e.left)
}
// FoldUInt32 with errRune receiver
// returns its first argument.
func (e errRune) FoldUInt32(a uint32, f func(v rune) uint32) uint32 {
	return a
}
// FoldUInt32F with errRune receiver
// returns the result of its first argument applied to the result error state.
func (e errRune) FoldUInt32F(a func(error) uint32, f func(rune) uint32) uint32 {
	return a(e.left)
}

// MapUInt64 with errRune receiver
// returns a newly built errRune with same error.
func (e errRune) MapUInt64(f func(v rune) uint64) ResultUInt64 {
	return ErrUInt64(e.left)
}
// FoldUInt64 with errRune receiver
// returns its first argument.
func (e errRune) FoldUInt64(a uint64, f func(v rune) uint64) uint64 {
	return a
}
// FoldUInt64F with errRune receiver
// returns the result of its first argument applied to the result error state.
func (e errRune) FoldUInt64F(a func(error) uint64, f func(rune) uint64) uint64 {
	return a(e.left)
}

// MapUInt8 with errRune receiver
// returns a newly built errRune with same error.
func (e errRune) MapUInt8(f func(v rune) uint8) ResultUInt8 {
	return ErrUInt8(e.left)
}
// FoldUInt8 with errRune receiver
// returns its first argument.
func (e errRune) FoldUInt8(a uint8, f func(v rune) uint8) uint8 {
	return a
}
// FoldUInt8F with errRune receiver
// returns the result of its first argument applied to the result error state.
func (e errRune) FoldUInt8F(a func(error) uint8, f func(rune) uint8) uint8 {
	return a(e.left)
}

// MapUintPtr with errRune receiver
// returns a newly built errRune with same error.
func (e errRune) MapUintPtr(f func(v rune) uintptr) ResultUintPtr {
	return ErrUintPtr(e.left)
}
// FoldUintPtr with errRune receiver
// returns its first argument.
func (e errRune) FoldUintPtr(a uintptr, f func(v rune) uintptr) uintptr {
	return a
}
// FoldUintPtrF with errRune receiver
// returns the result of its first argument applied to the result error state.
func (e errRune) FoldUintPtrF(a func(error) uintptr, f func(rune) uintptr) uintptr {
	return a(e.left)
}
 // end of nones

// okRune implements ResultRune for a successful result
type okRune struct {
	right rune
}

// OkRune returns a successful result with value v of type rune 
func OkRune(v rune) okRune {
	return okRune{v}
}
// MapRune with okRune receiver
// applies its function argument on hold value 
func (s okRune) Map(f func(rune)) { f(s.right) }

// FoldFRune with okRune receiver
// applies its second function argument on hold value 
func (s okRune) FoldF(l func(error), r func(rune)) { r(s.right) }


// MapBool on okRune receiver
// applies its function arguments on hold value and returns an okBool
func (s okRune) MapBool(f func(rune) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldBool(a bool, f func(rune) bool) bool {
	return f(s.right)
}

// FoldBoolF on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldBoolF(a func(error) bool, f func(rune) bool) bool {
	return f(s.right)
}

// MapByte on okRune receiver
// applies its function arguments on hold value and returns an okByte
func (s okRune) MapByte(f func(rune) byte) ResultByte {
	return OkByte(f(s.right))
}

// FoldByte on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldByte(a byte, f func(rune) byte) byte {
	return f(s.right)
}

// FoldByteF on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldByteF(a func(error) byte, f func(rune) byte) byte {
	return f(s.right)
}

// MapComplex128 on okRune receiver
// applies its function arguments on hold value and returns an okComplex128
func (s okRune) MapComplex128(f func(rune) complex128) ResultComplex128 {
	return OkComplex128(f(s.right))
}

// FoldComplex128 on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldComplex128(a complex128, f func(rune) complex128) complex128 {
	return f(s.right)
}

// FoldComplex128F on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldComplex128F(a func(error) complex128, f func(rune) complex128) complex128 {
	return f(s.right)
}

// MapComplex64 on okRune receiver
// applies its function arguments on hold value and returns an okComplex64
func (s okRune) MapComplex64(f func(rune) complex64) ResultComplex64 {
	return OkComplex64(f(s.right))
}

// FoldComplex64 on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldComplex64(a complex64, f func(rune) complex64) complex64 {
	return f(s.right)
}

// FoldComplex64F on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldComplex64F(a func(error) complex64, f func(rune) complex64) complex64 {
	return f(s.right)
}

// MapFloat32 on okRune receiver
// applies its function arguments on hold value and returns an okFloat32
func (s okRune) MapFloat32(f func(rune) float32) ResultFloat32 {
	return OkFloat32(f(s.right))
}

// FoldFloat32 on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldFloat32(a float32, f func(rune) float32) float32 {
	return f(s.right)
}

// FoldFloat32F on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldFloat32F(a func(error) float32, f func(rune) float32) float32 {
	return f(s.right)
}

// MapFloat64 on okRune receiver
// applies its function arguments on hold value and returns an okFloat64
func (s okRune) MapFloat64(f func(rune) float64) ResultFloat64 {
	return OkFloat64(f(s.right))
}

// FoldFloat64 on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldFloat64(a float64, f func(rune) float64) float64 {
	return f(s.right)
}

// FoldFloat64F on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldFloat64F(a func(error) float64, f func(rune) float64) float64 {
	return f(s.right)
}

// MapInt on okRune receiver
// applies its function arguments on hold value and returns an okInt
func (s okRune) MapInt(f func(rune) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldInt(a int, f func(rune) int) int {
	return f(s.right)
}

// FoldIntF on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldIntF(a func(error) int, f func(rune) int) int {
	return f(s.right)
}

// MapInt16 on okRune receiver
// applies its function arguments on hold value and returns an okInt16
func (s okRune) MapInt16(f func(rune) int16) ResultInt16 {
	return OkInt16(f(s.right))
}

// FoldInt16 on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldInt16(a int16, f func(rune) int16) int16 {
	return f(s.right)
}

// FoldInt16F on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldInt16F(a func(error) int16, f func(rune) int16) int16 {
	return f(s.right)
}

// MapInt32 on okRune receiver
// applies its function arguments on hold value and returns an okInt32
func (s okRune) MapInt32(f func(rune) int32) ResultInt32 {
	return OkInt32(f(s.right))
}

// FoldInt32 on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldInt32(a int32, f func(rune) int32) int32 {
	return f(s.right)
}

// FoldInt32F on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldInt32F(a func(error) int32, f func(rune) int32) int32 {
	return f(s.right)
}

// MapInt64 on okRune receiver
// applies its function arguments on hold value and returns an okInt64
func (s okRune) MapInt64(f func(rune) int64) ResultInt64 {
	return OkInt64(f(s.right))
}

// FoldInt64 on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldInt64(a int64, f func(rune) int64) int64 {
	return f(s.right)
}

// FoldInt64F on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldInt64F(a func(error) int64, f func(rune) int64) int64 {
	return f(s.right)
}

// MapInt8 on okRune receiver
// applies its function arguments on hold value and returns an okInt8
func (s okRune) MapInt8(f func(rune) int8) ResultInt8 {
	return OkInt8(f(s.right))
}

// FoldInt8 on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldInt8(a int8, f func(rune) int8) int8 {
	return f(s.right)
}

// FoldInt8F on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldInt8F(a func(error) int8, f func(rune) int8) int8 {
	return f(s.right)
}

// MapRune on okRune receiver
// applies its function arguments on hold value and returns an okRune
func (s okRune) MapRune(f func(rune) rune) ResultRune {
	return OkRune(f(s.right))
}

// FoldRune on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldRune(a rune, f func(rune) rune) rune {
	return f(s.right)
}

// FoldRuneF on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldRuneF(a func(error) rune, f func(rune) rune) rune {
	return f(s.right)
}

// MapString on okRune receiver
// applies its function arguments on hold value and returns an okString
func (s okRune) MapString(f func(rune) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldString(a string, f func(rune) string) string {
	return f(s.right)
}

// FoldStringF on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldStringF(a func(error) string, f func(rune) string) string {
	return f(s.right)
}

// MapUInt on okRune receiver
// applies its function arguments on hold value and returns an okUInt
func (s okRune) MapUInt(f func(rune) uint) ResultUInt {
	return OkUInt(f(s.right))
}

// FoldUInt on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldUInt(a uint, f func(rune) uint) uint {
	return f(s.right)
}

// FoldUIntF on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldUIntF(a func(error) uint, f func(rune) uint) uint {
	return f(s.right)
}

// MapUInt16 on okRune receiver
// applies its function arguments on hold value and returns an okUInt16
func (s okRune) MapUInt16(f func(rune) uint16) ResultUInt16 {
	return OkUInt16(f(s.right))
}

// FoldUInt16 on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldUInt16(a uint16, f func(rune) uint16) uint16 {
	return f(s.right)
}

// FoldUInt16F on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldUInt16F(a func(error) uint16, f func(rune) uint16) uint16 {
	return f(s.right)
}

// MapUInt32 on okRune receiver
// applies its function arguments on hold value and returns an okUInt32
func (s okRune) MapUInt32(f func(rune) uint32) ResultUInt32 {
	return OkUInt32(f(s.right))
}

// FoldUInt32 on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldUInt32(a uint32, f func(rune) uint32) uint32 {
	return f(s.right)
}

// FoldUInt32F on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldUInt32F(a func(error) uint32, f func(rune) uint32) uint32 {
	return f(s.right)
}

// MapUInt64 on okRune receiver
// applies its function arguments on hold value and returns an okUInt64
func (s okRune) MapUInt64(f func(rune) uint64) ResultUInt64 {
	return OkUInt64(f(s.right))
}

// FoldUInt64 on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldUInt64(a uint64, f func(rune) uint64) uint64 {
	return f(s.right)
}

// FoldUInt64F on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldUInt64F(a func(error) uint64, f func(rune) uint64) uint64 {
	return f(s.right)
}

// MapUInt8 on okRune receiver
// applies its function arguments on hold value and returns an okUInt8
func (s okRune) MapUInt8(f func(rune) uint8) ResultUInt8 {
	return OkUInt8(f(s.right))
}

// FoldUInt8 on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldUInt8(a uint8, f func(rune) uint8) uint8 {
	return f(s.right)
}

// FoldUInt8F on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldUInt8F(a func(error) uint8, f func(rune) uint8) uint8 {
	return f(s.right)
}

// MapUintPtr on okRune receiver
// applies its function arguments on hold value and returns an okUintPtr
func (s okRune) MapUintPtr(f func(rune) uintptr) ResultUintPtr {
	return OkUintPtr(f(s.right))
}

// FoldUintPtr on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldUintPtr(a uintptr, f func(rune) uintptr) uintptr {
	return f(s.right)
}

// FoldUintPtrF on okRune receiver
// applies its second function arguments on hold value and returns an rune
func (s okRune) FoldUintPtrF(a func(error) uintptr, f func(rune) uintptr) uintptr {
	return f(s.right)
}
 // end of oks



// errString implements ResultString for a failed result
type errString struct{
	left error
}

// ErrString(error  | string) makes a new errString
// from an error or a string.
func ErrString(err interface{}) errString {
	switch err.(type) {
		case string : return errString{errors.New(err.(string))}
		case error : return errString{err.(error)}
	} 
	return errString{errors.New("ErrString called with something else than string or error")}
}

// Map with errString receiver is a noop
func (e errString) Map(f func(string)) {}

// FoldF with errString applies it's first argument
// function on its error state
func (e errString) FoldF(l func(e error), r func(string)) { l(e.left) }


// MapBool with errString receiver
// returns a newly built errString with same error.
func (e errString) MapBool(f func(v string) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errString receiver
// returns its first argument.
func (e errString) FoldBool(a bool, f func(v string) bool) bool {
	return a
}
// FoldBoolF with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldBoolF(a func(error) bool, f func(string) bool) bool {
	return a(e.left)
}

// MapByte with errString receiver
// returns a newly built errString with same error.
func (e errString) MapByte(f func(v string) byte) ResultByte {
	return ErrByte(e.left)
}
// FoldByte with errString receiver
// returns its first argument.
func (e errString) FoldByte(a byte, f func(v string) byte) byte {
	return a
}
// FoldByteF with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldByteF(a func(error) byte, f func(string) byte) byte {
	return a(e.left)
}

// MapComplex128 with errString receiver
// returns a newly built errString with same error.
func (e errString) MapComplex128(f func(v string) complex128) ResultComplex128 {
	return ErrComplex128(e.left)
}
// FoldComplex128 with errString receiver
// returns its first argument.
func (e errString) FoldComplex128(a complex128, f func(v string) complex128) complex128 {
	return a
}
// FoldComplex128F with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldComplex128F(a func(error) complex128, f func(string) complex128) complex128 {
	return a(e.left)
}

// MapComplex64 with errString receiver
// returns a newly built errString with same error.
func (e errString) MapComplex64(f func(v string) complex64) ResultComplex64 {
	return ErrComplex64(e.left)
}
// FoldComplex64 with errString receiver
// returns its first argument.
func (e errString) FoldComplex64(a complex64, f func(v string) complex64) complex64 {
	return a
}
// FoldComplex64F with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldComplex64F(a func(error) complex64, f func(string) complex64) complex64 {
	return a(e.left)
}

// MapFloat32 with errString receiver
// returns a newly built errString with same error.
func (e errString) MapFloat32(f func(v string) float32) ResultFloat32 {
	return ErrFloat32(e.left)
}
// FoldFloat32 with errString receiver
// returns its first argument.
func (e errString) FoldFloat32(a float32, f func(v string) float32) float32 {
	return a
}
// FoldFloat32F with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldFloat32F(a func(error) float32, f func(string) float32) float32 {
	return a(e.left)
}

// MapFloat64 with errString receiver
// returns a newly built errString with same error.
func (e errString) MapFloat64(f func(v string) float64) ResultFloat64 {
	return ErrFloat64(e.left)
}
// FoldFloat64 with errString receiver
// returns its first argument.
func (e errString) FoldFloat64(a float64, f func(v string) float64) float64 {
	return a
}
// FoldFloat64F with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldFloat64F(a func(error) float64, f func(string) float64) float64 {
	return a(e.left)
}

// MapInt with errString receiver
// returns a newly built errString with same error.
func (e errString) MapInt(f func(v string) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errString receiver
// returns its first argument.
func (e errString) FoldInt(a int, f func(v string) int) int {
	return a
}
// FoldIntF with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldIntF(a func(error) int, f func(string) int) int {
	return a(e.left)
}

// MapInt16 with errString receiver
// returns a newly built errString with same error.
func (e errString) MapInt16(f func(v string) int16) ResultInt16 {
	return ErrInt16(e.left)
}
// FoldInt16 with errString receiver
// returns its first argument.
func (e errString) FoldInt16(a int16, f func(v string) int16) int16 {
	return a
}
// FoldInt16F with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldInt16F(a func(error) int16, f func(string) int16) int16 {
	return a(e.left)
}

// MapInt32 with errString receiver
// returns a newly built errString with same error.
func (e errString) MapInt32(f func(v string) int32) ResultInt32 {
	return ErrInt32(e.left)
}
// FoldInt32 with errString receiver
// returns its first argument.
func (e errString) FoldInt32(a int32, f func(v string) int32) int32 {
	return a
}
// FoldInt32F with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldInt32F(a func(error) int32, f func(string) int32) int32 {
	return a(e.left)
}

// MapInt64 with errString receiver
// returns a newly built errString with same error.
func (e errString) MapInt64(f func(v string) int64) ResultInt64 {
	return ErrInt64(e.left)
}
// FoldInt64 with errString receiver
// returns its first argument.
func (e errString) FoldInt64(a int64, f func(v string) int64) int64 {
	return a
}
// FoldInt64F with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldInt64F(a func(error) int64, f func(string) int64) int64 {
	return a(e.left)
}

// MapInt8 with errString receiver
// returns a newly built errString with same error.
func (e errString) MapInt8(f func(v string) int8) ResultInt8 {
	return ErrInt8(e.left)
}
// FoldInt8 with errString receiver
// returns its first argument.
func (e errString) FoldInt8(a int8, f func(v string) int8) int8 {
	return a
}
// FoldInt8F with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldInt8F(a func(error) int8, f func(string) int8) int8 {
	return a(e.left)
}

// MapRune with errString receiver
// returns a newly built errString with same error.
func (e errString) MapRune(f func(v string) rune) ResultRune {
	return ErrRune(e.left)
}
// FoldRune with errString receiver
// returns its first argument.
func (e errString) FoldRune(a rune, f func(v string) rune) rune {
	return a
}
// FoldRuneF with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldRuneF(a func(error) rune, f func(string) rune) rune {
	return a(e.left)
}

// MapString with errString receiver
// returns a newly built errString with same error.
func (e errString) MapString(f func(v string) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errString receiver
// returns its first argument.
func (e errString) FoldString(a string, f func(v string) string) string {
	return a
}
// FoldStringF with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldStringF(a func(error) string, f func(string) string) string {
	return a(e.left)
}

// MapUInt with errString receiver
// returns a newly built errString with same error.
func (e errString) MapUInt(f func(v string) uint) ResultUInt {
	return ErrUInt(e.left)
}
// FoldUInt with errString receiver
// returns its first argument.
func (e errString) FoldUInt(a uint, f func(v string) uint) uint {
	return a
}
// FoldUIntF with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldUIntF(a func(error) uint, f func(string) uint) uint {
	return a(e.left)
}

// MapUInt16 with errString receiver
// returns a newly built errString with same error.
func (e errString) MapUInt16(f func(v string) uint16) ResultUInt16 {
	return ErrUInt16(e.left)
}
// FoldUInt16 with errString receiver
// returns its first argument.
func (e errString) FoldUInt16(a uint16, f func(v string) uint16) uint16 {
	return a
}
// FoldUInt16F with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldUInt16F(a func(error) uint16, f func(string) uint16) uint16 {
	return a(e.left)
}

// MapUInt32 with errString receiver
// returns a newly built errString with same error.
func (e errString) MapUInt32(f func(v string) uint32) ResultUInt32 {
	return ErrUInt32(e.left)
}
// FoldUInt32 with errString receiver
// returns its first argument.
func (e errString) FoldUInt32(a uint32, f func(v string) uint32) uint32 {
	return a
}
// FoldUInt32F with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldUInt32F(a func(error) uint32, f func(string) uint32) uint32 {
	return a(e.left)
}

// MapUInt64 with errString receiver
// returns a newly built errString with same error.
func (e errString) MapUInt64(f func(v string) uint64) ResultUInt64 {
	return ErrUInt64(e.left)
}
// FoldUInt64 with errString receiver
// returns its first argument.
func (e errString) FoldUInt64(a uint64, f func(v string) uint64) uint64 {
	return a
}
// FoldUInt64F with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldUInt64F(a func(error) uint64, f func(string) uint64) uint64 {
	return a(e.left)
}

// MapUInt8 with errString receiver
// returns a newly built errString with same error.
func (e errString) MapUInt8(f func(v string) uint8) ResultUInt8 {
	return ErrUInt8(e.left)
}
// FoldUInt8 with errString receiver
// returns its first argument.
func (e errString) FoldUInt8(a uint8, f func(v string) uint8) uint8 {
	return a
}
// FoldUInt8F with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldUInt8F(a func(error) uint8, f func(string) uint8) uint8 {
	return a(e.left)
}

// MapUintPtr with errString receiver
// returns a newly built errString with same error.
func (e errString) MapUintPtr(f func(v string) uintptr) ResultUintPtr {
	return ErrUintPtr(e.left)
}
// FoldUintPtr with errString receiver
// returns its first argument.
func (e errString) FoldUintPtr(a uintptr, f func(v string) uintptr) uintptr {
	return a
}
// FoldUintPtrF with errString receiver
// returns the result of its first argument applied to the result error state.
func (e errString) FoldUintPtrF(a func(error) uintptr, f func(string) uintptr) uintptr {
	return a(e.left)
}
 // end of nones

// okString implements ResultString for a successful result
type okString struct {
	right string
}

// OkString returns a successful result with value v of type string 
func OkString(v string) okString {
	return okString{v}
}
// MapString with okString receiver
// applies its function argument on hold value 
func (s okString) Map(f func(string)) { f(s.right) }

// FoldFString with okString receiver
// applies its second function argument on hold value 
func (s okString) FoldF(l func(error), r func(string)) { r(s.right) }


// MapBool on okString receiver
// applies its function arguments on hold value and returns an okBool
func (s okString) MapBool(f func(string) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldBool(a bool, f func(string) bool) bool {
	return f(s.right)
}

// FoldBoolF on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldBoolF(a func(error) bool, f func(string) bool) bool {
	return f(s.right)
}

// MapByte on okString receiver
// applies its function arguments on hold value and returns an okByte
func (s okString) MapByte(f func(string) byte) ResultByte {
	return OkByte(f(s.right))
}

// FoldByte on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldByte(a byte, f func(string) byte) byte {
	return f(s.right)
}

// FoldByteF on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldByteF(a func(error) byte, f func(string) byte) byte {
	return f(s.right)
}

// MapComplex128 on okString receiver
// applies its function arguments on hold value and returns an okComplex128
func (s okString) MapComplex128(f func(string) complex128) ResultComplex128 {
	return OkComplex128(f(s.right))
}

// FoldComplex128 on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldComplex128(a complex128, f func(string) complex128) complex128 {
	return f(s.right)
}

// FoldComplex128F on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldComplex128F(a func(error) complex128, f func(string) complex128) complex128 {
	return f(s.right)
}

// MapComplex64 on okString receiver
// applies its function arguments on hold value and returns an okComplex64
func (s okString) MapComplex64(f func(string) complex64) ResultComplex64 {
	return OkComplex64(f(s.right))
}

// FoldComplex64 on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldComplex64(a complex64, f func(string) complex64) complex64 {
	return f(s.right)
}

// FoldComplex64F on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldComplex64F(a func(error) complex64, f func(string) complex64) complex64 {
	return f(s.right)
}

// MapFloat32 on okString receiver
// applies its function arguments on hold value and returns an okFloat32
func (s okString) MapFloat32(f func(string) float32) ResultFloat32 {
	return OkFloat32(f(s.right))
}

// FoldFloat32 on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldFloat32(a float32, f func(string) float32) float32 {
	return f(s.right)
}

// FoldFloat32F on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldFloat32F(a func(error) float32, f func(string) float32) float32 {
	return f(s.right)
}

// MapFloat64 on okString receiver
// applies its function arguments on hold value and returns an okFloat64
func (s okString) MapFloat64(f func(string) float64) ResultFloat64 {
	return OkFloat64(f(s.right))
}

// FoldFloat64 on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldFloat64(a float64, f func(string) float64) float64 {
	return f(s.right)
}

// FoldFloat64F on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldFloat64F(a func(error) float64, f func(string) float64) float64 {
	return f(s.right)
}

// MapInt on okString receiver
// applies its function arguments on hold value and returns an okInt
func (s okString) MapInt(f func(string) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldInt(a int, f func(string) int) int {
	return f(s.right)
}

// FoldIntF on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldIntF(a func(error) int, f func(string) int) int {
	return f(s.right)
}

// MapInt16 on okString receiver
// applies its function arguments on hold value and returns an okInt16
func (s okString) MapInt16(f func(string) int16) ResultInt16 {
	return OkInt16(f(s.right))
}

// FoldInt16 on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldInt16(a int16, f func(string) int16) int16 {
	return f(s.right)
}

// FoldInt16F on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldInt16F(a func(error) int16, f func(string) int16) int16 {
	return f(s.right)
}

// MapInt32 on okString receiver
// applies its function arguments on hold value and returns an okInt32
func (s okString) MapInt32(f func(string) int32) ResultInt32 {
	return OkInt32(f(s.right))
}

// FoldInt32 on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldInt32(a int32, f func(string) int32) int32 {
	return f(s.right)
}

// FoldInt32F on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldInt32F(a func(error) int32, f func(string) int32) int32 {
	return f(s.right)
}

// MapInt64 on okString receiver
// applies its function arguments on hold value and returns an okInt64
func (s okString) MapInt64(f func(string) int64) ResultInt64 {
	return OkInt64(f(s.right))
}

// FoldInt64 on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldInt64(a int64, f func(string) int64) int64 {
	return f(s.right)
}

// FoldInt64F on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldInt64F(a func(error) int64, f func(string) int64) int64 {
	return f(s.right)
}

// MapInt8 on okString receiver
// applies its function arguments on hold value and returns an okInt8
func (s okString) MapInt8(f func(string) int8) ResultInt8 {
	return OkInt8(f(s.right))
}

// FoldInt8 on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldInt8(a int8, f func(string) int8) int8 {
	return f(s.right)
}

// FoldInt8F on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldInt8F(a func(error) int8, f func(string) int8) int8 {
	return f(s.right)
}

// MapRune on okString receiver
// applies its function arguments on hold value and returns an okRune
func (s okString) MapRune(f func(string) rune) ResultRune {
	return OkRune(f(s.right))
}

// FoldRune on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldRune(a rune, f func(string) rune) rune {
	return f(s.right)
}

// FoldRuneF on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldRuneF(a func(error) rune, f func(string) rune) rune {
	return f(s.right)
}

// MapString on okString receiver
// applies its function arguments on hold value and returns an okString
func (s okString) MapString(f func(string) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldString(a string, f func(string) string) string {
	return f(s.right)
}

// FoldStringF on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldStringF(a func(error) string, f func(string) string) string {
	return f(s.right)
}

// MapUInt on okString receiver
// applies its function arguments on hold value and returns an okUInt
func (s okString) MapUInt(f func(string) uint) ResultUInt {
	return OkUInt(f(s.right))
}

// FoldUInt on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldUInt(a uint, f func(string) uint) uint {
	return f(s.right)
}

// FoldUIntF on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldUIntF(a func(error) uint, f func(string) uint) uint {
	return f(s.right)
}

// MapUInt16 on okString receiver
// applies its function arguments on hold value and returns an okUInt16
func (s okString) MapUInt16(f func(string) uint16) ResultUInt16 {
	return OkUInt16(f(s.right))
}

// FoldUInt16 on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldUInt16(a uint16, f func(string) uint16) uint16 {
	return f(s.right)
}

// FoldUInt16F on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldUInt16F(a func(error) uint16, f func(string) uint16) uint16 {
	return f(s.right)
}

// MapUInt32 on okString receiver
// applies its function arguments on hold value and returns an okUInt32
func (s okString) MapUInt32(f func(string) uint32) ResultUInt32 {
	return OkUInt32(f(s.right))
}

// FoldUInt32 on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldUInt32(a uint32, f func(string) uint32) uint32 {
	return f(s.right)
}

// FoldUInt32F on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldUInt32F(a func(error) uint32, f func(string) uint32) uint32 {
	return f(s.right)
}

// MapUInt64 on okString receiver
// applies its function arguments on hold value and returns an okUInt64
func (s okString) MapUInt64(f func(string) uint64) ResultUInt64 {
	return OkUInt64(f(s.right))
}

// FoldUInt64 on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldUInt64(a uint64, f func(string) uint64) uint64 {
	return f(s.right)
}

// FoldUInt64F on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldUInt64F(a func(error) uint64, f func(string) uint64) uint64 {
	return f(s.right)
}

// MapUInt8 on okString receiver
// applies its function arguments on hold value and returns an okUInt8
func (s okString) MapUInt8(f func(string) uint8) ResultUInt8 {
	return OkUInt8(f(s.right))
}

// FoldUInt8 on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldUInt8(a uint8, f func(string) uint8) uint8 {
	return f(s.right)
}

// FoldUInt8F on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldUInt8F(a func(error) uint8, f func(string) uint8) uint8 {
	return f(s.right)
}

// MapUintPtr on okString receiver
// applies its function arguments on hold value and returns an okUintPtr
func (s okString) MapUintPtr(f func(string) uintptr) ResultUintPtr {
	return OkUintPtr(f(s.right))
}

// FoldUintPtr on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldUintPtr(a uintptr, f func(string) uintptr) uintptr {
	return f(s.right)
}

// FoldUintPtrF on okString receiver
// applies its second function arguments on hold value and returns an string
func (s okString) FoldUintPtrF(a func(error) uintptr, f func(string) uintptr) uintptr {
	return f(s.right)
}
 // end of oks



// errUInt implements ResultUInt for a failed result
type errUInt struct{
	left error
}

// ErrUInt(error  | string) makes a new errUInt
// from an error or a string.
func ErrUInt(err interface{}) errUInt {
	switch err.(type) {
		case string : return errUInt{errors.New(err.(string))}
		case error : return errUInt{err.(error)}
	} 
	return errUInt{errors.New("ErrUInt called with something else than string or error")}
}

// Map with errUInt receiver is a noop
func (e errUInt) Map(f func(uint)) {}

// FoldF with errUInt applies it's first argument
// function on its error state
func (e errUInt) FoldF(l func(e error), r func(uint)) { l(e.left) }


// MapBool with errUInt receiver
// returns a newly built errUInt with same error.
func (e errUInt) MapBool(f func(v uint) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errUInt receiver
// returns its first argument.
func (e errUInt) FoldBool(a bool, f func(v uint) bool) bool {
	return a
}
// FoldBoolF with errUInt receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt) FoldBoolF(a func(error) bool, f func(uint) bool) bool {
	return a(e.left)
}

// MapByte with errUInt receiver
// returns a newly built errUInt with same error.
func (e errUInt) MapByte(f func(v uint) byte) ResultByte {
	return ErrByte(e.left)
}
// FoldByte with errUInt receiver
// returns its first argument.
func (e errUInt) FoldByte(a byte, f func(v uint) byte) byte {
	return a
}
// FoldByteF with errUInt receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt) FoldByteF(a func(error) byte, f func(uint) byte) byte {
	return a(e.left)
}

// MapComplex128 with errUInt receiver
// returns a newly built errUInt with same error.
func (e errUInt) MapComplex128(f func(v uint) complex128) ResultComplex128 {
	return ErrComplex128(e.left)
}
// FoldComplex128 with errUInt receiver
// returns its first argument.
func (e errUInt) FoldComplex128(a complex128, f func(v uint) complex128) complex128 {
	return a
}
// FoldComplex128F with errUInt receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt) FoldComplex128F(a func(error) complex128, f func(uint) complex128) complex128 {
	return a(e.left)
}

// MapComplex64 with errUInt receiver
// returns a newly built errUInt with same error.
func (e errUInt) MapComplex64(f func(v uint) complex64) ResultComplex64 {
	return ErrComplex64(e.left)
}
// FoldComplex64 with errUInt receiver
// returns its first argument.
func (e errUInt) FoldComplex64(a complex64, f func(v uint) complex64) complex64 {
	return a
}
// FoldComplex64F with errUInt receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt) FoldComplex64F(a func(error) complex64, f func(uint) complex64) complex64 {
	return a(e.left)
}

// MapFloat32 with errUInt receiver
// returns a newly built errUInt with same error.
func (e errUInt) MapFloat32(f func(v uint) float32) ResultFloat32 {
	return ErrFloat32(e.left)
}
// FoldFloat32 with errUInt receiver
// returns its first argument.
func (e errUInt) FoldFloat32(a float32, f func(v uint) float32) float32 {
	return a
}
// FoldFloat32F with errUInt receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt) FoldFloat32F(a func(error) float32, f func(uint) float32) float32 {
	return a(e.left)
}

// MapFloat64 with errUInt receiver
// returns a newly built errUInt with same error.
func (e errUInt) MapFloat64(f func(v uint) float64) ResultFloat64 {
	return ErrFloat64(e.left)
}
// FoldFloat64 with errUInt receiver
// returns its first argument.
func (e errUInt) FoldFloat64(a float64, f func(v uint) float64) float64 {
	return a
}
// FoldFloat64F with errUInt receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt) FoldFloat64F(a func(error) float64, f func(uint) float64) float64 {
	return a(e.left)
}

// MapInt with errUInt receiver
// returns a newly built errUInt with same error.
func (e errUInt) MapInt(f func(v uint) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errUInt receiver
// returns its first argument.
func (e errUInt) FoldInt(a int, f func(v uint) int) int {
	return a
}
// FoldIntF with errUInt receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt) FoldIntF(a func(error) int, f func(uint) int) int {
	return a(e.left)
}

// MapInt16 with errUInt receiver
// returns a newly built errUInt with same error.
func (e errUInt) MapInt16(f func(v uint) int16) ResultInt16 {
	return ErrInt16(e.left)
}
// FoldInt16 with errUInt receiver
// returns its first argument.
func (e errUInt) FoldInt16(a int16, f func(v uint) int16) int16 {
	return a
}
// FoldInt16F with errUInt receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt) FoldInt16F(a func(error) int16, f func(uint) int16) int16 {
	return a(e.left)
}

// MapInt32 with errUInt receiver
// returns a newly built errUInt with same error.
func (e errUInt) MapInt32(f func(v uint) int32) ResultInt32 {
	return ErrInt32(e.left)
}
// FoldInt32 with errUInt receiver
// returns its first argument.
func (e errUInt) FoldInt32(a int32, f func(v uint) int32) int32 {
	return a
}
// FoldInt32F with errUInt receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt) FoldInt32F(a func(error) int32, f func(uint) int32) int32 {
	return a(e.left)
}

// MapInt64 with errUInt receiver
// returns a newly built errUInt with same error.
func (e errUInt) MapInt64(f func(v uint) int64) ResultInt64 {
	return ErrInt64(e.left)
}
// FoldInt64 with errUInt receiver
// returns its first argument.
func (e errUInt) FoldInt64(a int64, f func(v uint) int64) int64 {
	return a
}
// FoldInt64F with errUInt receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt) FoldInt64F(a func(error) int64, f func(uint) int64) int64 {
	return a(e.left)
}

// MapInt8 with errUInt receiver
// returns a newly built errUInt with same error.
func (e errUInt) MapInt8(f func(v uint) int8) ResultInt8 {
	return ErrInt8(e.left)
}
// FoldInt8 with errUInt receiver
// returns its first argument.
func (e errUInt) FoldInt8(a int8, f func(v uint) int8) int8 {
	return a
}
// FoldInt8F with errUInt receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt) FoldInt8F(a func(error) int8, f func(uint) int8) int8 {
	return a(e.left)
}

// MapRune with errUInt receiver
// returns a newly built errUInt with same error.
func (e errUInt) MapRune(f func(v uint) rune) ResultRune {
	return ErrRune(e.left)
}
// FoldRune with errUInt receiver
// returns its first argument.
func (e errUInt) FoldRune(a rune, f func(v uint) rune) rune {
	return a
}
// FoldRuneF with errUInt receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt) FoldRuneF(a func(error) rune, f func(uint) rune) rune {
	return a(e.left)
}

// MapString with errUInt receiver
// returns a newly built errUInt with same error.
func (e errUInt) MapString(f func(v uint) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errUInt receiver
// returns its first argument.
func (e errUInt) FoldString(a string, f func(v uint) string) string {
	return a
}
// FoldStringF with errUInt receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt) FoldStringF(a func(error) string, f func(uint) string) string {
	return a(e.left)
}

// MapUInt with errUInt receiver
// returns a newly built errUInt with same error.
func (e errUInt) MapUInt(f func(v uint) uint) ResultUInt {
	return ErrUInt(e.left)
}
// FoldUInt with errUInt receiver
// returns its first argument.
func (e errUInt) FoldUInt(a uint, f func(v uint) uint) uint {
	return a
}
// FoldUIntF with errUInt receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt) FoldUIntF(a func(error) uint, f func(uint) uint) uint {
	return a(e.left)
}

// MapUInt16 with errUInt receiver
// returns a newly built errUInt with same error.
func (e errUInt) MapUInt16(f func(v uint) uint16) ResultUInt16 {
	return ErrUInt16(e.left)
}
// FoldUInt16 with errUInt receiver
// returns its first argument.
func (e errUInt) FoldUInt16(a uint16, f func(v uint) uint16) uint16 {
	return a
}
// FoldUInt16F with errUInt receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt) FoldUInt16F(a func(error) uint16, f func(uint) uint16) uint16 {
	return a(e.left)
}

// MapUInt32 with errUInt receiver
// returns a newly built errUInt with same error.
func (e errUInt) MapUInt32(f func(v uint) uint32) ResultUInt32 {
	return ErrUInt32(e.left)
}
// FoldUInt32 with errUInt receiver
// returns its first argument.
func (e errUInt) FoldUInt32(a uint32, f func(v uint) uint32) uint32 {
	return a
}
// FoldUInt32F with errUInt receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt) FoldUInt32F(a func(error) uint32, f func(uint) uint32) uint32 {
	return a(e.left)
}

// MapUInt64 with errUInt receiver
// returns a newly built errUInt with same error.
func (e errUInt) MapUInt64(f func(v uint) uint64) ResultUInt64 {
	return ErrUInt64(e.left)
}
// FoldUInt64 with errUInt receiver
// returns its first argument.
func (e errUInt) FoldUInt64(a uint64, f func(v uint) uint64) uint64 {
	return a
}
// FoldUInt64F with errUInt receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt) FoldUInt64F(a func(error) uint64, f func(uint) uint64) uint64 {
	return a(e.left)
}

// MapUInt8 with errUInt receiver
// returns a newly built errUInt with same error.
func (e errUInt) MapUInt8(f func(v uint) uint8) ResultUInt8 {
	return ErrUInt8(e.left)
}
// FoldUInt8 with errUInt receiver
// returns its first argument.
func (e errUInt) FoldUInt8(a uint8, f func(v uint) uint8) uint8 {
	return a
}
// FoldUInt8F with errUInt receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt) FoldUInt8F(a func(error) uint8, f func(uint) uint8) uint8 {
	return a(e.left)
}

// MapUintPtr with errUInt receiver
// returns a newly built errUInt with same error.
func (e errUInt) MapUintPtr(f func(v uint) uintptr) ResultUintPtr {
	return ErrUintPtr(e.left)
}
// FoldUintPtr with errUInt receiver
// returns its first argument.
func (e errUInt) FoldUintPtr(a uintptr, f func(v uint) uintptr) uintptr {
	return a
}
// FoldUintPtrF with errUInt receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt) FoldUintPtrF(a func(error) uintptr, f func(uint) uintptr) uintptr {
	return a(e.left)
}
 // end of nones

// okUInt implements ResultUInt for a successful result
type okUInt struct {
	right uint
}

// OkUInt returns a successful result with value v of type uint 
func OkUInt(v uint) okUInt {
	return okUInt{v}
}
// MapUInt with okUInt receiver
// applies its function argument on hold value 
func (s okUInt) Map(f func(uint)) { f(s.right) }

// FoldFUInt with okUInt receiver
// applies its second function argument on hold value 
func (s okUInt) FoldF(l func(error), r func(uint)) { r(s.right) }


// MapBool on okUInt receiver
// applies its function arguments on hold value and returns an okBool
func (s okUInt) MapBool(f func(uint) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldBool(a bool, f func(uint) bool) bool {
	return f(s.right)
}

// FoldBoolF on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldBoolF(a func(error) bool, f func(uint) bool) bool {
	return f(s.right)
}

// MapByte on okUInt receiver
// applies its function arguments on hold value and returns an okByte
func (s okUInt) MapByte(f func(uint) byte) ResultByte {
	return OkByte(f(s.right))
}

// FoldByte on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldByte(a byte, f func(uint) byte) byte {
	return f(s.right)
}

// FoldByteF on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldByteF(a func(error) byte, f func(uint) byte) byte {
	return f(s.right)
}

// MapComplex128 on okUInt receiver
// applies its function arguments on hold value and returns an okComplex128
func (s okUInt) MapComplex128(f func(uint) complex128) ResultComplex128 {
	return OkComplex128(f(s.right))
}

// FoldComplex128 on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldComplex128(a complex128, f func(uint) complex128) complex128 {
	return f(s.right)
}

// FoldComplex128F on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldComplex128F(a func(error) complex128, f func(uint) complex128) complex128 {
	return f(s.right)
}

// MapComplex64 on okUInt receiver
// applies its function arguments on hold value and returns an okComplex64
func (s okUInt) MapComplex64(f func(uint) complex64) ResultComplex64 {
	return OkComplex64(f(s.right))
}

// FoldComplex64 on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldComplex64(a complex64, f func(uint) complex64) complex64 {
	return f(s.right)
}

// FoldComplex64F on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldComplex64F(a func(error) complex64, f func(uint) complex64) complex64 {
	return f(s.right)
}

// MapFloat32 on okUInt receiver
// applies its function arguments on hold value and returns an okFloat32
func (s okUInt) MapFloat32(f func(uint) float32) ResultFloat32 {
	return OkFloat32(f(s.right))
}

// FoldFloat32 on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldFloat32(a float32, f func(uint) float32) float32 {
	return f(s.right)
}

// FoldFloat32F on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldFloat32F(a func(error) float32, f func(uint) float32) float32 {
	return f(s.right)
}

// MapFloat64 on okUInt receiver
// applies its function arguments on hold value and returns an okFloat64
func (s okUInt) MapFloat64(f func(uint) float64) ResultFloat64 {
	return OkFloat64(f(s.right))
}

// FoldFloat64 on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldFloat64(a float64, f func(uint) float64) float64 {
	return f(s.right)
}

// FoldFloat64F on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldFloat64F(a func(error) float64, f func(uint) float64) float64 {
	return f(s.right)
}

// MapInt on okUInt receiver
// applies its function arguments on hold value and returns an okInt
func (s okUInt) MapInt(f func(uint) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldInt(a int, f func(uint) int) int {
	return f(s.right)
}

// FoldIntF on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldIntF(a func(error) int, f func(uint) int) int {
	return f(s.right)
}

// MapInt16 on okUInt receiver
// applies its function arguments on hold value and returns an okInt16
func (s okUInt) MapInt16(f func(uint) int16) ResultInt16 {
	return OkInt16(f(s.right))
}

// FoldInt16 on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldInt16(a int16, f func(uint) int16) int16 {
	return f(s.right)
}

// FoldInt16F on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldInt16F(a func(error) int16, f func(uint) int16) int16 {
	return f(s.right)
}

// MapInt32 on okUInt receiver
// applies its function arguments on hold value and returns an okInt32
func (s okUInt) MapInt32(f func(uint) int32) ResultInt32 {
	return OkInt32(f(s.right))
}

// FoldInt32 on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldInt32(a int32, f func(uint) int32) int32 {
	return f(s.right)
}

// FoldInt32F on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldInt32F(a func(error) int32, f func(uint) int32) int32 {
	return f(s.right)
}

// MapInt64 on okUInt receiver
// applies its function arguments on hold value and returns an okInt64
func (s okUInt) MapInt64(f func(uint) int64) ResultInt64 {
	return OkInt64(f(s.right))
}

// FoldInt64 on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldInt64(a int64, f func(uint) int64) int64 {
	return f(s.right)
}

// FoldInt64F on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldInt64F(a func(error) int64, f func(uint) int64) int64 {
	return f(s.right)
}

// MapInt8 on okUInt receiver
// applies its function arguments on hold value and returns an okInt8
func (s okUInt) MapInt8(f func(uint) int8) ResultInt8 {
	return OkInt8(f(s.right))
}

// FoldInt8 on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldInt8(a int8, f func(uint) int8) int8 {
	return f(s.right)
}

// FoldInt8F on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldInt8F(a func(error) int8, f func(uint) int8) int8 {
	return f(s.right)
}

// MapRune on okUInt receiver
// applies its function arguments on hold value and returns an okRune
func (s okUInt) MapRune(f func(uint) rune) ResultRune {
	return OkRune(f(s.right))
}

// FoldRune on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldRune(a rune, f func(uint) rune) rune {
	return f(s.right)
}

// FoldRuneF on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldRuneF(a func(error) rune, f func(uint) rune) rune {
	return f(s.right)
}

// MapString on okUInt receiver
// applies its function arguments on hold value and returns an okString
func (s okUInt) MapString(f func(uint) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldString(a string, f func(uint) string) string {
	return f(s.right)
}

// FoldStringF on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldStringF(a func(error) string, f func(uint) string) string {
	return f(s.right)
}

// MapUInt on okUInt receiver
// applies its function arguments on hold value and returns an okUInt
func (s okUInt) MapUInt(f func(uint) uint) ResultUInt {
	return OkUInt(f(s.right))
}

// FoldUInt on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldUInt(a uint, f func(uint) uint) uint {
	return f(s.right)
}

// FoldUIntF on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldUIntF(a func(error) uint, f func(uint) uint) uint {
	return f(s.right)
}

// MapUInt16 on okUInt receiver
// applies its function arguments on hold value and returns an okUInt16
func (s okUInt) MapUInt16(f func(uint) uint16) ResultUInt16 {
	return OkUInt16(f(s.right))
}

// FoldUInt16 on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldUInt16(a uint16, f func(uint) uint16) uint16 {
	return f(s.right)
}

// FoldUInt16F on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldUInt16F(a func(error) uint16, f func(uint) uint16) uint16 {
	return f(s.right)
}

// MapUInt32 on okUInt receiver
// applies its function arguments on hold value and returns an okUInt32
func (s okUInt) MapUInt32(f func(uint) uint32) ResultUInt32 {
	return OkUInt32(f(s.right))
}

// FoldUInt32 on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldUInt32(a uint32, f func(uint) uint32) uint32 {
	return f(s.right)
}

// FoldUInt32F on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldUInt32F(a func(error) uint32, f func(uint) uint32) uint32 {
	return f(s.right)
}

// MapUInt64 on okUInt receiver
// applies its function arguments on hold value and returns an okUInt64
func (s okUInt) MapUInt64(f func(uint) uint64) ResultUInt64 {
	return OkUInt64(f(s.right))
}

// FoldUInt64 on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldUInt64(a uint64, f func(uint) uint64) uint64 {
	return f(s.right)
}

// FoldUInt64F on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldUInt64F(a func(error) uint64, f func(uint) uint64) uint64 {
	return f(s.right)
}

// MapUInt8 on okUInt receiver
// applies its function arguments on hold value and returns an okUInt8
func (s okUInt) MapUInt8(f func(uint) uint8) ResultUInt8 {
	return OkUInt8(f(s.right))
}

// FoldUInt8 on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldUInt8(a uint8, f func(uint) uint8) uint8 {
	return f(s.right)
}

// FoldUInt8F on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldUInt8F(a func(error) uint8, f func(uint) uint8) uint8 {
	return f(s.right)
}

// MapUintPtr on okUInt receiver
// applies its function arguments on hold value and returns an okUintPtr
func (s okUInt) MapUintPtr(f func(uint) uintptr) ResultUintPtr {
	return OkUintPtr(f(s.right))
}

// FoldUintPtr on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldUintPtr(a uintptr, f func(uint) uintptr) uintptr {
	return f(s.right)
}

// FoldUintPtrF on okUInt receiver
// applies its second function arguments on hold value and returns an uint
func (s okUInt) FoldUintPtrF(a func(error) uintptr, f func(uint) uintptr) uintptr {
	return f(s.right)
}
 // end of oks



// errUInt16 implements ResultUInt16 for a failed result
type errUInt16 struct{
	left error
}

// ErrUInt16(error  | string) makes a new errUInt16
// from an error or a string.
func ErrUInt16(err interface{}) errUInt16 {
	switch err.(type) {
		case string : return errUInt16{errors.New(err.(string))}
		case error : return errUInt16{err.(error)}
	} 
	return errUInt16{errors.New("ErrUInt16 called with something else than string or error")}
}

// Map with errUInt16 receiver is a noop
func (e errUInt16) Map(f func(uint16)) {}

// FoldF with errUInt16 applies it's first argument
// function on its error state
func (e errUInt16) FoldF(l func(e error), r func(uint16)) { l(e.left) }


// MapBool with errUInt16 receiver
// returns a newly built errUInt16 with same error.
func (e errUInt16) MapBool(f func(v uint16) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errUInt16 receiver
// returns its first argument.
func (e errUInt16) FoldBool(a bool, f func(v uint16) bool) bool {
	return a
}
// FoldBoolF with errUInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt16) FoldBoolF(a func(error) bool, f func(uint16) bool) bool {
	return a(e.left)
}

// MapByte with errUInt16 receiver
// returns a newly built errUInt16 with same error.
func (e errUInt16) MapByte(f func(v uint16) byte) ResultByte {
	return ErrByte(e.left)
}
// FoldByte with errUInt16 receiver
// returns its first argument.
func (e errUInt16) FoldByte(a byte, f func(v uint16) byte) byte {
	return a
}
// FoldByteF with errUInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt16) FoldByteF(a func(error) byte, f func(uint16) byte) byte {
	return a(e.left)
}

// MapComplex128 with errUInt16 receiver
// returns a newly built errUInt16 with same error.
func (e errUInt16) MapComplex128(f func(v uint16) complex128) ResultComplex128 {
	return ErrComplex128(e.left)
}
// FoldComplex128 with errUInt16 receiver
// returns its first argument.
func (e errUInt16) FoldComplex128(a complex128, f func(v uint16) complex128) complex128 {
	return a
}
// FoldComplex128F with errUInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt16) FoldComplex128F(a func(error) complex128, f func(uint16) complex128) complex128 {
	return a(e.left)
}

// MapComplex64 with errUInt16 receiver
// returns a newly built errUInt16 with same error.
func (e errUInt16) MapComplex64(f func(v uint16) complex64) ResultComplex64 {
	return ErrComplex64(e.left)
}
// FoldComplex64 with errUInt16 receiver
// returns its first argument.
func (e errUInt16) FoldComplex64(a complex64, f func(v uint16) complex64) complex64 {
	return a
}
// FoldComplex64F with errUInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt16) FoldComplex64F(a func(error) complex64, f func(uint16) complex64) complex64 {
	return a(e.left)
}

// MapFloat32 with errUInt16 receiver
// returns a newly built errUInt16 with same error.
func (e errUInt16) MapFloat32(f func(v uint16) float32) ResultFloat32 {
	return ErrFloat32(e.left)
}
// FoldFloat32 with errUInt16 receiver
// returns its first argument.
func (e errUInt16) FoldFloat32(a float32, f func(v uint16) float32) float32 {
	return a
}
// FoldFloat32F with errUInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt16) FoldFloat32F(a func(error) float32, f func(uint16) float32) float32 {
	return a(e.left)
}

// MapFloat64 with errUInt16 receiver
// returns a newly built errUInt16 with same error.
func (e errUInt16) MapFloat64(f func(v uint16) float64) ResultFloat64 {
	return ErrFloat64(e.left)
}
// FoldFloat64 with errUInt16 receiver
// returns its first argument.
func (e errUInt16) FoldFloat64(a float64, f func(v uint16) float64) float64 {
	return a
}
// FoldFloat64F with errUInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt16) FoldFloat64F(a func(error) float64, f func(uint16) float64) float64 {
	return a(e.left)
}

// MapInt with errUInt16 receiver
// returns a newly built errUInt16 with same error.
func (e errUInt16) MapInt(f func(v uint16) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errUInt16 receiver
// returns its first argument.
func (e errUInt16) FoldInt(a int, f func(v uint16) int) int {
	return a
}
// FoldIntF with errUInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt16) FoldIntF(a func(error) int, f func(uint16) int) int {
	return a(e.left)
}

// MapInt16 with errUInt16 receiver
// returns a newly built errUInt16 with same error.
func (e errUInt16) MapInt16(f func(v uint16) int16) ResultInt16 {
	return ErrInt16(e.left)
}
// FoldInt16 with errUInt16 receiver
// returns its first argument.
func (e errUInt16) FoldInt16(a int16, f func(v uint16) int16) int16 {
	return a
}
// FoldInt16F with errUInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt16) FoldInt16F(a func(error) int16, f func(uint16) int16) int16 {
	return a(e.left)
}

// MapInt32 with errUInt16 receiver
// returns a newly built errUInt16 with same error.
func (e errUInt16) MapInt32(f func(v uint16) int32) ResultInt32 {
	return ErrInt32(e.left)
}
// FoldInt32 with errUInt16 receiver
// returns its first argument.
func (e errUInt16) FoldInt32(a int32, f func(v uint16) int32) int32 {
	return a
}
// FoldInt32F with errUInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt16) FoldInt32F(a func(error) int32, f func(uint16) int32) int32 {
	return a(e.left)
}

// MapInt64 with errUInt16 receiver
// returns a newly built errUInt16 with same error.
func (e errUInt16) MapInt64(f func(v uint16) int64) ResultInt64 {
	return ErrInt64(e.left)
}
// FoldInt64 with errUInt16 receiver
// returns its first argument.
func (e errUInt16) FoldInt64(a int64, f func(v uint16) int64) int64 {
	return a
}
// FoldInt64F with errUInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt16) FoldInt64F(a func(error) int64, f func(uint16) int64) int64 {
	return a(e.left)
}

// MapInt8 with errUInt16 receiver
// returns a newly built errUInt16 with same error.
func (e errUInt16) MapInt8(f func(v uint16) int8) ResultInt8 {
	return ErrInt8(e.left)
}
// FoldInt8 with errUInt16 receiver
// returns its first argument.
func (e errUInt16) FoldInt8(a int8, f func(v uint16) int8) int8 {
	return a
}
// FoldInt8F with errUInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt16) FoldInt8F(a func(error) int8, f func(uint16) int8) int8 {
	return a(e.left)
}

// MapRune with errUInt16 receiver
// returns a newly built errUInt16 with same error.
func (e errUInt16) MapRune(f func(v uint16) rune) ResultRune {
	return ErrRune(e.left)
}
// FoldRune with errUInt16 receiver
// returns its first argument.
func (e errUInt16) FoldRune(a rune, f func(v uint16) rune) rune {
	return a
}
// FoldRuneF with errUInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt16) FoldRuneF(a func(error) rune, f func(uint16) rune) rune {
	return a(e.left)
}

// MapString with errUInt16 receiver
// returns a newly built errUInt16 with same error.
func (e errUInt16) MapString(f func(v uint16) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errUInt16 receiver
// returns its first argument.
func (e errUInt16) FoldString(a string, f func(v uint16) string) string {
	return a
}
// FoldStringF with errUInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt16) FoldStringF(a func(error) string, f func(uint16) string) string {
	return a(e.left)
}

// MapUInt with errUInt16 receiver
// returns a newly built errUInt16 with same error.
func (e errUInt16) MapUInt(f func(v uint16) uint) ResultUInt {
	return ErrUInt(e.left)
}
// FoldUInt with errUInt16 receiver
// returns its first argument.
func (e errUInt16) FoldUInt(a uint, f func(v uint16) uint) uint {
	return a
}
// FoldUIntF with errUInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt16) FoldUIntF(a func(error) uint, f func(uint16) uint) uint {
	return a(e.left)
}

// MapUInt16 with errUInt16 receiver
// returns a newly built errUInt16 with same error.
func (e errUInt16) MapUInt16(f func(v uint16) uint16) ResultUInt16 {
	return ErrUInt16(e.left)
}
// FoldUInt16 with errUInt16 receiver
// returns its first argument.
func (e errUInt16) FoldUInt16(a uint16, f func(v uint16) uint16) uint16 {
	return a
}
// FoldUInt16F with errUInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt16) FoldUInt16F(a func(error) uint16, f func(uint16) uint16) uint16 {
	return a(e.left)
}

// MapUInt32 with errUInt16 receiver
// returns a newly built errUInt16 with same error.
func (e errUInt16) MapUInt32(f func(v uint16) uint32) ResultUInt32 {
	return ErrUInt32(e.left)
}
// FoldUInt32 with errUInt16 receiver
// returns its first argument.
func (e errUInt16) FoldUInt32(a uint32, f func(v uint16) uint32) uint32 {
	return a
}
// FoldUInt32F with errUInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt16) FoldUInt32F(a func(error) uint32, f func(uint16) uint32) uint32 {
	return a(e.left)
}

// MapUInt64 with errUInt16 receiver
// returns a newly built errUInt16 with same error.
func (e errUInt16) MapUInt64(f func(v uint16) uint64) ResultUInt64 {
	return ErrUInt64(e.left)
}
// FoldUInt64 with errUInt16 receiver
// returns its first argument.
func (e errUInt16) FoldUInt64(a uint64, f func(v uint16) uint64) uint64 {
	return a
}
// FoldUInt64F with errUInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt16) FoldUInt64F(a func(error) uint64, f func(uint16) uint64) uint64 {
	return a(e.left)
}

// MapUInt8 with errUInt16 receiver
// returns a newly built errUInt16 with same error.
func (e errUInt16) MapUInt8(f func(v uint16) uint8) ResultUInt8 {
	return ErrUInt8(e.left)
}
// FoldUInt8 with errUInt16 receiver
// returns its first argument.
func (e errUInt16) FoldUInt8(a uint8, f func(v uint16) uint8) uint8 {
	return a
}
// FoldUInt8F with errUInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt16) FoldUInt8F(a func(error) uint8, f func(uint16) uint8) uint8 {
	return a(e.left)
}

// MapUintPtr with errUInt16 receiver
// returns a newly built errUInt16 with same error.
func (e errUInt16) MapUintPtr(f func(v uint16) uintptr) ResultUintPtr {
	return ErrUintPtr(e.left)
}
// FoldUintPtr with errUInt16 receiver
// returns its first argument.
func (e errUInt16) FoldUintPtr(a uintptr, f func(v uint16) uintptr) uintptr {
	return a
}
// FoldUintPtrF with errUInt16 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt16) FoldUintPtrF(a func(error) uintptr, f func(uint16) uintptr) uintptr {
	return a(e.left)
}
 // end of nones

// okUInt16 implements ResultUInt16 for a successful result
type okUInt16 struct {
	right uint16
}

// OkUInt16 returns a successful result with value v of type uint16 
func OkUInt16(v uint16) okUInt16 {
	return okUInt16{v}
}
// MapUInt16 with okUInt16 receiver
// applies its function argument on hold value 
func (s okUInt16) Map(f func(uint16)) { f(s.right) }

// FoldFUInt16 with okUInt16 receiver
// applies its second function argument on hold value 
func (s okUInt16) FoldF(l func(error), r func(uint16)) { r(s.right) }


// MapBool on okUInt16 receiver
// applies its function arguments on hold value and returns an okBool
func (s okUInt16) MapBool(f func(uint16) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldBool(a bool, f func(uint16) bool) bool {
	return f(s.right)
}

// FoldBoolF on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldBoolF(a func(error) bool, f func(uint16) bool) bool {
	return f(s.right)
}

// MapByte on okUInt16 receiver
// applies its function arguments on hold value and returns an okByte
func (s okUInt16) MapByte(f func(uint16) byte) ResultByte {
	return OkByte(f(s.right))
}

// FoldByte on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldByte(a byte, f func(uint16) byte) byte {
	return f(s.right)
}

// FoldByteF on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldByteF(a func(error) byte, f func(uint16) byte) byte {
	return f(s.right)
}

// MapComplex128 on okUInt16 receiver
// applies its function arguments on hold value and returns an okComplex128
func (s okUInt16) MapComplex128(f func(uint16) complex128) ResultComplex128 {
	return OkComplex128(f(s.right))
}

// FoldComplex128 on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldComplex128(a complex128, f func(uint16) complex128) complex128 {
	return f(s.right)
}

// FoldComplex128F on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldComplex128F(a func(error) complex128, f func(uint16) complex128) complex128 {
	return f(s.right)
}

// MapComplex64 on okUInt16 receiver
// applies its function arguments on hold value and returns an okComplex64
func (s okUInt16) MapComplex64(f func(uint16) complex64) ResultComplex64 {
	return OkComplex64(f(s.right))
}

// FoldComplex64 on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldComplex64(a complex64, f func(uint16) complex64) complex64 {
	return f(s.right)
}

// FoldComplex64F on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldComplex64F(a func(error) complex64, f func(uint16) complex64) complex64 {
	return f(s.right)
}

// MapFloat32 on okUInt16 receiver
// applies its function arguments on hold value and returns an okFloat32
func (s okUInt16) MapFloat32(f func(uint16) float32) ResultFloat32 {
	return OkFloat32(f(s.right))
}

// FoldFloat32 on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldFloat32(a float32, f func(uint16) float32) float32 {
	return f(s.right)
}

// FoldFloat32F on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldFloat32F(a func(error) float32, f func(uint16) float32) float32 {
	return f(s.right)
}

// MapFloat64 on okUInt16 receiver
// applies its function arguments on hold value and returns an okFloat64
func (s okUInt16) MapFloat64(f func(uint16) float64) ResultFloat64 {
	return OkFloat64(f(s.right))
}

// FoldFloat64 on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldFloat64(a float64, f func(uint16) float64) float64 {
	return f(s.right)
}

// FoldFloat64F on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldFloat64F(a func(error) float64, f func(uint16) float64) float64 {
	return f(s.right)
}

// MapInt on okUInt16 receiver
// applies its function arguments on hold value and returns an okInt
func (s okUInt16) MapInt(f func(uint16) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldInt(a int, f func(uint16) int) int {
	return f(s.right)
}

// FoldIntF on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldIntF(a func(error) int, f func(uint16) int) int {
	return f(s.right)
}

// MapInt16 on okUInt16 receiver
// applies its function arguments on hold value and returns an okInt16
func (s okUInt16) MapInt16(f func(uint16) int16) ResultInt16 {
	return OkInt16(f(s.right))
}

// FoldInt16 on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldInt16(a int16, f func(uint16) int16) int16 {
	return f(s.right)
}

// FoldInt16F on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldInt16F(a func(error) int16, f func(uint16) int16) int16 {
	return f(s.right)
}

// MapInt32 on okUInt16 receiver
// applies its function arguments on hold value and returns an okInt32
func (s okUInt16) MapInt32(f func(uint16) int32) ResultInt32 {
	return OkInt32(f(s.right))
}

// FoldInt32 on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldInt32(a int32, f func(uint16) int32) int32 {
	return f(s.right)
}

// FoldInt32F on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldInt32F(a func(error) int32, f func(uint16) int32) int32 {
	return f(s.right)
}

// MapInt64 on okUInt16 receiver
// applies its function arguments on hold value and returns an okInt64
func (s okUInt16) MapInt64(f func(uint16) int64) ResultInt64 {
	return OkInt64(f(s.right))
}

// FoldInt64 on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldInt64(a int64, f func(uint16) int64) int64 {
	return f(s.right)
}

// FoldInt64F on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldInt64F(a func(error) int64, f func(uint16) int64) int64 {
	return f(s.right)
}

// MapInt8 on okUInt16 receiver
// applies its function arguments on hold value and returns an okInt8
func (s okUInt16) MapInt8(f func(uint16) int8) ResultInt8 {
	return OkInt8(f(s.right))
}

// FoldInt8 on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldInt8(a int8, f func(uint16) int8) int8 {
	return f(s.right)
}

// FoldInt8F on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldInt8F(a func(error) int8, f func(uint16) int8) int8 {
	return f(s.right)
}

// MapRune on okUInt16 receiver
// applies its function arguments on hold value and returns an okRune
func (s okUInt16) MapRune(f func(uint16) rune) ResultRune {
	return OkRune(f(s.right))
}

// FoldRune on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldRune(a rune, f func(uint16) rune) rune {
	return f(s.right)
}

// FoldRuneF on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldRuneF(a func(error) rune, f func(uint16) rune) rune {
	return f(s.right)
}

// MapString on okUInt16 receiver
// applies its function arguments on hold value and returns an okString
func (s okUInt16) MapString(f func(uint16) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldString(a string, f func(uint16) string) string {
	return f(s.right)
}

// FoldStringF on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldStringF(a func(error) string, f func(uint16) string) string {
	return f(s.right)
}

// MapUInt on okUInt16 receiver
// applies its function arguments on hold value and returns an okUInt
func (s okUInt16) MapUInt(f func(uint16) uint) ResultUInt {
	return OkUInt(f(s.right))
}

// FoldUInt on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldUInt(a uint, f func(uint16) uint) uint {
	return f(s.right)
}

// FoldUIntF on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldUIntF(a func(error) uint, f func(uint16) uint) uint {
	return f(s.right)
}

// MapUInt16 on okUInt16 receiver
// applies its function arguments on hold value and returns an okUInt16
func (s okUInt16) MapUInt16(f func(uint16) uint16) ResultUInt16 {
	return OkUInt16(f(s.right))
}

// FoldUInt16 on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldUInt16(a uint16, f func(uint16) uint16) uint16 {
	return f(s.right)
}

// FoldUInt16F on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldUInt16F(a func(error) uint16, f func(uint16) uint16) uint16 {
	return f(s.right)
}

// MapUInt32 on okUInt16 receiver
// applies its function arguments on hold value and returns an okUInt32
func (s okUInt16) MapUInt32(f func(uint16) uint32) ResultUInt32 {
	return OkUInt32(f(s.right))
}

// FoldUInt32 on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldUInt32(a uint32, f func(uint16) uint32) uint32 {
	return f(s.right)
}

// FoldUInt32F on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldUInt32F(a func(error) uint32, f func(uint16) uint32) uint32 {
	return f(s.right)
}

// MapUInt64 on okUInt16 receiver
// applies its function arguments on hold value and returns an okUInt64
func (s okUInt16) MapUInt64(f func(uint16) uint64) ResultUInt64 {
	return OkUInt64(f(s.right))
}

// FoldUInt64 on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldUInt64(a uint64, f func(uint16) uint64) uint64 {
	return f(s.right)
}

// FoldUInt64F on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldUInt64F(a func(error) uint64, f func(uint16) uint64) uint64 {
	return f(s.right)
}

// MapUInt8 on okUInt16 receiver
// applies its function arguments on hold value and returns an okUInt8
func (s okUInt16) MapUInt8(f func(uint16) uint8) ResultUInt8 {
	return OkUInt8(f(s.right))
}

// FoldUInt8 on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldUInt8(a uint8, f func(uint16) uint8) uint8 {
	return f(s.right)
}

// FoldUInt8F on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldUInt8F(a func(error) uint8, f func(uint16) uint8) uint8 {
	return f(s.right)
}

// MapUintPtr on okUInt16 receiver
// applies its function arguments on hold value and returns an okUintPtr
func (s okUInt16) MapUintPtr(f func(uint16) uintptr) ResultUintPtr {
	return OkUintPtr(f(s.right))
}

// FoldUintPtr on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldUintPtr(a uintptr, f func(uint16) uintptr) uintptr {
	return f(s.right)
}

// FoldUintPtrF on okUInt16 receiver
// applies its second function arguments on hold value and returns an uint16
func (s okUInt16) FoldUintPtrF(a func(error) uintptr, f func(uint16) uintptr) uintptr {
	return f(s.right)
}
 // end of oks



// errUInt32 implements ResultUInt32 for a failed result
type errUInt32 struct{
	left error
}

// ErrUInt32(error  | string) makes a new errUInt32
// from an error or a string.
func ErrUInt32(err interface{}) errUInt32 {
	switch err.(type) {
		case string : return errUInt32{errors.New(err.(string))}
		case error : return errUInt32{err.(error)}
	} 
	return errUInt32{errors.New("ErrUInt32 called with something else than string or error")}
}

// Map with errUInt32 receiver is a noop
func (e errUInt32) Map(f func(uint32)) {}

// FoldF with errUInt32 applies it's first argument
// function on its error state
func (e errUInt32) FoldF(l func(e error), r func(uint32)) { l(e.left) }


// MapBool with errUInt32 receiver
// returns a newly built errUInt32 with same error.
func (e errUInt32) MapBool(f func(v uint32) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errUInt32 receiver
// returns its first argument.
func (e errUInt32) FoldBool(a bool, f func(v uint32) bool) bool {
	return a
}
// FoldBoolF with errUInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt32) FoldBoolF(a func(error) bool, f func(uint32) bool) bool {
	return a(e.left)
}

// MapByte with errUInt32 receiver
// returns a newly built errUInt32 with same error.
func (e errUInt32) MapByte(f func(v uint32) byte) ResultByte {
	return ErrByte(e.left)
}
// FoldByte with errUInt32 receiver
// returns its first argument.
func (e errUInt32) FoldByte(a byte, f func(v uint32) byte) byte {
	return a
}
// FoldByteF with errUInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt32) FoldByteF(a func(error) byte, f func(uint32) byte) byte {
	return a(e.left)
}

// MapComplex128 with errUInt32 receiver
// returns a newly built errUInt32 with same error.
func (e errUInt32) MapComplex128(f func(v uint32) complex128) ResultComplex128 {
	return ErrComplex128(e.left)
}
// FoldComplex128 with errUInt32 receiver
// returns its first argument.
func (e errUInt32) FoldComplex128(a complex128, f func(v uint32) complex128) complex128 {
	return a
}
// FoldComplex128F with errUInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt32) FoldComplex128F(a func(error) complex128, f func(uint32) complex128) complex128 {
	return a(e.left)
}

// MapComplex64 with errUInt32 receiver
// returns a newly built errUInt32 with same error.
func (e errUInt32) MapComplex64(f func(v uint32) complex64) ResultComplex64 {
	return ErrComplex64(e.left)
}
// FoldComplex64 with errUInt32 receiver
// returns its first argument.
func (e errUInt32) FoldComplex64(a complex64, f func(v uint32) complex64) complex64 {
	return a
}
// FoldComplex64F with errUInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt32) FoldComplex64F(a func(error) complex64, f func(uint32) complex64) complex64 {
	return a(e.left)
}

// MapFloat32 with errUInt32 receiver
// returns a newly built errUInt32 with same error.
func (e errUInt32) MapFloat32(f func(v uint32) float32) ResultFloat32 {
	return ErrFloat32(e.left)
}
// FoldFloat32 with errUInt32 receiver
// returns its first argument.
func (e errUInt32) FoldFloat32(a float32, f func(v uint32) float32) float32 {
	return a
}
// FoldFloat32F with errUInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt32) FoldFloat32F(a func(error) float32, f func(uint32) float32) float32 {
	return a(e.left)
}

// MapFloat64 with errUInt32 receiver
// returns a newly built errUInt32 with same error.
func (e errUInt32) MapFloat64(f func(v uint32) float64) ResultFloat64 {
	return ErrFloat64(e.left)
}
// FoldFloat64 with errUInt32 receiver
// returns its first argument.
func (e errUInt32) FoldFloat64(a float64, f func(v uint32) float64) float64 {
	return a
}
// FoldFloat64F with errUInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt32) FoldFloat64F(a func(error) float64, f func(uint32) float64) float64 {
	return a(e.left)
}

// MapInt with errUInt32 receiver
// returns a newly built errUInt32 with same error.
func (e errUInt32) MapInt(f func(v uint32) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errUInt32 receiver
// returns its first argument.
func (e errUInt32) FoldInt(a int, f func(v uint32) int) int {
	return a
}
// FoldIntF with errUInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt32) FoldIntF(a func(error) int, f func(uint32) int) int {
	return a(e.left)
}

// MapInt16 with errUInt32 receiver
// returns a newly built errUInt32 with same error.
func (e errUInt32) MapInt16(f func(v uint32) int16) ResultInt16 {
	return ErrInt16(e.left)
}
// FoldInt16 with errUInt32 receiver
// returns its first argument.
func (e errUInt32) FoldInt16(a int16, f func(v uint32) int16) int16 {
	return a
}
// FoldInt16F with errUInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt32) FoldInt16F(a func(error) int16, f func(uint32) int16) int16 {
	return a(e.left)
}

// MapInt32 with errUInt32 receiver
// returns a newly built errUInt32 with same error.
func (e errUInt32) MapInt32(f func(v uint32) int32) ResultInt32 {
	return ErrInt32(e.left)
}
// FoldInt32 with errUInt32 receiver
// returns its first argument.
func (e errUInt32) FoldInt32(a int32, f func(v uint32) int32) int32 {
	return a
}
// FoldInt32F with errUInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt32) FoldInt32F(a func(error) int32, f func(uint32) int32) int32 {
	return a(e.left)
}

// MapInt64 with errUInt32 receiver
// returns a newly built errUInt32 with same error.
func (e errUInt32) MapInt64(f func(v uint32) int64) ResultInt64 {
	return ErrInt64(e.left)
}
// FoldInt64 with errUInt32 receiver
// returns its first argument.
func (e errUInt32) FoldInt64(a int64, f func(v uint32) int64) int64 {
	return a
}
// FoldInt64F with errUInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt32) FoldInt64F(a func(error) int64, f func(uint32) int64) int64 {
	return a(e.left)
}

// MapInt8 with errUInt32 receiver
// returns a newly built errUInt32 with same error.
func (e errUInt32) MapInt8(f func(v uint32) int8) ResultInt8 {
	return ErrInt8(e.left)
}
// FoldInt8 with errUInt32 receiver
// returns its first argument.
func (e errUInt32) FoldInt8(a int8, f func(v uint32) int8) int8 {
	return a
}
// FoldInt8F with errUInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt32) FoldInt8F(a func(error) int8, f func(uint32) int8) int8 {
	return a(e.left)
}

// MapRune with errUInt32 receiver
// returns a newly built errUInt32 with same error.
func (e errUInt32) MapRune(f func(v uint32) rune) ResultRune {
	return ErrRune(e.left)
}
// FoldRune with errUInt32 receiver
// returns its first argument.
func (e errUInt32) FoldRune(a rune, f func(v uint32) rune) rune {
	return a
}
// FoldRuneF with errUInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt32) FoldRuneF(a func(error) rune, f func(uint32) rune) rune {
	return a(e.left)
}

// MapString with errUInt32 receiver
// returns a newly built errUInt32 with same error.
func (e errUInt32) MapString(f func(v uint32) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errUInt32 receiver
// returns its first argument.
func (e errUInt32) FoldString(a string, f func(v uint32) string) string {
	return a
}
// FoldStringF with errUInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt32) FoldStringF(a func(error) string, f func(uint32) string) string {
	return a(e.left)
}

// MapUInt with errUInt32 receiver
// returns a newly built errUInt32 with same error.
func (e errUInt32) MapUInt(f func(v uint32) uint) ResultUInt {
	return ErrUInt(e.left)
}
// FoldUInt with errUInt32 receiver
// returns its first argument.
func (e errUInt32) FoldUInt(a uint, f func(v uint32) uint) uint {
	return a
}
// FoldUIntF with errUInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt32) FoldUIntF(a func(error) uint, f func(uint32) uint) uint {
	return a(e.left)
}

// MapUInt16 with errUInt32 receiver
// returns a newly built errUInt32 with same error.
func (e errUInt32) MapUInt16(f func(v uint32) uint16) ResultUInt16 {
	return ErrUInt16(e.left)
}
// FoldUInt16 with errUInt32 receiver
// returns its first argument.
func (e errUInt32) FoldUInt16(a uint16, f func(v uint32) uint16) uint16 {
	return a
}
// FoldUInt16F with errUInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt32) FoldUInt16F(a func(error) uint16, f func(uint32) uint16) uint16 {
	return a(e.left)
}

// MapUInt32 with errUInt32 receiver
// returns a newly built errUInt32 with same error.
func (e errUInt32) MapUInt32(f func(v uint32) uint32) ResultUInt32 {
	return ErrUInt32(e.left)
}
// FoldUInt32 with errUInt32 receiver
// returns its first argument.
func (e errUInt32) FoldUInt32(a uint32, f func(v uint32) uint32) uint32 {
	return a
}
// FoldUInt32F with errUInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt32) FoldUInt32F(a func(error) uint32, f func(uint32) uint32) uint32 {
	return a(e.left)
}

// MapUInt64 with errUInt32 receiver
// returns a newly built errUInt32 with same error.
func (e errUInt32) MapUInt64(f func(v uint32) uint64) ResultUInt64 {
	return ErrUInt64(e.left)
}
// FoldUInt64 with errUInt32 receiver
// returns its first argument.
func (e errUInt32) FoldUInt64(a uint64, f func(v uint32) uint64) uint64 {
	return a
}
// FoldUInt64F with errUInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt32) FoldUInt64F(a func(error) uint64, f func(uint32) uint64) uint64 {
	return a(e.left)
}

// MapUInt8 with errUInt32 receiver
// returns a newly built errUInt32 with same error.
func (e errUInt32) MapUInt8(f func(v uint32) uint8) ResultUInt8 {
	return ErrUInt8(e.left)
}
// FoldUInt8 with errUInt32 receiver
// returns its first argument.
func (e errUInt32) FoldUInt8(a uint8, f func(v uint32) uint8) uint8 {
	return a
}
// FoldUInt8F with errUInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt32) FoldUInt8F(a func(error) uint8, f func(uint32) uint8) uint8 {
	return a(e.left)
}

// MapUintPtr with errUInt32 receiver
// returns a newly built errUInt32 with same error.
func (e errUInt32) MapUintPtr(f func(v uint32) uintptr) ResultUintPtr {
	return ErrUintPtr(e.left)
}
// FoldUintPtr with errUInt32 receiver
// returns its first argument.
func (e errUInt32) FoldUintPtr(a uintptr, f func(v uint32) uintptr) uintptr {
	return a
}
// FoldUintPtrF with errUInt32 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt32) FoldUintPtrF(a func(error) uintptr, f func(uint32) uintptr) uintptr {
	return a(e.left)
}
 // end of nones

// okUInt32 implements ResultUInt32 for a successful result
type okUInt32 struct {
	right uint32
}

// OkUInt32 returns a successful result with value v of type uint32 
func OkUInt32(v uint32) okUInt32 {
	return okUInt32{v}
}
// MapUInt32 with okUInt32 receiver
// applies its function argument on hold value 
func (s okUInt32) Map(f func(uint32)) { f(s.right) }

// FoldFUInt32 with okUInt32 receiver
// applies its second function argument on hold value 
func (s okUInt32) FoldF(l func(error), r func(uint32)) { r(s.right) }


// MapBool on okUInt32 receiver
// applies its function arguments on hold value and returns an okBool
func (s okUInt32) MapBool(f func(uint32) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldBool(a bool, f func(uint32) bool) bool {
	return f(s.right)
}

// FoldBoolF on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldBoolF(a func(error) bool, f func(uint32) bool) bool {
	return f(s.right)
}

// MapByte on okUInt32 receiver
// applies its function arguments on hold value and returns an okByte
func (s okUInt32) MapByte(f func(uint32) byte) ResultByte {
	return OkByte(f(s.right))
}

// FoldByte on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldByte(a byte, f func(uint32) byte) byte {
	return f(s.right)
}

// FoldByteF on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldByteF(a func(error) byte, f func(uint32) byte) byte {
	return f(s.right)
}

// MapComplex128 on okUInt32 receiver
// applies its function arguments on hold value and returns an okComplex128
func (s okUInt32) MapComplex128(f func(uint32) complex128) ResultComplex128 {
	return OkComplex128(f(s.right))
}

// FoldComplex128 on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldComplex128(a complex128, f func(uint32) complex128) complex128 {
	return f(s.right)
}

// FoldComplex128F on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldComplex128F(a func(error) complex128, f func(uint32) complex128) complex128 {
	return f(s.right)
}

// MapComplex64 on okUInt32 receiver
// applies its function arguments on hold value and returns an okComplex64
func (s okUInt32) MapComplex64(f func(uint32) complex64) ResultComplex64 {
	return OkComplex64(f(s.right))
}

// FoldComplex64 on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldComplex64(a complex64, f func(uint32) complex64) complex64 {
	return f(s.right)
}

// FoldComplex64F on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldComplex64F(a func(error) complex64, f func(uint32) complex64) complex64 {
	return f(s.right)
}

// MapFloat32 on okUInt32 receiver
// applies its function arguments on hold value and returns an okFloat32
func (s okUInt32) MapFloat32(f func(uint32) float32) ResultFloat32 {
	return OkFloat32(f(s.right))
}

// FoldFloat32 on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldFloat32(a float32, f func(uint32) float32) float32 {
	return f(s.right)
}

// FoldFloat32F on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldFloat32F(a func(error) float32, f func(uint32) float32) float32 {
	return f(s.right)
}

// MapFloat64 on okUInt32 receiver
// applies its function arguments on hold value and returns an okFloat64
func (s okUInt32) MapFloat64(f func(uint32) float64) ResultFloat64 {
	return OkFloat64(f(s.right))
}

// FoldFloat64 on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldFloat64(a float64, f func(uint32) float64) float64 {
	return f(s.right)
}

// FoldFloat64F on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldFloat64F(a func(error) float64, f func(uint32) float64) float64 {
	return f(s.right)
}

// MapInt on okUInt32 receiver
// applies its function arguments on hold value and returns an okInt
func (s okUInt32) MapInt(f func(uint32) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldInt(a int, f func(uint32) int) int {
	return f(s.right)
}

// FoldIntF on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldIntF(a func(error) int, f func(uint32) int) int {
	return f(s.right)
}

// MapInt16 on okUInt32 receiver
// applies its function arguments on hold value and returns an okInt16
func (s okUInt32) MapInt16(f func(uint32) int16) ResultInt16 {
	return OkInt16(f(s.right))
}

// FoldInt16 on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldInt16(a int16, f func(uint32) int16) int16 {
	return f(s.right)
}

// FoldInt16F on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldInt16F(a func(error) int16, f func(uint32) int16) int16 {
	return f(s.right)
}

// MapInt32 on okUInt32 receiver
// applies its function arguments on hold value and returns an okInt32
func (s okUInt32) MapInt32(f func(uint32) int32) ResultInt32 {
	return OkInt32(f(s.right))
}

// FoldInt32 on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldInt32(a int32, f func(uint32) int32) int32 {
	return f(s.right)
}

// FoldInt32F on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldInt32F(a func(error) int32, f func(uint32) int32) int32 {
	return f(s.right)
}

// MapInt64 on okUInt32 receiver
// applies its function arguments on hold value and returns an okInt64
func (s okUInt32) MapInt64(f func(uint32) int64) ResultInt64 {
	return OkInt64(f(s.right))
}

// FoldInt64 on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldInt64(a int64, f func(uint32) int64) int64 {
	return f(s.right)
}

// FoldInt64F on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldInt64F(a func(error) int64, f func(uint32) int64) int64 {
	return f(s.right)
}

// MapInt8 on okUInt32 receiver
// applies its function arguments on hold value and returns an okInt8
func (s okUInt32) MapInt8(f func(uint32) int8) ResultInt8 {
	return OkInt8(f(s.right))
}

// FoldInt8 on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldInt8(a int8, f func(uint32) int8) int8 {
	return f(s.right)
}

// FoldInt8F on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldInt8F(a func(error) int8, f func(uint32) int8) int8 {
	return f(s.right)
}

// MapRune on okUInt32 receiver
// applies its function arguments on hold value and returns an okRune
func (s okUInt32) MapRune(f func(uint32) rune) ResultRune {
	return OkRune(f(s.right))
}

// FoldRune on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldRune(a rune, f func(uint32) rune) rune {
	return f(s.right)
}

// FoldRuneF on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldRuneF(a func(error) rune, f func(uint32) rune) rune {
	return f(s.right)
}

// MapString on okUInt32 receiver
// applies its function arguments on hold value and returns an okString
func (s okUInt32) MapString(f func(uint32) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldString(a string, f func(uint32) string) string {
	return f(s.right)
}

// FoldStringF on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldStringF(a func(error) string, f func(uint32) string) string {
	return f(s.right)
}

// MapUInt on okUInt32 receiver
// applies its function arguments on hold value and returns an okUInt
func (s okUInt32) MapUInt(f func(uint32) uint) ResultUInt {
	return OkUInt(f(s.right))
}

// FoldUInt on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldUInt(a uint, f func(uint32) uint) uint {
	return f(s.right)
}

// FoldUIntF on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldUIntF(a func(error) uint, f func(uint32) uint) uint {
	return f(s.right)
}

// MapUInt16 on okUInt32 receiver
// applies its function arguments on hold value and returns an okUInt16
func (s okUInt32) MapUInt16(f func(uint32) uint16) ResultUInt16 {
	return OkUInt16(f(s.right))
}

// FoldUInt16 on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldUInt16(a uint16, f func(uint32) uint16) uint16 {
	return f(s.right)
}

// FoldUInt16F on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldUInt16F(a func(error) uint16, f func(uint32) uint16) uint16 {
	return f(s.right)
}

// MapUInt32 on okUInt32 receiver
// applies its function arguments on hold value and returns an okUInt32
func (s okUInt32) MapUInt32(f func(uint32) uint32) ResultUInt32 {
	return OkUInt32(f(s.right))
}

// FoldUInt32 on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldUInt32(a uint32, f func(uint32) uint32) uint32 {
	return f(s.right)
}

// FoldUInt32F on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldUInt32F(a func(error) uint32, f func(uint32) uint32) uint32 {
	return f(s.right)
}

// MapUInt64 on okUInt32 receiver
// applies its function arguments on hold value and returns an okUInt64
func (s okUInt32) MapUInt64(f func(uint32) uint64) ResultUInt64 {
	return OkUInt64(f(s.right))
}

// FoldUInt64 on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldUInt64(a uint64, f func(uint32) uint64) uint64 {
	return f(s.right)
}

// FoldUInt64F on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldUInt64F(a func(error) uint64, f func(uint32) uint64) uint64 {
	return f(s.right)
}

// MapUInt8 on okUInt32 receiver
// applies its function arguments on hold value and returns an okUInt8
func (s okUInt32) MapUInt8(f func(uint32) uint8) ResultUInt8 {
	return OkUInt8(f(s.right))
}

// FoldUInt8 on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldUInt8(a uint8, f func(uint32) uint8) uint8 {
	return f(s.right)
}

// FoldUInt8F on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldUInt8F(a func(error) uint8, f func(uint32) uint8) uint8 {
	return f(s.right)
}

// MapUintPtr on okUInt32 receiver
// applies its function arguments on hold value and returns an okUintPtr
func (s okUInt32) MapUintPtr(f func(uint32) uintptr) ResultUintPtr {
	return OkUintPtr(f(s.right))
}

// FoldUintPtr on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldUintPtr(a uintptr, f func(uint32) uintptr) uintptr {
	return f(s.right)
}

// FoldUintPtrF on okUInt32 receiver
// applies its second function arguments on hold value and returns an uint32
func (s okUInt32) FoldUintPtrF(a func(error) uintptr, f func(uint32) uintptr) uintptr {
	return f(s.right)
}
 // end of oks



// errUInt64 implements ResultUInt64 for a failed result
type errUInt64 struct{
	left error
}

// ErrUInt64(error  | string) makes a new errUInt64
// from an error or a string.
func ErrUInt64(err interface{}) errUInt64 {
	switch err.(type) {
		case string : return errUInt64{errors.New(err.(string))}
		case error : return errUInt64{err.(error)}
	} 
	return errUInt64{errors.New("ErrUInt64 called with something else than string or error")}
}

// Map with errUInt64 receiver is a noop
func (e errUInt64) Map(f func(uint64)) {}

// FoldF with errUInt64 applies it's first argument
// function on its error state
func (e errUInt64) FoldF(l func(e error), r func(uint64)) { l(e.left) }


// MapBool with errUInt64 receiver
// returns a newly built errUInt64 with same error.
func (e errUInt64) MapBool(f func(v uint64) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errUInt64 receiver
// returns its first argument.
func (e errUInt64) FoldBool(a bool, f func(v uint64) bool) bool {
	return a
}
// FoldBoolF with errUInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt64) FoldBoolF(a func(error) bool, f func(uint64) bool) bool {
	return a(e.left)
}

// MapByte with errUInt64 receiver
// returns a newly built errUInt64 with same error.
func (e errUInt64) MapByte(f func(v uint64) byte) ResultByte {
	return ErrByte(e.left)
}
// FoldByte with errUInt64 receiver
// returns its first argument.
func (e errUInt64) FoldByte(a byte, f func(v uint64) byte) byte {
	return a
}
// FoldByteF with errUInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt64) FoldByteF(a func(error) byte, f func(uint64) byte) byte {
	return a(e.left)
}

// MapComplex128 with errUInt64 receiver
// returns a newly built errUInt64 with same error.
func (e errUInt64) MapComplex128(f func(v uint64) complex128) ResultComplex128 {
	return ErrComplex128(e.left)
}
// FoldComplex128 with errUInt64 receiver
// returns its first argument.
func (e errUInt64) FoldComplex128(a complex128, f func(v uint64) complex128) complex128 {
	return a
}
// FoldComplex128F with errUInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt64) FoldComplex128F(a func(error) complex128, f func(uint64) complex128) complex128 {
	return a(e.left)
}

// MapComplex64 with errUInt64 receiver
// returns a newly built errUInt64 with same error.
func (e errUInt64) MapComplex64(f func(v uint64) complex64) ResultComplex64 {
	return ErrComplex64(e.left)
}
// FoldComplex64 with errUInt64 receiver
// returns its first argument.
func (e errUInt64) FoldComplex64(a complex64, f func(v uint64) complex64) complex64 {
	return a
}
// FoldComplex64F with errUInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt64) FoldComplex64F(a func(error) complex64, f func(uint64) complex64) complex64 {
	return a(e.left)
}

// MapFloat32 with errUInt64 receiver
// returns a newly built errUInt64 with same error.
func (e errUInt64) MapFloat32(f func(v uint64) float32) ResultFloat32 {
	return ErrFloat32(e.left)
}
// FoldFloat32 with errUInt64 receiver
// returns its first argument.
func (e errUInt64) FoldFloat32(a float32, f func(v uint64) float32) float32 {
	return a
}
// FoldFloat32F with errUInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt64) FoldFloat32F(a func(error) float32, f func(uint64) float32) float32 {
	return a(e.left)
}

// MapFloat64 with errUInt64 receiver
// returns a newly built errUInt64 with same error.
func (e errUInt64) MapFloat64(f func(v uint64) float64) ResultFloat64 {
	return ErrFloat64(e.left)
}
// FoldFloat64 with errUInt64 receiver
// returns its first argument.
func (e errUInt64) FoldFloat64(a float64, f func(v uint64) float64) float64 {
	return a
}
// FoldFloat64F with errUInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt64) FoldFloat64F(a func(error) float64, f func(uint64) float64) float64 {
	return a(e.left)
}

// MapInt with errUInt64 receiver
// returns a newly built errUInt64 with same error.
func (e errUInt64) MapInt(f func(v uint64) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errUInt64 receiver
// returns its first argument.
func (e errUInt64) FoldInt(a int, f func(v uint64) int) int {
	return a
}
// FoldIntF with errUInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt64) FoldIntF(a func(error) int, f func(uint64) int) int {
	return a(e.left)
}

// MapInt16 with errUInt64 receiver
// returns a newly built errUInt64 with same error.
func (e errUInt64) MapInt16(f func(v uint64) int16) ResultInt16 {
	return ErrInt16(e.left)
}
// FoldInt16 with errUInt64 receiver
// returns its first argument.
func (e errUInt64) FoldInt16(a int16, f func(v uint64) int16) int16 {
	return a
}
// FoldInt16F with errUInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt64) FoldInt16F(a func(error) int16, f func(uint64) int16) int16 {
	return a(e.left)
}

// MapInt32 with errUInt64 receiver
// returns a newly built errUInt64 with same error.
func (e errUInt64) MapInt32(f func(v uint64) int32) ResultInt32 {
	return ErrInt32(e.left)
}
// FoldInt32 with errUInt64 receiver
// returns its first argument.
func (e errUInt64) FoldInt32(a int32, f func(v uint64) int32) int32 {
	return a
}
// FoldInt32F with errUInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt64) FoldInt32F(a func(error) int32, f func(uint64) int32) int32 {
	return a(e.left)
}

// MapInt64 with errUInt64 receiver
// returns a newly built errUInt64 with same error.
func (e errUInt64) MapInt64(f func(v uint64) int64) ResultInt64 {
	return ErrInt64(e.left)
}
// FoldInt64 with errUInt64 receiver
// returns its first argument.
func (e errUInt64) FoldInt64(a int64, f func(v uint64) int64) int64 {
	return a
}
// FoldInt64F with errUInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt64) FoldInt64F(a func(error) int64, f func(uint64) int64) int64 {
	return a(e.left)
}

// MapInt8 with errUInt64 receiver
// returns a newly built errUInt64 with same error.
func (e errUInt64) MapInt8(f func(v uint64) int8) ResultInt8 {
	return ErrInt8(e.left)
}
// FoldInt8 with errUInt64 receiver
// returns its first argument.
func (e errUInt64) FoldInt8(a int8, f func(v uint64) int8) int8 {
	return a
}
// FoldInt8F with errUInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt64) FoldInt8F(a func(error) int8, f func(uint64) int8) int8 {
	return a(e.left)
}

// MapRune with errUInt64 receiver
// returns a newly built errUInt64 with same error.
func (e errUInt64) MapRune(f func(v uint64) rune) ResultRune {
	return ErrRune(e.left)
}
// FoldRune with errUInt64 receiver
// returns its first argument.
func (e errUInt64) FoldRune(a rune, f func(v uint64) rune) rune {
	return a
}
// FoldRuneF with errUInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt64) FoldRuneF(a func(error) rune, f func(uint64) rune) rune {
	return a(e.left)
}

// MapString with errUInt64 receiver
// returns a newly built errUInt64 with same error.
func (e errUInt64) MapString(f func(v uint64) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errUInt64 receiver
// returns its first argument.
func (e errUInt64) FoldString(a string, f func(v uint64) string) string {
	return a
}
// FoldStringF with errUInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt64) FoldStringF(a func(error) string, f func(uint64) string) string {
	return a(e.left)
}

// MapUInt with errUInt64 receiver
// returns a newly built errUInt64 with same error.
func (e errUInt64) MapUInt(f func(v uint64) uint) ResultUInt {
	return ErrUInt(e.left)
}
// FoldUInt with errUInt64 receiver
// returns its first argument.
func (e errUInt64) FoldUInt(a uint, f func(v uint64) uint) uint {
	return a
}
// FoldUIntF with errUInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt64) FoldUIntF(a func(error) uint, f func(uint64) uint) uint {
	return a(e.left)
}

// MapUInt16 with errUInt64 receiver
// returns a newly built errUInt64 with same error.
func (e errUInt64) MapUInt16(f func(v uint64) uint16) ResultUInt16 {
	return ErrUInt16(e.left)
}
// FoldUInt16 with errUInt64 receiver
// returns its first argument.
func (e errUInt64) FoldUInt16(a uint16, f func(v uint64) uint16) uint16 {
	return a
}
// FoldUInt16F with errUInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt64) FoldUInt16F(a func(error) uint16, f func(uint64) uint16) uint16 {
	return a(e.left)
}

// MapUInt32 with errUInt64 receiver
// returns a newly built errUInt64 with same error.
func (e errUInt64) MapUInt32(f func(v uint64) uint32) ResultUInt32 {
	return ErrUInt32(e.left)
}
// FoldUInt32 with errUInt64 receiver
// returns its first argument.
func (e errUInt64) FoldUInt32(a uint32, f func(v uint64) uint32) uint32 {
	return a
}
// FoldUInt32F with errUInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt64) FoldUInt32F(a func(error) uint32, f func(uint64) uint32) uint32 {
	return a(e.left)
}

// MapUInt64 with errUInt64 receiver
// returns a newly built errUInt64 with same error.
func (e errUInt64) MapUInt64(f func(v uint64) uint64) ResultUInt64 {
	return ErrUInt64(e.left)
}
// FoldUInt64 with errUInt64 receiver
// returns its first argument.
func (e errUInt64) FoldUInt64(a uint64, f func(v uint64) uint64) uint64 {
	return a
}
// FoldUInt64F with errUInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt64) FoldUInt64F(a func(error) uint64, f func(uint64) uint64) uint64 {
	return a(e.left)
}

// MapUInt8 with errUInt64 receiver
// returns a newly built errUInt64 with same error.
func (e errUInt64) MapUInt8(f func(v uint64) uint8) ResultUInt8 {
	return ErrUInt8(e.left)
}
// FoldUInt8 with errUInt64 receiver
// returns its first argument.
func (e errUInt64) FoldUInt8(a uint8, f func(v uint64) uint8) uint8 {
	return a
}
// FoldUInt8F with errUInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt64) FoldUInt8F(a func(error) uint8, f func(uint64) uint8) uint8 {
	return a(e.left)
}

// MapUintPtr with errUInt64 receiver
// returns a newly built errUInt64 with same error.
func (e errUInt64) MapUintPtr(f func(v uint64) uintptr) ResultUintPtr {
	return ErrUintPtr(e.left)
}
// FoldUintPtr with errUInt64 receiver
// returns its first argument.
func (e errUInt64) FoldUintPtr(a uintptr, f func(v uint64) uintptr) uintptr {
	return a
}
// FoldUintPtrF with errUInt64 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt64) FoldUintPtrF(a func(error) uintptr, f func(uint64) uintptr) uintptr {
	return a(e.left)
}
 // end of nones

// okUInt64 implements ResultUInt64 for a successful result
type okUInt64 struct {
	right uint64
}

// OkUInt64 returns a successful result with value v of type uint64 
func OkUInt64(v uint64) okUInt64 {
	return okUInt64{v}
}
// MapUInt64 with okUInt64 receiver
// applies its function argument on hold value 
func (s okUInt64) Map(f func(uint64)) { f(s.right) }

// FoldFUInt64 with okUInt64 receiver
// applies its second function argument on hold value 
func (s okUInt64) FoldF(l func(error), r func(uint64)) { r(s.right) }


// MapBool on okUInt64 receiver
// applies its function arguments on hold value and returns an okBool
func (s okUInt64) MapBool(f func(uint64) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldBool(a bool, f func(uint64) bool) bool {
	return f(s.right)
}

// FoldBoolF on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldBoolF(a func(error) bool, f func(uint64) bool) bool {
	return f(s.right)
}

// MapByte on okUInt64 receiver
// applies its function arguments on hold value and returns an okByte
func (s okUInt64) MapByte(f func(uint64) byte) ResultByte {
	return OkByte(f(s.right))
}

// FoldByte on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldByte(a byte, f func(uint64) byte) byte {
	return f(s.right)
}

// FoldByteF on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldByteF(a func(error) byte, f func(uint64) byte) byte {
	return f(s.right)
}

// MapComplex128 on okUInt64 receiver
// applies its function arguments on hold value and returns an okComplex128
func (s okUInt64) MapComplex128(f func(uint64) complex128) ResultComplex128 {
	return OkComplex128(f(s.right))
}

// FoldComplex128 on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldComplex128(a complex128, f func(uint64) complex128) complex128 {
	return f(s.right)
}

// FoldComplex128F on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldComplex128F(a func(error) complex128, f func(uint64) complex128) complex128 {
	return f(s.right)
}

// MapComplex64 on okUInt64 receiver
// applies its function arguments on hold value and returns an okComplex64
func (s okUInt64) MapComplex64(f func(uint64) complex64) ResultComplex64 {
	return OkComplex64(f(s.right))
}

// FoldComplex64 on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldComplex64(a complex64, f func(uint64) complex64) complex64 {
	return f(s.right)
}

// FoldComplex64F on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldComplex64F(a func(error) complex64, f func(uint64) complex64) complex64 {
	return f(s.right)
}

// MapFloat32 on okUInt64 receiver
// applies its function arguments on hold value and returns an okFloat32
func (s okUInt64) MapFloat32(f func(uint64) float32) ResultFloat32 {
	return OkFloat32(f(s.right))
}

// FoldFloat32 on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldFloat32(a float32, f func(uint64) float32) float32 {
	return f(s.right)
}

// FoldFloat32F on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldFloat32F(a func(error) float32, f func(uint64) float32) float32 {
	return f(s.right)
}

// MapFloat64 on okUInt64 receiver
// applies its function arguments on hold value and returns an okFloat64
func (s okUInt64) MapFloat64(f func(uint64) float64) ResultFloat64 {
	return OkFloat64(f(s.right))
}

// FoldFloat64 on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldFloat64(a float64, f func(uint64) float64) float64 {
	return f(s.right)
}

// FoldFloat64F on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldFloat64F(a func(error) float64, f func(uint64) float64) float64 {
	return f(s.right)
}

// MapInt on okUInt64 receiver
// applies its function arguments on hold value and returns an okInt
func (s okUInt64) MapInt(f func(uint64) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldInt(a int, f func(uint64) int) int {
	return f(s.right)
}

// FoldIntF on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldIntF(a func(error) int, f func(uint64) int) int {
	return f(s.right)
}

// MapInt16 on okUInt64 receiver
// applies its function arguments on hold value and returns an okInt16
func (s okUInt64) MapInt16(f func(uint64) int16) ResultInt16 {
	return OkInt16(f(s.right))
}

// FoldInt16 on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldInt16(a int16, f func(uint64) int16) int16 {
	return f(s.right)
}

// FoldInt16F on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldInt16F(a func(error) int16, f func(uint64) int16) int16 {
	return f(s.right)
}

// MapInt32 on okUInt64 receiver
// applies its function arguments on hold value and returns an okInt32
func (s okUInt64) MapInt32(f func(uint64) int32) ResultInt32 {
	return OkInt32(f(s.right))
}

// FoldInt32 on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldInt32(a int32, f func(uint64) int32) int32 {
	return f(s.right)
}

// FoldInt32F on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldInt32F(a func(error) int32, f func(uint64) int32) int32 {
	return f(s.right)
}

// MapInt64 on okUInt64 receiver
// applies its function arguments on hold value and returns an okInt64
func (s okUInt64) MapInt64(f func(uint64) int64) ResultInt64 {
	return OkInt64(f(s.right))
}

// FoldInt64 on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldInt64(a int64, f func(uint64) int64) int64 {
	return f(s.right)
}

// FoldInt64F on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldInt64F(a func(error) int64, f func(uint64) int64) int64 {
	return f(s.right)
}

// MapInt8 on okUInt64 receiver
// applies its function arguments on hold value and returns an okInt8
func (s okUInt64) MapInt8(f func(uint64) int8) ResultInt8 {
	return OkInt8(f(s.right))
}

// FoldInt8 on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldInt8(a int8, f func(uint64) int8) int8 {
	return f(s.right)
}

// FoldInt8F on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldInt8F(a func(error) int8, f func(uint64) int8) int8 {
	return f(s.right)
}

// MapRune on okUInt64 receiver
// applies its function arguments on hold value and returns an okRune
func (s okUInt64) MapRune(f func(uint64) rune) ResultRune {
	return OkRune(f(s.right))
}

// FoldRune on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldRune(a rune, f func(uint64) rune) rune {
	return f(s.right)
}

// FoldRuneF on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldRuneF(a func(error) rune, f func(uint64) rune) rune {
	return f(s.right)
}

// MapString on okUInt64 receiver
// applies its function arguments on hold value and returns an okString
func (s okUInt64) MapString(f func(uint64) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldString(a string, f func(uint64) string) string {
	return f(s.right)
}

// FoldStringF on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldStringF(a func(error) string, f func(uint64) string) string {
	return f(s.right)
}

// MapUInt on okUInt64 receiver
// applies its function arguments on hold value and returns an okUInt
func (s okUInt64) MapUInt(f func(uint64) uint) ResultUInt {
	return OkUInt(f(s.right))
}

// FoldUInt on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldUInt(a uint, f func(uint64) uint) uint {
	return f(s.right)
}

// FoldUIntF on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldUIntF(a func(error) uint, f func(uint64) uint) uint {
	return f(s.right)
}

// MapUInt16 on okUInt64 receiver
// applies its function arguments on hold value and returns an okUInt16
func (s okUInt64) MapUInt16(f func(uint64) uint16) ResultUInt16 {
	return OkUInt16(f(s.right))
}

// FoldUInt16 on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldUInt16(a uint16, f func(uint64) uint16) uint16 {
	return f(s.right)
}

// FoldUInt16F on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldUInt16F(a func(error) uint16, f func(uint64) uint16) uint16 {
	return f(s.right)
}

// MapUInt32 on okUInt64 receiver
// applies its function arguments on hold value and returns an okUInt32
func (s okUInt64) MapUInt32(f func(uint64) uint32) ResultUInt32 {
	return OkUInt32(f(s.right))
}

// FoldUInt32 on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldUInt32(a uint32, f func(uint64) uint32) uint32 {
	return f(s.right)
}

// FoldUInt32F on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldUInt32F(a func(error) uint32, f func(uint64) uint32) uint32 {
	return f(s.right)
}

// MapUInt64 on okUInt64 receiver
// applies its function arguments on hold value and returns an okUInt64
func (s okUInt64) MapUInt64(f func(uint64) uint64) ResultUInt64 {
	return OkUInt64(f(s.right))
}

// FoldUInt64 on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldUInt64(a uint64, f func(uint64) uint64) uint64 {
	return f(s.right)
}

// FoldUInt64F on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldUInt64F(a func(error) uint64, f func(uint64) uint64) uint64 {
	return f(s.right)
}

// MapUInt8 on okUInt64 receiver
// applies its function arguments on hold value and returns an okUInt8
func (s okUInt64) MapUInt8(f func(uint64) uint8) ResultUInt8 {
	return OkUInt8(f(s.right))
}

// FoldUInt8 on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldUInt8(a uint8, f func(uint64) uint8) uint8 {
	return f(s.right)
}

// FoldUInt8F on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldUInt8F(a func(error) uint8, f func(uint64) uint8) uint8 {
	return f(s.right)
}

// MapUintPtr on okUInt64 receiver
// applies its function arguments on hold value and returns an okUintPtr
func (s okUInt64) MapUintPtr(f func(uint64) uintptr) ResultUintPtr {
	return OkUintPtr(f(s.right))
}

// FoldUintPtr on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldUintPtr(a uintptr, f func(uint64) uintptr) uintptr {
	return f(s.right)
}

// FoldUintPtrF on okUInt64 receiver
// applies its second function arguments on hold value and returns an uint64
func (s okUInt64) FoldUintPtrF(a func(error) uintptr, f func(uint64) uintptr) uintptr {
	return f(s.right)
}
 // end of oks



// errUInt8 implements ResultUInt8 for a failed result
type errUInt8 struct{
	left error
}

// ErrUInt8(error  | string) makes a new errUInt8
// from an error or a string.
func ErrUInt8(err interface{}) errUInt8 {
	switch err.(type) {
		case string : return errUInt8{errors.New(err.(string))}
		case error : return errUInt8{err.(error)}
	} 
	return errUInt8{errors.New("ErrUInt8 called with something else than string or error")}
}

// Map with errUInt8 receiver is a noop
func (e errUInt8) Map(f func(uint8)) {}

// FoldF with errUInt8 applies it's first argument
// function on its error state
func (e errUInt8) FoldF(l func(e error), r func(uint8)) { l(e.left) }


// MapBool with errUInt8 receiver
// returns a newly built errUInt8 with same error.
func (e errUInt8) MapBool(f func(v uint8) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errUInt8 receiver
// returns its first argument.
func (e errUInt8) FoldBool(a bool, f func(v uint8) bool) bool {
	return a
}
// FoldBoolF with errUInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt8) FoldBoolF(a func(error) bool, f func(uint8) bool) bool {
	return a(e.left)
}

// MapByte with errUInt8 receiver
// returns a newly built errUInt8 with same error.
func (e errUInt8) MapByte(f func(v uint8) byte) ResultByte {
	return ErrByte(e.left)
}
// FoldByte with errUInt8 receiver
// returns its first argument.
func (e errUInt8) FoldByte(a byte, f func(v uint8) byte) byte {
	return a
}
// FoldByteF with errUInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt8) FoldByteF(a func(error) byte, f func(uint8) byte) byte {
	return a(e.left)
}

// MapComplex128 with errUInt8 receiver
// returns a newly built errUInt8 with same error.
func (e errUInt8) MapComplex128(f func(v uint8) complex128) ResultComplex128 {
	return ErrComplex128(e.left)
}
// FoldComplex128 with errUInt8 receiver
// returns its first argument.
func (e errUInt8) FoldComplex128(a complex128, f func(v uint8) complex128) complex128 {
	return a
}
// FoldComplex128F with errUInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt8) FoldComplex128F(a func(error) complex128, f func(uint8) complex128) complex128 {
	return a(e.left)
}

// MapComplex64 with errUInt8 receiver
// returns a newly built errUInt8 with same error.
func (e errUInt8) MapComplex64(f func(v uint8) complex64) ResultComplex64 {
	return ErrComplex64(e.left)
}
// FoldComplex64 with errUInt8 receiver
// returns its first argument.
func (e errUInt8) FoldComplex64(a complex64, f func(v uint8) complex64) complex64 {
	return a
}
// FoldComplex64F with errUInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt8) FoldComplex64F(a func(error) complex64, f func(uint8) complex64) complex64 {
	return a(e.left)
}

// MapFloat32 with errUInt8 receiver
// returns a newly built errUInt8 with same error.
func (e errUInt8) MapFloat32(f func(v uint8) float32) ResultFloat32 {
	return ErrFloat32(e.left)
}
// FoldFloat32 with errUInt8 receiver
// returns its first argument.
func (e errUInt8) FoldFloat32(a float32, f func(v uint8) float32) float32 {
	return a
}
// FoldFloat32F with errUInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt8) FoldFloat32F(a func(error) float32, f func(uint8) float32) float32 {
	return a(e.left)
}

// MapFloat64 with errUInt8 receiver
// returns a newly built errUInt8 with same error.
func (e errUInt8) MapFloat64(f func(v uint8) float64) ResultFloat64 {
	return ErrFloat64(e.left)
}
// FoldFloat64 with errUInt8 receiver
// returns its first argument.
func (e errUInt8) FoldFloat64(a float64, f func(v uint8) float64) float64 {
	return a
}
// FoldFloat64F with errUInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt8) FoldFloat64F(a func(error) float64, f func(uint8) float64) float64 {
	return a(e.left)
}

// MapInt with errUInt8 receiver
// returns a newly built errUInt8 with same error.
func (e errUInt8) MapInt(f func(v uint8) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errUInt8 receiver
// returns its first argument.
func (e errUInt8) FoldInt(a int, f func(v uint8) int) int {
	return a
}
// FoldIntF with errUInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt8) FoldIntF(a func(error) int, f func(uint8) int) int {
	return a(e.left)
}

// MapInt16 with errUInt8 receiver
// returns a newly built errUInt8 with same error.
func (e errUInt8) MapInt16(f func(v uint8) int16) ResultInt16 {
	return ErrInt16(e.left)
}
// FoldInt16 with errUInt8 receiver
// returns its first argument.
func (e errUInt8) FoldInt16(a int16, f func(v uint8) int16) int16 {
	return a
}
// FoldInt16F with errUInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt8) FoldInt16F(a func(error) int16, f func(uint8) int16) int16 {
	return a(e.left)
}

// MapInt32 with errUInt8 receiver
// returns a newly built errUInt8 with same error.
func (e errUInt8) MapInt32(f func(v uint8) int32) ResultInt32 {
	return ErrInt32(e.left)
}
// FoldInt32 with errUInt8 receiver
// returns its first argument.
func (e errUInt8) FoldInt32(a int32, f func(v uint8) int32) int32 {
	return a
}
// FoldInt32F with errUInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt8) FoldInt32F(a func(error) int32, f func(uint8) int32) int32 {
	return a(e.left)
}

// MapInt64 with errUInt8 receiver
// returns a newly built errUInt8 with same error.
func (e errUInt8) MapInt64(f func(v uint8) int64) ResultInt64 {
	return ErrInt64(e.left)
}
// FoldInt64 with errUInt8 receiver
// returns its first argument.
func (e errUInt8) FoldInt64(a int64, f func(v uint8) int64) int64 {
	return a
}
// FoldInt64F with errUInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt8) FoldInt64F(a func(error) int64, f func(uint8) int64) int64 {
	return a(e.left)
}

// MapInt8 with errUInt8 receiver
// returns a newly built errUInt8 with same error.
func (e errUInt8) MapInt8(f func(v uint8) int8) ResultInt8 {
	return ErrInt8(e.left)
}
// FoldInt8 with errUInt8 receiver
// returns its first argument.
func (e errUInt8) FoldInt8(a int8, f func(v uint8) int8) int8 {
	return a
}
// FoldInt8F with errUInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt8) FoldInt8F(a func(error) int8, f func(uint8) int8) int8 {
	return a(e.left)
}

// MapRune with errUInt8 receiver
// returns a newly built errUInt8 with same error.
func (e errUInt8) MapRune(f func(v uint8) rune) ResultRune {
	return ErrRune(e.left)
}
// FoldRune with errUInt8 receiver
// returns its first argument.
func (e errUInt8) FoldRune(a rune, f func(v uint8) rune) rune {
	return a
}
// FoldRuneF with errUInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt8) FoldRuneF(a func(error) rune, f func(uint8) rune) rune {
	return a(e.left)
}

// MapString with errUInt8 receiver
// returns a newly built errUInt8 with same error.
func (e errUInt8) MapString(f func(v uint8) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errUInt8 receiver
// returns its first argument.
func (e errUInt8) FoldString(a string, f func(v uint8) string) string {
	return a
}
// FoldStringF with errUInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt8) FoldStringF(a func(error) string, f func(uint8) string) string {
	return a(e.left)
}

// MapUInt with errUInt8 receiver
// returns a newly built errUInt8 with same error.
func (e errUInt8) MapUInt(f func(v uint8) uint) ResultUInt {
	return ErrUInt(e.left)
}
// FoldUInt with errUInt8 receiver
// returns its first argument.
func (e errUInt8) FoldUInt(a uint, f func(v uint8) uint) uint {
	return a
}
// FoldUIntF with errUInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt8) FoldUIntF(a func(error) uint, f func(uint8) uint) uint {
	return a(e.left)
}

// MapUInt16 with errUInt8 receiver
// returns a newly built errUInt8 with same error.
func (e errUInt8) MapUInt16(f func(v uint8) uint16) ResultUInt16 {
	return ErrUInt16(e.left)
}
// FoldUInt16 with errUInt8 receiver
// returns its first argument.
func (e errUInt8) FoldUInt16(a uint16, f func(v uint8) uint16) uint16 {
	return a
}
// FoldUInt16F with errUInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt8) FoldUInt16F(a func(error) uint16, f func(uint8) uint16) uint16 {
	return a(e.left)
}

// MapUInt32 with errUInt8 receiver
// returns a newly built errUInt8 with same error.
func (e errUInt8) MapUInt32(f func(v uint8) uint32) ResultUInt32 {
	return ErrUInt32(e.left)
}
// FoldUInt32 with errUInt8 receiver
// returns its first argument.
func (e errUInt8) FoldUInt32(a uint32, f func(v uint8) uint32) uint32 {
	return a
}
// FoldUInt32F with errUInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt8) FoldUInt32F(a func(error) uint32, f func(uint8) uint32) uint32 {
	return a(e.left)
}

// MapUInt64 with errUInt8 receiver
// returns a newly built errUInt8 with same error.
func (e errUInt8) MapUInt64(f func(v uint8) uint64) ResultUInt64 {
	return ErrUInt64(e.left)
}
// FoldUInt64 with errUInt8 receiver
// returns its first argument.
func (e errUInt8) FoldUInt64(a uint64, f func(v uint8) uint64) uint64 {
	return a
}
// FoldUInt64F with errUInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt8) FoldUInt64F(a func(error) uint64, f func(uint8) uint64) uint64 {
	return a(e.left)
}

// MapUInt8 with errUInt8 receiver
// returns a newly built errUInt8 with same error.
func (e errUInt8) MapUInt8(f func(v uint8) uint8) ResultUInt8 {
	return ErrUInt8(e.left)
}
// FoldUInt8 with errUInt8 receiver
// returns its first argument.
func (e errUInt8) FoldUInt8(a uint8, f func(v uint8) uint8) uint8 {
	return a
}
// FoldUInt8F with errUInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt8) FoldUInt8F(a func(error) uint8, f func(uint8) uint8) uint8 {
	return a(e.left)
}

// MapUintPtr with errUInt8 receiver
// returns a newly built errUInt8 with same error.
func (e errUInt8) MapUintPtr(f func(v uint8) uintptr) ResultUintPtr {
	return ErrUintPtr(e.left)
}
// FoldUintPtr with errUInt8 receiver
// returns its first argument.
func (e errUInt8) FoldUintPtr(a uintptr, f func(v uint8) uintptr) uintptr {
	return a
}
// FoldUintPtrF with errUInt8 receiver
// returns the result of its first argument applied to the result error state.
func (e errUInt8) FoldUintPtrF(a func(error) uintptr, f func(uint8) uintptr) uintptr {
	return a(e.left)
}
 // end of nones

// okUInt8 implements ResultUInt8 for a successful result
type okUInt8 struct {
	right uint8
}

// OkUInt8 returns a successful result with value v of type uint8 
func OkUInt8(v uint8) okUInt8 {
	return okUInt8{v}
}
// MapUInt8 with okUInt8 receiver
// applies its function argument on hold value 
func (s okUInt8) Map(f func(uint8)) { f(s.right) }

// FoldFUInt8 with okUInt8 receiver
// applies its second function argument on hold value 
func (s okUInt8) FoldF(l func(error), r func(uint8)) { r(s.right) }


// MapBool on okUInt8 receiver
// applies its function arguments on hold value and returns an okBool
func (s okUInt8) MapBool(f func(uint8) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldBool(a bool, f func(uint8) bool) bool {
	return f(s.right)
}

// FoldBoolF on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldBoolF(a func(error) bool, f func(uint8) bool) bool {
	return f(s.right)
}

// MapByte on okUInt8 receiver
// applies its function arguments on hold value and returns an okByte
func (s okUInt8) MapByte(f func(uint8) byte) ResultByte {
	return OkByte(f(s.right))
}

// FoldByte on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldByte(a byte, f func(uint8) byte) byte {
	return f(s.right)
}

// FoldByteF on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldByteF(a func(error) byte, f func(uint8) byte) byte {
	return f(s.right)
}

// MapComplex128 on okUInt8 receiver
// applies its function arguments on hold value and returns an okComplex128
func (s okUInt8) MapComplex128(f func(uint8) complex128) ResultComplex128 {
	return OkComplex128(f(s.right))
}

// FoldComplex128 on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldComplex128(a complex128, f func(uint8) complex128) complex128 {
	return f(s.right)
}

// FoldComplex128F on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldComplex128F(a func(error) complex128, f func(uint8) complex128) complex128 {
	return f(s.right)
}

// MapComplex64 on okUInt8 receiver
// applies its function arguments on hold value and returns an okComplex64
func (s okUInt8) MapComplex64(f func(uint8) complex64) ResultComplex64 {
	return OkComplex64(f(s.right))
}

// FoldComplex64 on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldComplex64(a complex64, f func(uint8) complex64) complex64 {
	return f(s.right)
}

// FoldComplex64F on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldComplex64F(a func(error) complex64, f func(uint8) complex64) complex64 {
	return f(s.right)
}

// MapFloat32 on okUInt8 receiver
// applies its function arguments on hold value and returns an okFloat32
func (s okUInt8) MapFloat32(f func(uint8) float32) ResultFloat32 {
	return OkFloat32(f(s.right))
}

// FoldFloat32 on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldFloat32(a float32, f func(uint8) float32) float32 {
	return f(s.right)
}

// FoldFloat32F on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldFloat32F(a func(error) float32, f func(uint8) float32) float32 {
	return f(s.right)
}

// MapFloat64 on okUInt8 receiver
// applies its function arguments on hold value and returns an okFloat64
func (s okUInt8) MapFloat64(f func(uint8) float64) ResultFloat64 {
	return OkFloat64(f(s.right))
}

// FoldFloat64 on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldFloat64(a float64, f func(uint8) float64) float64 {
	return f(s.right)
}

// FoldFloat64F on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldFloat64F(a func(error) float64, f func(uint8) float64) float64 {
	return f(s.right)
}

// MapInt on okUInt8 receiver
// applies its function arguments on hold value and returns an okInt
func (s okUInt8) MapInt(f func(uint8) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldInt(a int, f func(uint8) int) int {
	return f(s.right)
}

// FoldIntF on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldIntF(a func(error) int, f func(uint8) int) int {
	return f(s.right)
}

// MapInt16 on okUInt8 receiver
// applies its function arguments on hold value and returns an okInt16
func (s okUInt8) MapInt16(f func(uint8) int16) ResultInt16 {
	return OkInt16(f(s.right))
}

// FoldInt16 on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldInt16(a int16, f func(uint8) int16) int16 {
	return f(s.right)
}

// FoldInt16F on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldInt16F(a func(error) int16, f func(uint8) int16) int16 {
	return f(s.right)
}

// MapInt32 on okUInt8 receiver
// applies its function arguments on hold value and returns an okInt32
func (s okUInt8) MapInt32(f func(uint8) int32) ResultInt32 {
	return OkInt32(f(s.right))
}

// FoldInt32 on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldInt32(a int32, f func(uint8) int32) int32 {
	return f(s.right)
}

// FoldInt32F on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldInt32F(a func(error) int32, f func(uint8) int32) int32 {
	return f(s.right)
}

// MapInt64 on okUInt8 receiver
// applies its function arguments on hold value and returns an okInt64
func (s okUInt8) MapInt64(f func(uint8) int64) ResultInt64 {
	return OkInt64(f(s.right))
}

// FoldInt64 on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldInt64(a int64, f func(uint8) int64) int64 {
	return f(s.right)
}

// FoldInt64F on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldInt64F(a func(error) int64, f func(uint8) int64) int64 {
	return f(s.right)
}

// MapInt8 on okUInt8 receiver
// applies its function arguments on hold value and returns an okInt8
func (s okUInt8) MapInt8(f func(uint8) int8) ResultInt8 {
	return OkInt8(f(s.right))
}

// FoldInt8 on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldInt8(a int8, f func(uint8) int8) int8 {
	return f(s.right)
}

// FoldInt8F on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldInt8F(a func(error) int8, f func(uint8) int8) int8 {
	return f(s.right)
}

// MapRune on okUInt8 receiver
// applies its function arguments on hold value and returns an okRune
func (s okUInt8) MapRune(f func(uint8) rune) ResultRune {
	return OkRune(f(s.right))
}

// FoldRune on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldRune(a rune, f func(uint8) rune) rune {
	return f(s.right)
}

// FoldRuneF on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldRuneF(a func(error) rune, f func(uint8) rune) rune {
	return f(s.right)
}

// MapString on okUInt8 receiver
// applies its function arguments on hold value and returns an okString
func (s okUInt8) MapString(f func(uint8) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldString(a string, f func(uint8) string) string {
	return f(s.right)
}

// FoldStringF on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldStringF(a func(error) string, f func(uint8) string) string {
	return f(s.right)
}

// MapUInt on okUInt8 receiver
// applies its function arguments on hold value and returns an okUInt
func (s okUInt8) MapUInt(f func(uint8) uint) ResultUInt {
	return OkUInt(f(s.right))
}

// FoldUInt on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldUInt(a uint, f func(uint8) uint) uint {
	return f(s.right)
}

// FoldUIntF on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldUIntF(a func(error) uint, f func(uint8) uint) uint {
	return f(s.right)
}

// MapUInt16 on okUInt8 receiver
// applies its function arguments on hold value and returns an okUInt16
func (s okUInt8) MapUInt16(f func(uint8) uint16) ResultUInt16 {
	return OkUInt16(f(s.right))
}

// FoldUInt16 on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldUInt16(a uint16, f func(uint8) uint16) uint16 {
	return f(s.right)
}

// FoldUInt16F on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldUInt16F(a func(error) uint16, f func(uint8) uint16) uint16 {
	return f(s.right)
}

// MapUInt32 on okUInt8 receiver
// applies its function arguments on hold value and returns an okUInt32
func (s okUInt8) MapUInt32(f func(uint8) uint32) ResultUInt32 {
	return OkUInt32(f(s.right))
}

// FoldUInt32 on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldUInt32(a uint32, f func(uint8) uint32) uint32 {
	return f(s.right)
}

// FoldUInt32F on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldUInt32F(a func(error) uint32, f func(uint8) uint32) uint32 {
	return f(s.right)
}

// MapUInt64 on okUInt8 receiver
// applies its function arguments on hold value and returns an okUInt64
func (s okUInt8) MapUInt64(f func(uint8) uint64) ResultUInt64 {
	return OkUInt64(f(s.right))
}

// FoldUInt64 on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldUInt64(a uint64, f func(uint8) uint64) uint64 {
	return f(s.right)
}

// FoldUInt64F on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldUInt64F(a func(error) uint64, f func(uint8) uint64) uint64 {
	return f(s.right)
}

// MapUInt8 on okUInt8 receiver
// applies its function arguments on hold value and returns an okUInt8
func (s okUInt8) MapUInt8(f func(uint8) uint8) ResultUInt8 {
	return OkUInt8(f(s.right))
}

// FoldUInt8 on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldUInt8(a uint8, f func(uint8) uint8) uint8 {
	return f(s.right)
}

// FoldUInt8F on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldUInt8F(a func(error) uint8, f func(uint8) uint8) uint8 {
	return f(s.right)
}

// MapUintPtr on okUInt8 receiver
// applies its function arguments on hold value and returns an okUintPtr
func (s okUInt8) MapUintPtr(f func(uint8) uintptr) ResultUintPtr {
	return OkUintPtr(f(s.right))
}

// FoldUintPtr on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldUintPtr(a uintptr, f func(uint8) uintptr) uintptr {
	return f(s.right)
}

// FoldUintPtrF on okUInt8 receiver
// applies its second function arguments on hold value and returns an uint8
func (s okUInt8) FoldUintPtrF(a func(error) uintptr, f func(uint8) uintptr) uintptr {
	return f(s.right)
}
 // end of oks



// errUintPtr implements ResultUintPtr for a failed result
type errUintPtr struct{
	left error
}

// ErrUintPtr(error  | string) makes a new errUintPtr
// from an error or a string.
func ErrUintPtr(err interface{}) errUintPtr {
	switch err.(type) {
		case string : return errUintPtr{errors.New(err.(string))}
		case error : return errUintPtr{err.(error)}
	} 
	return errUintPtr{errors.New("ErrUintPtr called with something else than string or error")}
}

// Map with errUintPtr receiver is a noop
func (e errUintPtr) Map(f func(uintptr)) {}

// FoldF with errUintPtr applies it's first argument
// function on its error state
func (e errUintPtr) FoldF(l func(e error), r func(uintptr)) { l(e.left) }


// MapBool with errUintPtr receiver
// returns a newly built errUintPtr with same error.
func (e errUintPtr) MapBool(f func(v uintptr) bool) ResultBool {
	return ErrBool(e.left)
}
// FoldBool with errUintPtr receiver
// returns its first argument.
func (e errUintPtr) FoldBool(a bool, f func(v uintptr) bool) bool {
	return a
}
// FoldBoolF with errUintPtr receiver
// returns the result of its first argument applied to the result error state.
func (e errUintPtr) FoldBoolF(a func(error) bool, f func(uintptr) bool) bool {
	return a(e.left)
}

// MapByte with errUintPtr receiver
// returns a newly built errUintPtr with same error.
func (e errUintPtr) MapByte(f func(v uintptr) byte) ResultByte {
	return ErrByte(e.left)
}
// FoldByte with errUintPtr receiver
// returns its first argument.
func (e errUintPtr) FoldByte(a byte, f func(v uintptr) byte) byte {
	return a
}
// FoldByteF with errUintPtr receiver
// returns the result of its first argument applied to the result error state.
func (e errUintPtr) FoldByteF(a func(error) byte, f func(uintptr) byte) byte {
	return a(e.left)
}

// MapComplex128 with errUintPtr receiver
// returns a newly built errUintPtr with same error.
func (e errUintPtr) MapComplex128(f func(v uintptr) complex128) ResultComplex128 {
	return ErrComplex128(e.left)
}
// FoldComplex128 with errUintPtr receiver
// returns its first argument.
func (e errUintPtr) FoldComplex128(a complex128, f func(v uintptr) complex128) complex128 {
	return a
}
// FoldComplex128F with errUintPtr receiver
// returns the result of its first argument applied to the result error state.
func (e errUintPtr) FoldComplex128F(a func(error) complex128, f func(uintptr) complex128) complex128 {
	return a(e.left)
}

// MapComplex64 with errUintPtr receiver
// returns a newly built errUintPtr with same error.
func (e errUintPtr) MapComplex64(f func(v uintptr) complex64) ResultComplex64 {
	return ErrComplex64(e.left)
}
// FoldComplex64 with errUintPtr receiver
// returns its first argument.
func (e errUintPtr) FoldComplex64(a complex64, f func(v uintptr) complex64) complex64 {
	return a
}
// FoldComplex64F with errUintPtr receiver
// returns the result of its first argument applied to the result error state.
func (e errUintPtr) FoldComplex64F(a func(error) complex64, f func(uintptr) complex64) complex64 {
	return a(e.left)
}

// MapFloat32 with errUintPtr receiver
// returns a newly built errUintPtr with same error.
func (e errUintPtr) MapFloat32(f func(v uintptr) float32) ResultFloat32 {
	return ErrFloat32(e.left)
}
// FoldFloat32 with errUintPtr receiver
// returns its first argument.
func (e errUintPtr) FoldFloat32(a float32, f func(v uintptr) float32) float32 {
	return a
}
// FoldFloat32F with errUintPtr receiver
// returns the result of its first argument applied to the result error state.
func (e errUintPtr) FoldFloat32F(a func(error) float32, f func(uintptr) float32) float32 {
	return a(e.left)
}

// MapFloat64 with errUintPtr receiver
// returns a newly built errUintPtr with same error.
func (e errUintPtr) MapFloat64(f func(v uintptr) float64) ResultFloat64 {
	return ErrFloat64(e.left)
}
// FoldFloat64 with errUintPtr receiver
// returns its first argument.
func (e errUintPtr) FoldFloat64(a float64, f func(v uintptr) float64) float64 {
	return a
}
// FoldFloat64F with errUintPtr receiver
// returns the result of its first argument applied to the result error state.
func (e errUintPtr) FoldFloat64F(a func(error) float64, f func(uintptr) float64) float64 {
	return a(e.left)
}

// MapInt with errUintPtr receiver
// returns a newly built errUintPtr with same error.
func (e errUintPtr) MapInt(f func(v uintptr) int) ResultInt {
	return ErrInt(e.left)
}
// FoldInt with errUintPtr receiver
// returns its first argument.
func (e errUintPtr) FoldInt(a int, f func(v uintptr) int) int {
	return a
}
// FoldIntF with errUintPtr receiver
// returns the result of its first argument applied to the result error state.
func (e errUintPtr) FoldIntF(a func(error) int, f func(uintptr) int) int {
	return a(e.left)
}

// MapInt16 with errUintPtr receiver
// returns a newly built errUintPtr with same error.
func (e errUintPtr) MapInt16(f func(v uintptr) int16) ResultInt16 {
	return ErrInt16(e.left)
}
// FoldInt16 with errUintPtr receiver
// returns its first argument.
func (e errUintPtr) FoldInt16(a int16, f func(v uintptr) int16) int16 {
	return a
}
// FoldInt16F with errUintPtr receiver
// returns the result of its first argument applied to the result error state.
func (e errUintPtr) FoldInt16F(a func(error) int16, f func(uintptr) int16) int16 {
	return a(e.left)
}

// MapInt32 with errUintPtr receiver
// returns a newly built errUintPtr with same error.
func (e errUintPtr) MapInt32(f func(v uintptr) int32) ResultInt32 {
	return ErrInt32(e.left)
}
// FoldInt32 with errUintPtr receiver
// returns its first argument.
func (e errUintPtr) FoldInt32(a int32, f func(v uintptr) int32) int32 {
	return a
}
// FoldInt32F with errUintPtr receiver
// returns the result of its first argument applied to the result error state.
func (e errUintPtr) FoldInt32F(a func(error) int32, f func(uintptr) int32) int32 {
	return a(e.left)
}

// MapInt64 with errUintPtr receiver
// returns a newly built errUintPtr with same error.
func (e errUintPtr) MapInt64(f func(v uintptr) int64) ResultInt64 {
	return ErrInt64(e.left)
}
// FoldInt64 with errUintPtr receiver
// returns its first argument.
func (e errUintPtr) FoldInt64(a int64, f func(v uintptr) int64) int64 {
	return a
}
// FoldInt64F with errUintPtr receiver
// returns the result of its first argument applied to the result error state.
func (e errUintPtr) FoldInt64F(a func(error) int64, f func(uintptr) int64) int64 {
	return a(e.left)
}

// MapInt8 with errUintPtr receiver
// returns a newly built errUintPtr with same error.
func (e errUintPtr) MapInt8(f func(v uintptr) int8) ResultInt8 {
	return ErrInt8(e.left)
}
// FoldInt8 with errUintPtr receiver
// returns its first argument.
func (e errUintPtr) FoldInt8(a int8, f func(v uintptr) int8) int8 {
	return a
}
// FoldInt8F with errUintPtr receiver
// returns the result of its first argument applied to the result error state.
func (e errUintPtr) FoldInt8F(a func(error) int8, f func(uintptr) int8) int8 {
	return a(e.left)
}

// MapRune with errUintPtr receiver
// returns a newly built errUintPtr with same error.
func (e errUintPtr) MapRune(f func(v uintptr) rune) ResultRune {
	return ErrRune(e.left)
}
// FoldRune with errUintPtr receiver
// returns its first argument.
func (e errUintPtr) FoldRune(a rune, f func(v uintptr) rune) rune {
	return a
}
// FoldRuneF with errUintPtr receiver
// returns the result of its first argument applied to the result error state.
func (e errUintPtr) FoldRuneF(a func(error) rune, f func(uintptr) rune) rune {
	return a(e.left)
}

// MapString with errUintPtr receiver
// returns a newly built errUintPtr with same error.
func (e errUintPtr) MapString(f func(v uintptr) string) ResultString {
	return ErrString(e.left)
}
// FoldString with errUintPtr receiver
// returns its first argument.
func (e errUintPtr) FoldString(a string, f func(v uintptr) string) string {
	return a
}
// FoldStringF with errUintPtr receiver
// returns the result of its first argument applied to the result error state.
func (e errUintPtr) FoldStringF(a func(error) string, f func(uintptr) string) string {
	return a(e.left)
}

// MapUInt with errUintPtr receiver
// returns a newly built errUintPtr with same error.
func (e errUintPtr) MapUInt(f func(v uintptr) uint) ResultUInt {
	return ErrUInt(e.left)
}
// FoldUInt with errUintPtr receiver
// returns its first argument.
func (e errUintPtr) FoldUInt(a uint, f func(v uintptr) uint) uint {
	return a
}
// FoldUIntF with errUintPtr receiver
// returns the result of its first argument applied to the result error state.
func (e errUintPtr) FoldUIntF(a func(error) uint, f func(uintptr) uint) uint {
	return a(e.left)
}

// MapUInt16 with errUintPtr receiver
// returns a newly built errUintPtr with same error.
func (e errUintPtr) MapUInt16(f func(v uintptr) uint16) ResultUInt16 {
	return ErrUInt16(e.left)
}
// FoldUInt16 with errUintPtr receiver
// returns its first argument.
func (e errUintPtr) FoldUInt16(a uint16, f func(v uintptr) uint16) uint16 {
	return a
}
// FoldUInt16F with errUintPtr receiver
// returns the result of its first argument applied to the result error state.
func (e errUintPtr) FoldUInt16F(a func(error) uint16, f func(uintptr) uint16) uint16 {
	return a(e.left)
}

// MapUInt32 with errUintPtr receiver
// returns a newly built errUintPtr with same error.
func (e errUintPtr) MapUInt32(f func(v uintptr) uint32) ResultUInt32 {
	return ErrUInt32(e.left)
}
// FoldUInt32 with errUintPtr receiver
// returns its first argument.
func (e errUintPtr) FoldUInt32(a uint32, f func(v uintptr) uint32) uint32 {
	return a
}
// FoldUInt32F with errUintPtr receiver
// returns the result of its first argument applied to the result error state.
func (e errUintPtr) FoldUInt32F(a func(error) uint32, f func(uintptr) uint32) uint32 {
	return a(e.left)
}

// MapUInt64 with errUintPtr receiver
// returns a newly built errUintPtr with same error.
func (e errUintPtr) MapUInt64(f func(v uintptr) uint64) ResultUInt64 {
	return ErrUInt64(e.left)
}
// FoldUInt64 with errUintPtr receiver
// returns its first argument.
func (e errUintPtr) FoldUInt64(a uint64, f func(v uintptr) uint64) uint64 {
	return a
}
// FoldUInt64F with errUintPtr receiver
// returns the result of its first argument applied to the result error state.
func (e errUintPtr) FoldUInt64F(a func(error) uint64, f func(uintptr) uint64) uint64 {
	return a(e.left)
}

// MapUInt8 with errUintPtr receiver
// returns a newly built errUintPtr with same error.
func (e errUintPtr) MapUInt8(f func(v uintptr) uint8) ResultUInt8 {
	return ErrUInt8(e.left)
}
// FoldUInt8 with errUintPtr receiver
// returns its first argument.
func (e errUintPtr) FoldUInt8(a uint8, f func(v uintptr) uint8) uint8 {
	return a
}
// FoldUInt8F with errUintPtr receiver
// returns the result of its first argument applied to the result error state.
func (e errUintPtr) FoldUInt8F(a func(error) uint8, f func(uintptr) uint8) uint8 {
	return a(e.left)
}

// MapUintPtr with errUintPtr receiver
// returns a newly built errUintPtr with same error.
func (e errUintPtr) MapUintPtr(f func(v uintptr) uintptr) ResultUintPtr {
	return ErrUintPtr(e.left)
}
// FoldUintPtr with errUintPtr receiver
// returns its first argument.
func (e errUintPtr) FoldUintPtr(a uintptr, f func(v uintptr) uintptr) uintptr {
	return a
}
// FoldUintPtrF with errUintPtr receiver
// returns the result of its first argument applied to the result error state.
func (e errUintPtr) FoldUintPtrF(a func(error) uintptr, f func(uintptr) uintptr) uintptr {
	return a(e.left)
}
 // end of nones

// okUintPtr implements ResultUintPtr for a successful result
type okUintPtr struct {
	right uintptr
}

// OkUintPtr returns a successful result with value v of type uintptr 
func OkUintPtr(v uintptr) okUintPtr {
	return okUintPtr{v}
}
// MapUintPtr with okUintPtr receiver
// applies its function argument on hold value 
func (s okUintPtr) Map(f func(uintptr)) { f(s.right) }

// FoldFUintPtr with okUintPtr receiver
// applies its second function argument on hold value 
func (s okUintPtr) FoldF(l func(error), r func(uintptr)) { r(s.right) }


// MapBool on okUintPtr receiver
// applies its function arguments on hold value and returns an okBool
func (s okUintPtr) MapBool(f func(uintptr) bool) ResultBool {
	return OkBool(f(s.right))
}

// FoldBool on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldBool(a bool, f func(uintptr) bool) bool {
	return f(s.right)
}

// FoldBoolF on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldBoolF(a func(error) bool, f func(uintptr) bool) bool {
	return f(s.right)
}

// MapByte on okUintPtr receiver
// applies its function arguments on hold value and returns an okByte
func (s okUintPtr) MapByte(f func(uintptr) byte) ResultByte {
	return OkByte(f(s.right))
}

// FoldByte on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldByte(a byte, f func(uintptr) byte) byte {
	return f(s.right)
}

// FoldByteF on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldByteF(a func(error) byte, f func(uintptr) byte) byte {
	return f(s.right)
}

// MapComplex128 on okUintPtr receiver
// applies its function arguments on hold value and returns an okComplex128
func (s okUintPtr) MapComplex128(f func(uintptr) complex128) ResultComplex128 {
	return OkComplex128(f(s.right))
}

// FoldComplex128 on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldComplex128(a complex128, f func(uintptr) complex128) complex128 {
	return f(s.right)
}

// FoldComplex128F on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldComplex128F(a func(error) complex128, f func(uintptr) complex128) complex128 {
	return f(s.right)
}

// MapComplex64 on okUintPtr receiver
// applies its function arguments on hold value and returns an okComplex64
func (s okUintPtr) MapComplex64(f func(uintptr) complex64) ResultComplex64 {
	return OkComplex64(f(s.right))
}

// FoldComplex64 on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldComplex64(a complex64, f func(uintptr) complex64) complex64 {
	return f(s.right)
}

// FoldComplex64F on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldComplex64F(a func(error) complex64, f func(uintptr) complex64) complex64 {
	return f(s.right)
}

// MapFloat32 on okUintPtr receiver
// applies its function arguments on hold value and returns an okFloat32
func (s okUintPtr) MapFloat32(f func(uintptr) float32) ResultFloat32 {
	return OkFloat32(f(s.right))
}

// FoldFloat32 on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldFloat32(a float32, f func(uintptr) float32) float32 {
	return f(s.right)
}

// FoldFloat32F on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldFloat32F(a func(error) float32, f func(uintptr) float32) float32 {
	return f(s.right)
}

// MapFloat64 on okUintPtr receiver
// applies its function arguments on hold value and returns an okFloat64
func (s okUintPtr) MapFloat64(f func(uintptr) float64) ResultFloat64 {
	return OkFloat64(f(s.right))
}

// FoldFloat64 on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldFloat64(a float64, f func(uintptr) float64) float64 {
	return f(s.right)
}

// FoldFloat64F on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldFloat64F(a func(error) float64, f func(uintptr) float64) float64 {
	return f(s.right)
}

// MapInt on okUintPtr receiver
// applies its function arguments on hold value and returns an okInt
func (s okUintPtr) MapInt(f func(uintptr) int) ResultInt {
	return OkInt(f(s.right))
}

// FoldInt on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldInt(a int, f func(uintptr) int) int {
	return f(s.right)
}

// FoldIntF on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldIntF(a func(error) int, f func(uintptr) int) int {
	return f(s.right)
}

// MapInt16 on okUintPtr receiver
// applies its function arguments on hold value and returns an okInt16
func (s okUintPtr) MapInt16(f func(uintptr) int16) ResultInt16 {
	return OkInt16(f(s.right))
}

// FoldInt16 on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldInt16(a int16, f func(uintptr) int16) int16 {
	return f(s.right)
}

// FoldInt16F on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldInt16F(a func(error) int16, f func(uintptr) int16) int16 {
	return f(s.right)
}

// MapInt32 on okUintPtr receiver
// applies its function arguments on hold value and returns an okInt32
func (s okUintPtr) MapInt32(f func(uintptr) int32) ResultInt32 {
	return OkInt32(f(s.right))
}

// FoldInt32 on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldInt32(a int32, f func(uintptr) int32) int32 {
	return f(s.right)
}

// FoldInt32F on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldInt32F(a func(error) int32, f func(uintptr) int32) int32 {
	return f(s.right)
}

// MapInt64 on okUintPtr receiver
// applies its function arguments on hold value and returns an okInt64
func (s okUintPtr) MapInt64(f func(uintptr) int64) ResultInt64 {
	return OkInt64(f(s.right))
}

// FoldInt64 on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldInt64(a int64, f func(uintptr) int64) int64 {
	return f(s.right)
}

// FoldInt64F on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldInt64F(a func(error) int64, f func(uintptr) int64) int64 {
	return f(s.right)
}

// MapInt8 on okUintPtr receiver
// applies its function arguments on hold value and returns an okInt8
func (s okUintPtr) MapInt8(f func(uintptr) int8) ResultInt8 {
	return OkInt8(f(s.right))
}

// FoldInt8 on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldInt8(a int8, f func(uintptr) int8) int8 {
	return f(s.right)
}

// FoldInt8F on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldInt8F(a func(error) int8, f func(uintptr) int8) int8 {
	return f(s.right)
}

// MapRune on okUintPtr receiver
// applies its function arguments on hold value and returns an okRune
func (s okUintPtr) MapRune(f func(uintptr) rune) ResultRune {
	return OkRune(f(s.right))
}

// FoldRune on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldRune(a rune, f func(uintptr) rune) rune {
	return f(s.right)
}

// FoldRuneF on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldRuneF(a func(error) rune, f func(uintptr) rune) rune {
	return f(s.right)
}

// MapString on okUintPtr receiver
// applies its function arguments on hold value and returns an okString
func (s okUintPtr) MapString(f func(uintptr) string) ResultString {
	return OkString(f(s.right))
}

// FoldString on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldString(a string, f func(uintptr) string) string {
	return f(s.right)
}

// FoldStringF on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldStringF(a func(error) string, f func(uintptr) string) string {
	return f(s.right)
}

// MapUInt on okUintPtr receiver
// applies its function arguments on hold value and returns an okUInt
func (s okUintPtr) MapUInt(f func(uintptr) uint) ResultUInt {
	return OkUInt(f(s.right))
}

// FoldUInt on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldUInt(a uint, f func(uintptr) uint) uint {
	return f(s.right)
}

// FoldUIntF on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldUIntF(a func(error) uint, f func(uintptr) uint) uint {
	return f(s.right)
}

// MapUInt16 on okUintPtr receiver
// applies its function arguments on hold value and returns an okUInt16
func (s okUintPtr) MapUInt16(f func(uintptr) uint16) ResultUInt16 {
	return OkUInt16(f(s.right))
}

// FoldUInt16 on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldUInt16(a uint16, f func(uintptr) uint16) uint16 {
	return f(s.right)
}

// FoldUInt16F on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldUInt16F(a func(error) uint16, f func(uintptr) uint16) uint16 {
	return f(s.right)
}

// MapUInt32 on okUintPtr receiver
// applies its function arguments on hold value and returns an okUInt32
func (s okUintPtr) MapUInt32(f func(uintptr) uint32) ResultUInt32 {
	return OkUInt32(f(s.right))
}

// FoldUInt32 on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldUInt32(a uint32, f func(uintptr) uint32) uint32 {
	return f(s.right)
}

// FoldUInt32F on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldUInt32F(a func(error) uint32, f func(uintptr) uint32) uint32 {
	return f(s.right)
}

// MapUInt64 on okUintPtr receiver
// applies its function arguments on hold value and returns an okUInt64
func (s okUintPtr) MapUInt64(f func(uintptr) uint64) ResultUInt64 {
	return OkUInt64(f(s.right))
}

// FoldUInt64 on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldUInt64(a uint64, f func(uintptr) uint64) uint64 {
	return f(s.right)
}

// FoldUInt64F on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldUInt64F(a func(error) uint64, f func(uintptr) uint64) uint64 {
	return f(s.right)
}

// MapUInt8 on okUintPtr receiver
// applies its function arguments on hold value and returns an okUInt8
func (s okUintPtr) MapUInt8(f func(uintptr) uint8) ResultUInt8 {
	return OkUInt8(f(s.right))
}

// FoldUInt8 on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldUInt8(a uint8, f func(uintptr) uint8) uint8 {
	return f(s.right)
}

// FoldUInt8F on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldUInt8F(a func(error) uint8, f func(uintptr) uint8) uint8 {
	return f(s.right)
}

// MapUintPtr on okUintPtr receiver
// applies its function arguments on hold value and returns an okUintPtr
func (s okUintPtr) MapUintPtr(f func(uintptr) uintptr) ResultUintPtr {
	return OkUintPtr(f(s.right))
}

// FoldUintPtr on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldUintPtr(a uintptr, f func(uintptr) uintptr) uintptr {
	return f(s.right)
}

// FoldUintPtrF on okUintPtr receiver
// applies its second function arguments on hold value and returns an uintptr
func (s okUintPtr) FoldUintPtrF(a func(error) uintptr, f func(uintptr) uintptr) uintptr {
	return f(s.right)
}
 // end of oks

 // end of everything

